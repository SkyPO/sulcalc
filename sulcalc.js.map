{"version":3,"sources":["webpack:///./src/Pokemon.js","webpack:///./src/utilities.js","webpack:///./src/endOfTurn/smEndOfTurn.js","webpack:///./~/lodash/_baseClamp.js","webpack:///./~/lodash/isObject.js","webpack:///./~/lodash/_freeGlobal.js","webpack:///./~/lodash/_getRawTag.js","webpack:///./src/Ability.js","webpack:///./~/lodash/_objectToString.js","webpack:///./src/Field.js","webpack:///./~/lodash/isSymbol.js","webpack:///./~/lodash/toNumber.js","webpack:///./src/Item.js","webpack:///./src/errors.js","webpack:///(webpack)/buildin/global.js","webpack:///./src/sulcalc.js","webpack:///./~/lodash/_Symbol.js","webpack:///./~/lodash/_baseGetTag.js","webpack:///./~/lodash/_root.js","webpack:///./~/lodash/isObjectLike.js","webpack:///./src/info.js","webpack:///./src/Move.js","webpack:///./~/lodash/clamp.js","webpack:///./src/calculate/index.js","webpack:///./src/endOfTurn/index.js","webpack:///./src/calculate/advCalculate.js","webpack:///./src/calculate/b2w2Calculate.js","webpack:///./src/calculate/gscCalculate.js","webpack:///./src/Multiset.js","webpack:///./src/calculate/hgssCalculate.js","webpack:///./src/calculate/orasCalculate.js","webpack:///./src/calculate/rbyCalculate.js","webpack:///./src/calculate/smCalculate.js","webpack:///./src/endOfTurn/advEndOfTurn.js","webpack:///./src/endOfTurn/b2w2EndOfTurn.js","webpack:///./src/endOfTurn/gscEndOfTurn.js","webpack:///./src/endOfTurn/hgssEndOfTurn.js","webpack:///./src/endOfTurn/orasEndOfTurn.js","webpack:///./src/endOfTurn/rbyEndOfTurn.js"],"names":[],"mappings":"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","file":"sulcalc.js","sourcesContent":["import clamp from \"lodash/clamp\";\n\nimport Multiset from \"./Multiset\";\nimport Ability from \"./Ability\";\nimport Item from \"./Item\";\nimport Move from \"./Move\";\nimport Field from \"./Field\";\n\nimport {\n    Gens, Genders, Stats, Statuses, Types,\n    maxGen, roundHalfToZero, avg\n} from \"./utilities\";\n\nimport {\n    typeId, typeName, pokemonId, pokemonName, natureName, natureId,\n    natureStats, natureMultiplier, baseStats, pokeType1, pokeType2,\n    weight, evolutions, preEvolution, ability1, ability2, ability3,\n    isPokeUseful, requiredItemForPoke\n} from \"./info\";\n\nimport {\n    ImportableEvError, ImportableIvError,\n    ImportableLevelError, ImportableLineError\n} from \"./errors\";\n\nconst {max, min, trunc} = Math;\n\nconst statNames = [\"HP\", \"Atk\", \"Def\", \"SpA\", \"SpD\", \"Spe\"];\nconst genderShorthands = [\"\", \"(M)\", \"(F)\", \"\"];\n\nexport default class Pokemon {\n\n    constructor(pokemon = {}, gen) {\n        if (typeof pokemon === \"string\") {\n            this.name = pokemon;\n            pokemon = {};\n        } else if (pokemon.name) {\n            this.name = pokemon.name;\n        } else {\n            this.id = pokemon.id || \"0:0\";\n        }\n\n        gen = Number(gen) || Number(pokemon.gen) || maxGen;\n        this.gen = gen;\n\n        this.evs = pokemon.evs || Array(6).fill(gen >= Gens.ADV ? 0 : 252);\n        this.ivs = pokemon.ivs || Array(6).fill(gen >= Gens.ADV ? 31 : 15);\n        this.boosts = pokemon.boosts || Array(6).fill(0);\n        this.level = Number(pokemon.level) || 100;\n        if (pokemon.natureName) {\n            this.natureName = pokemon.natureName;\n        } else {\n            this.nature = Number(pokemon.nature) || 0;\n        }\n\n        this.status = Number(pokemon.status) || Statuses.NO_STATUS;\n        this.gender = Number(pokemon.gender) || Genders.NO_GENDER;\n        this.ability = new Ability(pokemon.ability, gen);\n        this.item = new Item(pokemon.item, gen);\n        this.moves = (pokemon.moves || [\n            {id: 0}, {id: 0}, {id: 0}, {id: 0}\n        ]).map(move => new Move(move, gen));\n\n        this.overrideTypes = pokemon.overrideTypes || [-1, -1];\n        this.overrideStats = pokemon.overrideStats || [];\n\n        this._currentHp = pokemon._currentHp || this.stat(Stats.HP);\n        this._currentHpRange = new Multiset(pokemon._currentHpRange\n                                            || [this.stat(Stats.HP)]);\n        this._currentHpRangeBerry = new Multiset(pokemon._currentHpRangeBerry);\n\n        // GHOST: Trick or Treat, GRASS: Forest's Curse, can't coexist\n        this.addedType = Number(pokemon.addedType) || Types.CURSE;\n\n        this.lightScreen = Boolean(pokemon.lightScreen);\n        this.reflect = Boolean(pokemon.reflect);\n\n        this.luckyChant = Boolean(pokemon.luckyChant);\n        this.stockpile = Number(pokemon.stockpile) || 0;\n        this.flashFire = Boolean(pokemon.flashFire);\n        this.metronome = Number(pokemon.metronome) || 0;\n        this.switchedOut = Boolean(pokemon.switchedOut);\n        this.movedFirst = Boolean(pokemon.movedFirst);\n        this.damagedPreviously = Boolean(pokemon.damagedPreviously);\n        this.damagedByPainSplit = Boolean(pokemon.damagedByPainSplit);\n        this.beatUpStats = pokemon.beatUpStats || [0];\n        this.beatUpLevels = pokemon.beatUpLevels || [1];\n\n        this.plus = Boolean(pokemon.plus);\n        this.minus = Boolean(pokemon.minus);\n        this.electrify = Boolean(pokemon.electrify);\n        this.happiness = Number(pokemon.happiness) || 0;\n        this.brokenMultiscale = Boolean(pokemon.brokenMultiscale);\n        this.autotomize = Boolean(pokemon.autotomize);\n        this.unburden = Boolean(pokemon.unburden);\n        this.tailwind = Boolean(pokemon.tailwind);\n        this.slowStart = Boolean(pokemon.slowStart);\n        this.toxicCounter = Number(pokemon.toxicCounter) || 0;\n        this.stealthRock = Boolean(pokemon.stealthRock);\n        this.spikes = Number(pokemon.spikes) || 0;\n        this.grounded = Boolean(pokemon.grounded);\n        this.flowerGift = Boolean(pokemon.flowerGift);\n        this.powerTrick = Boolean(pokemon.powerTrick);\n        this.foresight = Boolean(pokemon.foresight);\n        this.friendGuard = Boolean(pokemon.friendGuard);\n        this.battery = Boolean(pokemon.battery);\n        this.charge = Boolean(pokemon.charge);\n        this.helpingHand = Boolean(pokemon.helpingHand);\n    }\n\n    static \"import\"(importText, gen = maxGen) {\n        const poke = new Pokemon({gen});\n\n        let nextMove = 0;\n\n        const lines = importText.trim()\n                                .replace(\"\\r\", \"\")\n                                .replace(/ {2,}/g, \" \")\n                                .split(\"\\n\");\n\n        const [identifier, item] = lines[0].split(\"@\");\n\n        const parensRegex = /\\((.*?)\\)/g;\n        const firstParens = parensRegex.exec(identifier);\n        if (firstParens) {\n            const secondParens = parensRegex.exec(identifier);\n            if (secondParens) {\n                poke.name = firstParens[1];\n                poke.gender = genderShorthands.indexOf(\n                    secondParens[0].toUpperCase());\n            } else {\n                poke.gender = genderShorthands.indexOf(\n                    firstParens[0].toUpperCase());\n                if (poke.gender > -1) {\n                    const name = identifier.match(/.*?(?=\\()/)[0]\n                                           .replace(\"*\", \"\");\n                    poke.name = name;\n                } else {\n                    poke.gender = 0;\n                    poke.name = firstParens[1];\n                }\n            }\n        } else {\n            poke.name = identifier.replace(\"*\", \"\");\n        }\n\n        if (poke.gen >= Gens.GSC && item) {\n            poke.item.name = item;\n        }\n\n        for (const line of lines.slice(1)) {\n            const idx = line.indexOf(\":\");\n            const key = line.substring(0, idx)\n                            .trim()\n                            .toLowerCase();\n            const value = line.substring(idx + 1).trim();\n            switch (key) {\n                case \"level\":\n                    poke.level = parseInt(value, 10);\n                    if (poke.level < 1 || poke.level > 100\n                        || Number.isNaN(poke.level)) {\n                        throw new ImportableLevelError(value);\n                    }\n                    break;\n                case \"ability\":\n                case \"trait\":\n                    poke.ability.name = value;\n                    break;\n                case \"evs\":\n                    for (const ev of value.split(\"/\").map(s => s.trim())) {\n                        const [stat, value] = parseEv(ev);\n                        poke.evs[stat] = value;\n                    }\n                    break;\n                case \"ivs\":\n                    for (const iv of value.split(\"/\").map(s => s.trim())) {\n                        const [stat, value] = parseIv(iv, poke.gen);\n                        poke.ivs[stat] = value;\n                    }\n                    break;\n                case \"shiny\":\n                    break;\n                default:\n                    if (key) throw new ImportableLineError(line);\n                    if (value.charAt(0) === \"-\" || value.charAt(0) === \"~\") {\n                        parseMove(value.slice(1), poke, nextMove);\n                        nextMove++;\n                    } else if (value.split(\" \")[1].toLowerCase() === \"nature\") {\n                        poke.natureName = value.split(\" \")[0];\n                    } else {\n                        throw new ImportableLineError(line);\n                    }\n            }\n        }\n\n        poke.moves.sort(noMoveLast);\n\n        if (poke.moves.some(move => move.name === \"Return\")) {\n            poke.happiness = 255;\n        }\n\n        return poke;\n    }\n\n    static \"export\"(poke, options) {\n        return poke.export(options);\n    }\n\n    \"export\"(options = {}) {\n        const importable = [];\n\n        const firstLine = [];\n        firstLine.push(this.name);\n        if (this.gen >= Gens.ADV && this.gender) {\n            firstLine.push(genderShorthands[this.gender]);\n        }\n        if (this.gen >= Gens.GSC) {\n            firstLine.push(\"@\", this.item.name);\n        }\n        importable.push(firstLine.join(\" \"));\n\n        if (this.gen >= Gens.ADV) {\n            importable.push(`Ability: ${this.ability.name}`);\n        }\n\n        const evList = [];\n        for (let i = 0; i < 6; i++) {\n            const printedEv = printEv(i, this.evs[i], this.evs, this.gen);\n            if (printedEv) evList.push(printedEv);\n        }\n        if (evList.length > 0) {\n            importable.push(`EVs: ${evList.join(\" / \")}`);\n        }\n\n        const hiddenPowerType = Move.hiddenPowerType(this.ivs, this.gen);\n        const hiddenPower = Move.hiddenPowers(hiddenPowerType, this.gen)[0];\n        const hasHiddenPower = this.gen >= Gens.GSC\n            && this.moves.some(move => move.name === \"Hidden Power\");\n        if (!hasHiddenPower\n            || this.ivs.slice(1).join() !== hiddenPower.slice(1).join()) {\n            const ivList = [];\n            for (let i = 0; i < 6; i++) {\n                const printedIv = printIv(i, this.ivs[i], this.ivs, this.gen);\n                if (printedIv) ivList.push(printedIv);\n            }\n            if (ivList.length > 0) {\n                importable.push(`IVs: ${ivList.join(\" / \")}`);\n            }\n        }\n\n        if (this.gen >= Gens.ADV) {\n            let nature = `${this.natureName} Nature`;\n            const n = natureStats(this.nature);\n            if (n[0] > -1 && options.natureInfo) {\n                const boosted = statNames[n[0]];\n                const lowered = statNames[n[1]];\n                nature += ` (+${boosted}, -${lowered})`;\n            }\n            importable.push(nature);\n        }\n\n        for (const move of this.moves) {\n            if (move.name === \"Hidden Power\") {\n                const type = typeName(hiddenPowerType);\n                importable.push(`- Hidden Power [${type}]`);\n            } else if (move.name !== \"(No Move)\") {\n                importable.push(`- ${move.name}`);\n            }\n        }\n\n        return importable.join(\"\\n\");\n    }\n\n    get name() {\n        return pokemonName(this.id);\n    }\n\n    set name(pokeName) {\n        this.id = pokemonId(pokeName);\n    }\n\n    get natureName() {\n        return natureName(this.nature);\n    }\n\n    set natureName(natureName) {\n        this.nature = natureId(natureName);\n    }\n\n    num() {\n        return Number(this.id.split(\":\")[0]);\n    }\n\n    form() { // maybe we could call this genus?\n        return Number(this.id.split(\":\")[1]);\n    }\n\n    stat(s) {\n        if (this.powerTrick && (1 <= s && s <= 2)) {\n            s = 3 - s;\n        }\n\n        if (this.overrideStats[s]) {\n            return this.overrideStats[s];\n        }\n\n        const base = this.baseStat(s);\n        const lvl = this.level;\n        let ev, iv;\n        if (this.gen < Gens.ADV && s === Stats.HP) {\n            iv = calcHealthDv(this.ivs);\n            ev = this.evs[s];\n        } else if (this.gen < Gens.ADV && s === Stats.SDEF) {\n            iv = this.ivs[Stats.SPC];\n            ev = this.evs[Stats.SPC];\n        } else {\n            iv = this.ivs[s];\n            ev = this.evs[s];\n        }\n        ev = trunc(ev / 4);\n\n        if (this.gen < Gens.ADV) {\n            if (s === Stats.HP) {\n                // (2*(iv+base) + ev/4) * level/100 + level + 10\n                return min(999, trunc(\n                    ((iv + base) * 2 + ev) * lvl / 100) + lvl + 10);\n            }\n            // (2*(iv+base) + ev/4) * level/100 + 5\n            return min(999, trunc(((iv + base) * 2 + ev) * lvl / 100) + 5);\n        }\n\n        if (s === Stats.HP) {\n            // shedinja\n            if (base === 1) {\n                return 1;\n            }\n            // (iv + 2*base + ev/4 + 100) * level/100 + 10\n            return trunc((iv + 2 * base + ev + 100) * lvl / 100) + 10;\n        }\n\n        // ((iv + 2*base + ev/4) * level/100 + 5)*nature\n        const n = natureMultiplier(this.nature, s);\n        const stat = trunc((iv + 2 * base + ev) * lvl / 100) + 5;\n        return trunc(stat * (10 + n) / 10);\n    }\n\n    boost(s) {\n        if (this.gen < Gens.B2W2 && this.ability.name === \"Simple\") {\n            return clamp(2 * this.boosts[s], -6, 6);\n        }\n        return this.boosts[s];\n    }\n\n    boostedStat(s) {\n        const boost = this.boost(s);\n        const stat = this.stat(s);\n\n        if (s === Stats.HP) {\n            return stat;\n        }\n\n        if (this.gen < Gens.ADV) {\n            const numerator = trunc(\n                max(2, 2 + boost) / max(2, 2 - boost) * 100);\n            return clamp(trunc(stat * numerator / 100), 1, 999);\n        }\n\n        return trunc(stat * max(2, 2 + boost) / max(2, 2 - boost));\n    }\n\n    speed(field = {}) {\n        field = new Field(field);\n        let speed = this.boostedStat(Stats.SPD);\n\n        if (field.rain() && this.ability.name === \"Swift Swim\"\n            || field.sun() && this.ability.name === \"Chlorophyll\"\n            || field.sand() && this.ability.name === \"Sand Rush\"\n            || field.hail() && this.ability.name === \"Slush Rush\"\n            || field.electricTerrain && this.ability.name === \"Surge Surfer\") {\n            speed *= 2;\n        }\n\n        switch (this.item.name) {\n            case \"Choice Scarf\":\n                speed = trunc(speed * 3 / 2);\n                break;\n            case \"Quick Powder\":\n                if (this.name === \"Ditto\") speed *= 2;\n                break;\n            default:\n                if (this.item.isHeavy()) speed = trunc(speed / 2);\n        }\n\n        if (this.status && this.ability.name === \"Quick Feet\") {\n            speed = trunc(speed * 3 / 2);\n        } else if (this.isParalyzed()) {\n            speed = trunc(speed / 4);\n        }\n\n        if (this.ability.name === \"Slow Start\" && this.slowStart) {\n            speed = trunc(speed / 2);\n        }\n\n        if (this.unburden && this.item.name === \"(No Item)\"\n            && this.ability.name === \"Unburden\") {\n            speed *= 2;\n        }\n\n        if (this.tailwind) {\n            speed *= 2;\n        }\n\n        return speed;\n    }\n\n    baseStat(s) {\n        return baseStats(this.id, this.gen)[s];\n    }\n\n    get currentHp() {\n        return this._currentHp;\n    }\n\n    set currentHp(newHp) {\n        this._currentHp = newHp;\n        this._currentHpRange = new Multiset([newHp]);\n        this._currentHpRangeBerry = new Multiset();\n    }\n\n    get currentHpRange() {\n        return this._currentHpRange;\n    }\n\n    set currentHpRange(newHpRange) {\n        this._currentHpRange = new Multiset(newHpRange);\n        this._currentHp = avg(newHpRange.union(this.currentHpRangeBerry), 0);\n    }\n\n    get currentHpRangeBerry() {\n        return this._currentHpRangeBerry;\n    }\n\n    set currentHpRangeBerry(newHpRange) {\n        this._currentHpRangeBerry = new Multiset(newHpRange);\n        this._currentHp = avg(newHpRange.union(this.currentHpRange), 0);\n    }\n\n    type1() {\n        if (this.overrideTypes[0] > -1) {\n            return this.overrideTypes[0];\n        }\n        return pokeType1(this.id, this.gen);\n    }\n\n    type2() {\n        if (this.overrideTypes[1] > -1) {\n            return this.overrideTypes[1];\n        }\n        return pokeType2(this.id, this.gen);\n    }\n\n    types() {\n        return [\n            this.type1(),\n            this.type2(),\n            this.addedType\n        ].filter(type => type !== Types.CURSE);\n    }\n\n    stab(type) {\n        return this.types().includes(type);\n    }\n\n    weight() {\n        // given in 10 kg\n        let w = weight(this.id);\n        if (this.autotomize) {\n            w = max(1, w - 1000);\n        }\n        if (this.ability.name === \"Light Metal\") {\n            w = max(1, w / 2);\n        } else if (this.ability.name === \"Heavy Metal\") {\n            w *= 2;\n        }\n        if (this.item.name === \"Float Stone\") {\n            w = max(1, w / 2);\n        }\n        return roundHalfToZero(w);\n    }\n\n    hasEvolution() {\n        return Boolean(evolutions(this.id, this.gen).length);\n    }\n\n    hasPreEvolution() {\n        return Boolean(preEvolution(this.id, this.gen));\n    }\n\n    isMega() {\n        return this.name.startsWith(\"Mega \");\n    }\n\n    ability1() {\n        return new Ability({\n            id: ability1(this.id, this.gen),\n            gen: this.gen\n        });\n    }\n\n    ability2() {\n        return new Ability({\n            id: ability2(this.id, this.gen),\n            gen: this.gen\n        });\n    }\n\n    ability3() {\n        return new Ability({\n            id: ability3(this.id, this.gen),\n            gen: this.gen\n        });\n    }\n\n    holdingRequiredItem() {\n        const item = new Item({\n            id: requiredItemForPoke(this.id),\n            gen: this.gen\n        });\n        return item.name === this.item.name;\n    }\n\n    hurtBySandstorm() {\n        return !this.ability.isSandImmunity()\n            && this.item.name !== \"Safety Goggles\"\n            && !this.stab(Types.GROUND)\n            && !this.stab(Types.ROCK)\n            && !this.stab(Types.STEEL);\n    }\n\n    hurtByHail() {\n        return !this.ability.isHailImmunity()\n            && this.item.name !== \"Safety Goggles\"\n            && !this.stab(Types.ICE);\n    }\n\n    multiscaleIsActive() {\n        return !this.brokenMultiscale\n            && this.currentHp === this.stat(Stats.HP)\n            && (this.ability.name === \"Multiscale\"\n                || this.ability.name === \"Shadow Shield\");\n    }\n\n    isPoisoned() {\n        return this.status === Statuses.POISONED;\n    }\n\n    isBadlyPoisoned() {\n        return this.status === Statuses.BADLY_POISONED;\n    }\n\n    isBurned() {\n        return this.status === Statuses.BURNED;\n    }\n\n    isParalyzed() {\n        return this.status === Statuses.PARALYZED;\n    }\n\n    isAsleep() {\n        return this.status === Statuses.ASLEEP\n            || this.ability.name === \"Comatose\";\n    }\n\n    isFrozen() {\n        return this.status === Statuses.FROZEN;\n    }\n\n    isMale() {\n        return this.gender === Genders.MALE;\n    }\n\n    isFemale() {\n        return this.gender === Genders.FEMALE;\n    }\n\n    hasPlate() {\n        return this.item.nonDisabledName().endsWith(\" Plate\");\n    }\n\n    hasDrive() {\n        return this.item.nonDisabledName().endsWith(\" Drive\");\n    }\n\n    knockOff() {\n        if (this.gen < Gens.B2W2) {\n            return this.item.nonDisabledName() !== \"(No Item)\"\n                && this.ability.name !== \"Sticky Hold\"\n                && this.ability.name !== \"Multitype\"\n                && !(this.item.nonDisabledName() === \"Griseous Orb\"\n                    && this.name.includes(\"Giratina\"));\n        }\n        return this.knockOffBoost() && this.ability.name !== \"Sticky Hold\";\n    }\n\n    knockOffBoost() {\n        return this.item.nonDisabledName() !== \"(No Item)\"\n            && !this.item.megaPoke()\n            && !(this.item.nonDisabledName() === \"Griseous Orb\"\n                && this.name.includes(\"Giratina\"))\n            && !(this.name.includes(\"Genesect\") && this.hasDrive())\n            && !(this.ability.name === \"Multitype\" && this.hasPlate())\n            && !(this.name.includes(\"Kyogre\")\n                && this.item.nonDisabledName() === \"Blue Orb\")\n            && !(this.name.includes(\"Groudon\")\n                && this.item.nonDisabledName() === \"Red Orb\");\n    }\n\n    thickClubBoosted() {\n        return this.item.name === \"Thick Club\"\n            && (this.name.includes(\"Cubone\") || this.name.includes(\"Marowak\"));\n    }\n\n    lightBallBoosted() {\n        return this.item.name === \"Light Ball\" && this.name.includes(\"Pikachu\");\n    }\n\n    isUseful() {\n        return isPokeUseful(this.id);\n    }\n\n    hasCritArmor() {\n        return this.ability.hasCritArmor() || this.luckyChant;\n    }\n\n    pinchAbilityActivated(moveType) {\n        return this.ability.pinchType() === moveType\n            && this.stat(Stats.HP) >= this.currentHp * 3;\n    }\n\n    static calcHealthDv(ivs) {\n        return calcHealthDv(ivs);\n    }\n\n}\n\nconst hiddenPowerRegex = /Hidden Power( \\[?(\\w*)]?)?/i;\n\nfunction parseMove(move, poke, nextMove) {\n    const match = hiddenPowerRegex.exec(move);\n    if (match) {\n        poke.moves[nextMove].name = \"Hidden Power\";\n        const type = typeId(match[2]);\n        if (type !== Move.hiddenPowerType(poke.ivs, poke.gen)) {\n            poke.ivs = Move.hiddenPowers(type, poke.gen)[0];\n        }\n    } else {\n        poke.moves[nextMove].name = move;\n    }\n}\n\nconst statMatches = {\n    HP: 0,\n    Atk: 1,\n    Def: 2,\n    SAtk: 3,\n    SpAtk: 3,\n    SpA: 3,\n    Spc: 3,\n    SDef: 4,\n    SpDef: 4,\n    SpD: 4,\n    Spd: 5,\n    Spe: 5\n};\n\nfunction parseEv(ev) {\n    const value = parseInt(ev, 10);\n    const stat = statMatches[ev.split(\" \")[1]];\n    if (stat === undefined || Number.isNaN(value) || value < 0 || value > 255) {\n        throw new ImportableEvError(ev);\n    }\n    return [stat, value];\n}\n\nfunction parseIv(iv, gen) {\n    const max = gen >= Gens.ADV ? 31 : 15;\n    const value = parseInt(iv, 10);\n    const stat = statMatches[iv.split(\" \")[1]];\n    if (stat === undefined || Number.isNaN(value) || value < 0 || value > max) {\n        throw new ImportableIvError(iv);\n    }\n    return [stat, value];\n}\n\nfunction noMoveLast(move1, move2) {\n    return (move1.name === \"(No Move)\") - (move2.name === \"(No Move)\");\n}\n\nfunction calcHealthDv(ivs) {\n    return ((ivs[Stats.ATK] & 1) << 3)\n        | ((ivs[Stats.DEF] & 1) << 2)\n        | ((ivs[Stats.SPD] & 1) << 1)\n        | (ivs[Stats.SPC] & 1);\n}\n\nfunction printIv(stat, iv, ivs, gen) {\n    if (gen >= Gens.ADV) {\n        return iv < 31 ? `${iv} ${statNames[stat]}` : null;\n    }\n\n    if (stat === Stats.HP) {\n        iv = calcHealthDv(ivs);\n    } else if (stat === Stats.SDEF) {\n        if (gen < Gens.GSC) return null;\n        iv = ivs[Stats.SPC];\n    }\n\n    if (iv >= 15) return null;\n\n    return gen < Gens.GSC && stat === Stats.SPC\n        ? `${iv} Spc` : `${iv} ${statNames[stat]}`;\n}\n\nfunction printEv(stat, ev, evs, gen) {\n    if (gen >= Gens.ADV) {\n        return ev > 0 ? `${ev} ${statNames[stat]}` : null;\n    }\n\n    if (stat === Stats.SDEF) {\n        if (gen < Gens.GSC) return null;\n        ev = evs[Stats.SPC];\n    }\n\n    if (ev >= 252) return null;\n\n    return gen < Gens.GSC && stat === Stats.SPC\n        ? `${ev} Spc` : `${ev} ${statNames[stat]}`;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Pokemon.js","const {abs, round, sign, trunc} = Math;\n\nexport const maxGen = 7;\n\nexport const Gens = {\n    RBY: 1,\n    GSC: 2,\n    ADV: 3,\n    HGSS: 4,\n    B2W2: 5,\n    ORAS: 6,\n    SM: 7\n};\n\nexport const Stats = {\n    HP: 0,\n    ATK: 1,\n    DEF: 2,\n    SATK: 3,\n    SDEF: 4,\n    SPD: 5,\n    ACC: 6,\n    EVA: 7,\n    SPC: 3\n};\n\nexport const Genders = {\n    NO_GENDER: 0,\n    MALE: 1,\n    FEMALE: 2\n};\n\nexport const DamageClasses = {\n    OTHER: 0,\n    PHYSICAL: 1,\n    SPECIAL: 2\n};\n\nexport const Statuses = {\n    NO_STATUS: 0,\n    POISONED: 1,\n    BADLY_POISONED: 2,\n    BURNED: 3,\n    PARALYZED: 4,\n    ASLEEP: 5,\n    FROZEN: 6\n};\n\nexport const Types = {\n    NORMAL: 0,\n    FIGHTING: 1,\n    FLYING: 2,\n    POISON: 3,\n    GROUND: 4,\n    ROCK: 5,\n    BUG: 6,\n    GHOST: 7,\n    STEEL: 8,\n    FIRE: 9,\n    WATER: 10,\n    GRASS: 11,\n    ELECTRIC: 12,\n    PSYCHIC: 13,\n    ICE: 14,\n    DRAGON: 15,\n    DARK: 16,\n    FAIRY: 17,\n    CURSE: 18\n};\n\nexport const Weathers = {\n    CLEAR: 0,\n    SUN: 4,\n    RAIN: 2,\n    SAND: 3,\n    HAIL: 1,\n    HARSH_SUN: 6,\n    HEAVY_RAIN: 5,\n    STRONG_WINDS: 7\n};\n\nexport function cmpStrs(num1, num2) {\n    if (num1.length !== num2.length) { // simple case\n        return num1.length - num2.length;\n    }\n    for (let i = 0; i < num1.length; i++) { // check digits LtR\n        if (num1.charCodeAt(i) !== num2.charCodeAt(i)) {\n            return num1.charCodeAt(i) - num2.charCodeAt(i);\n        }\n    }\n    return 0;\n}\n\nexport function addStrs(num1, num2) {\n    let carry = 0;\n    let sum = \"\";\n    if (num1.length < num2.length) {\n        num1 = \"0\".repeat(num2.length - num1.length) + num1;\n    }\n    if (num2.length < num1.length) {\n        num2 = \"0\".repeat(num1.length - num2.length) + num2;\n    }\n    for (let i = num1.length - 1; i >= 0; i--) { // proceed RtL\n        // (char1 - 48) + (char2 - 48) + carry\n        const s = num1.charCodeAt(i) + num2.charCodeAt(i) + carry - 96;\n        carry = s > 9 ? 1 : 0;\n        sum = (s % 10) + sum; // not += as we find the digits RtL\n    }\n    return carry ? carry + sum : sum;\n}\n\nexport function subtractStrs(num1, num2) {\n    let borrow = 0;\n    let diff = \"\";\n    if (num2.length < num1.length) {\n        num2 = \"0\".repeat(num1.length - num2.length) + num2;\n    }\n    for (let i = num1.length - 1; i >= 0; i--) {\n        // (char1 - 48) - (char2 - 48) - borrow\n        const d = num1.charCodeAt(i) - num2.charCodeAt(i) - borrow;\n        borrow = d < 0 ? 1 : 0;\n        diff = (d < 0 ? d + 10 : d) + diff;\n    }\n    let i = 0;\n    while (diff.charAt(i) === \"0\") i++;\n    return diff.substring(i) || \"0\";\n}\n\nexport function multiplyStrs(num1, num2) {\n    if (num1 === \"0\" || num2 === \"0\") {\n        return \"0\";\n    }\n    // standard looking RtL division\n    let zeros = \"\";\n    let carry = 0;\n    let digits = \"\";\n    let product = \"0\";\n    for (let i = num1.length - 1; i >= 0; i--) {\n        for (let j = num2.length - 1; j >= 0; j--) {\n            const p = (num1.charCodeAt(i) - 48)\n                * (num2.charCodeAt(j) - 48)\n                + carry;\n            carry = trunc(p / 10);\n            digits = p % 10 + digits; // append digit to the left\n        }\n        product = addStrs((carry || \"\") + digits + zeros, product);\n        zeros += \"0\";\n        digits = \"\";\n        carry = 0;\n    }\n    return product;\n}\n\nexport function divideStrs(num1, num2) {\n    // long division based algorithm\n    if (num2 === \"0\") {\n        return [num1 === \"0\" ? \"NaN\" : \"Infinity\", \"NaN\"];\n    }\n    if (cmpStrs(num1, num2) < 0) {\n        return [\"0\", num1];\n    }\n    // we start our r a digit short as the iteration lends\n    // itself more naturally to append the digit at its head\n    let quotient = \"\";\n    let r = num1.substr(0, num2.length - 1);\n    for (let i = num2.length - 1; i < num1.length; i++) {\n        // bring down the next digit\n        if (r === \"0\") {\n            r = num1.charAt(i);\n        } else {\n            r += num1.charAt(i);\n        }\n        let q = 0;\n        while (cmpStrs(r, num2) >= 0) {\n            r = subtractStrs(r, num2);\n            q++; // count how many times b is subtracted (\"goes into\")\n        }\n        // append digit right, skip trailing-left zeros\n        if (q || quotient) {\n            quotient += q;\n        }\n    }\n    // we safeguarded left zeros already\n    return [quotient, r]; // [quotient, remainder]\n}\n\nexport function gcdStrs(num1, num2) {\n    let a = num1;\n    let b = num2;\n    while (b !== \"0\") {\n        [a, b] = [b, divideStrs(a, b)[1]];\n    }\n    return a;\n}\n\nexport function avg(multiSet, digits = 4) {\n    const size = multiSet.size;\n    if (size === \"0\") return NaN;\n\n    const weightedSum = multiSet.reduce(\n        (sum, v, w) => addStrs(sum, multiplyStrs(String(v), w)), \"0\");\n    if (weightedSum === \"0\") return 0;\n\n    const exp = 10 ** (digits + 1);\n    const [quotient] = divideStrs(multiplyStrs(weightedSum, String(exp)), size);\n    return round(Number(quotient) / 10) * 10 / exp;\n}\n\nexport function isGenValid(gen) {\n    return gen === trunc(gen) && Gens.RBY <= gen && gen <= maxGen;\n}\n\nexport function roundHalfToZero(n) {\n    return trunc(n) + sign(n) * (abs(n - trunc(n)) > 0.5);\n}\n\nexport function chainMod(modifier1, modifier2) {\n    return (modifier1 * modifier2 + 0x800) >> 12;\n}\n\nexport function applyMod(modifier, value) {\n    if (Array.isArray(value)) {\n        return value.map(v => roundHalfToZero(v * modifier / 0x1000));\n    }\n    return roundHalfToZero(value * modifier / 0x1000);\n}\n\nexport function damageVariation(baseDamage, min, max) {\n    const damages = [];\n    for (let i = min; i <= max; i++) {\n        damages.push(trunc(baseDamage * i / max));\n    }\n    return damages;\n}\n\nexport function needsScaling(...stats) {\n    return stats.some(stat => stat > 255);\n}\n\nexport function scaleStat(stat, bits = 2) {\n    return (stat >> bits) & 0xFF;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/utilities.js","import {Stats, Types} from \"../utilities\";\n\nconst {trunc, max} = Math;\n\nexport default function smEndOfTurn(attacker, defender, field) {\n    const values = [];\n    const messages = [];\n    const hp = defender.stat(Stats.HP);\n\n    if (field.sand() && defender.hurtBySandstorm()) {\n        values.push(-max(1, trunc(hp / 16)));\n        messages.push(\"Sandstorm\");\n    } else if (field.hail() && defender.hurtByHail()) {\n        values.push(-max(1, trunc(hp / 16)));\n        messages.push(\"Hail\");\n    }\n\n    if (defender.ability.name === \"Dry Skin\") {\n        if (field.sun()) {\n            values.push(-max(1, trunc(hp / 8)));\n            messages.push(\"Dry Skin\");\n        } else if (field.rain()) {\n            values.push(max(1, trunc(hp / 8)));\n            messages.push(\"Dry Skin\");\n        }\n    } else if (field.rain() && defender.ability.name === \"Rain Dish\") {\n        values.push(max(1, trunc(hp / 16)));\n        messages.push(\"Rain Dish\");\n    } else if (field.hail() && defender.ability.name === \"Ice Body\") {\n        values.push(max(1, trunc(hp / 16)));\n        messages.push(\"Ice Body\");\n    }\n    // fire pledge + grass pledge damage\n    if (defender.item.name === \"Leftovers\") {\n        values.push(max(1, trunc(hp / 16)));\n        messages.push(\"Leftovers\");\n    } else if (defender.item.name === \"Black Sludge\") {\n        if (defender.stab(Types.POISON)) {\n            values.push(max(1, trunc(hp / 16)));\n        } else {\n            values.push(-max(1, trunc(hp / 16)));\n        }\n        messages.push(\"Black Sludge\");\n    }\n    // aqua ring\n    // ingrain\n    // leech seed\n    if (defender.ability.nonDisabledName() === \"Heatproof\"\n        && defender.isBurned()) {\n        values.push(-max(1, trunc(hp / 32)));\n        messages.push(\"Burn\");\n    } else if (defender.isBurned()) {\n        values.push(-max(1, trunc(hp / 16)));\n        messages.push(\"Burn\");\n    } else if (defender.isPoisoned()) {\n        values.push(-max(1, trunc(hp / 8)));\n        messages.push(\"Poison\");\n    } else if (defender.isBadlyPoisoned()) {\n        values.push(\"toxic\");\n        messages.push(\"Toxic\");\n    }\n    // nightmare\n    // curse\n    // multi turns -- whirlpool, flame wheel, etc\n    if (defender.isAsleep() && attacker.ability.name === \"Bad Dreams\") {\n        values.push(-max(1, trunc(hp / 8)));\n        messages.push(\"Bad Dreams\");\n    }\n    if (defender.item.name === \"Sticky Barb\") {\n        values.push(-max(1, trunc(hp / 8)));\n        messages.push(\"Sticky Barb\");\n    }\n\n    if (defender.ability.name === \"Magic Guard\") {\n        for (let i = 1; i < values.length; i++) {\n            if (values[i] < 0) {\n                values.splice(i, 1);\n                messages.splice(i, 1);\n            }\n        }\n    }\n\n    return {\n        values,\n        messages\n    };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/endOfTurn/smEndOfTurn.js","/**\n * The base implementation of `_.clamp` which doesn't coerce arguments.\n *\n * @private\n * @param {number} number The number to clamp.\n * @param {number} [lower] The lower bound.\n * @param {number} upper The upper bound.\n * @returns {number} Returns the clamped number.\n */\nfunction baseClamp(number, lower, upper) {\n  if (number === number) {\n    if (upper !== undefined) {\n      number = number <= upper ? number : upper;\n    }\n    if (lower !== undefined) {\n      number = number >= lower ? number : lower;\n    }\n  }\n  return number;\n}\n\nmodule.exports = baseClamp;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_baseClamp.js\n// module id = 108\n// module chunks = 6","/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nmodule.exports = isObject;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/isObject.js\n// module id = 11\n// module chunks = 6","/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nmodule.exports = freeGlobal;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_freeGlobal.js\n// module id = 116\n// module chunks = 6","var Symbol = require('./_Symbol');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nmodule.exports = getRawTag;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_getRawTag.js\n// module id = 118\n// module chunks = 6","import {Gens, Types, maxGen} from \"./utilities\";\nimport {\n    abilityEffects, abilityName, abilityId,\n    isIgnoredByMoldBreaker, isAbilityUseful\n} from \"./info\";\n\nconst sandImmunityAbilities = new Set([\n    \"Magic Guard\",\n    \"Overcoat\",\n    \"Sand Veil\",\n    \"Sand Rush\",\n    \"Sand Force\"\n]);\n\nconst hailImmunityAbilities = new Set([\n    \"Magic Guard\",\n    \"Overcoat\",\n    \"Ice Body\",\n    \"Snow Cloak\",\n    \"Slush Rush\"\n]);\n\nexport default class Ability {\n\n    constructor(ability = {}, gen) {\n        if (typeof ability === \"string\") {\n            this.name = ability;\n            ability = {};\n        } else if (ability.name) {\n            this.name = ability.name;\n        } else {\n            this.id = Number(ability.id) || 0;\n        }\n\n        this.gen = Number(gen) || Number(ability.gen) || maxGen;\n        this.disabled = Boolean(ability.disabled);\n    }\n\n    get name() {\n        return abilityName(this.disabled ? 0 : this.id);\n    }\n\n    set name(abilityName) {\n        this.id = abilityId(abilityName);\n    }\n\n    nonDisabledName() {\n        return abilityName(this.id);\n    }\n\n    pinchType() {\n        const v = this.disabled ? null : flagToValue(this.id, \"7\", this.gen);\n        return v === null ? -1 : Number(v);\n    }\n\n    normalToType() {\n        const v = this.disabled ? null : flagToValue(this.id, \"121\", this.gen);\n        return v === null ? -1 : Number(v);\n    }\n\n    immunityType() {\n        if (this.disabled) return -1;\n\n        // water absorb, volt absorb, etc.\n        let v = flagToValue(this.id, \"70\", this.gen);\n        if (v !== null) return Number(v);\n\n        // storm drain, lightning rod, etc.\n        v = flagToValue(this.id, \"38\", this.gen);\n        if (v !== null && this.gen >= Gens.B2W2) return Number(v);\n\n        // sap sipper, etc.\n        v = flagToValue(this.id, \"68\", this.gen);\n        if (v !== null) return Number(v);\n\n        if (hasFlag(this.id, \"120\", this.gen)) return Types.GROUND;\n        if (hasFlag(this.id, \"41\", this.gen)) return Types.ELECTRIC;\n        if (hasFlag(this.id, \"19\", this.gen)) return Types.FIRE;\n        if (hasFlag(this.id, \"15\", this.gen)) return Types.WATER;\n\n        return -1;\n    }\n\n    ignoresAbilities() {\n        return !this.disabled && hasFlag(this.id, \"40\", this.gen);\n    }\n\n    isIgnorable() {\n        return isIgnoredByMoldBreaker(this.id);\n    }\n\n    isSandImmunity() {\n        return sandImmunityAbilities.has(this.name);\n    }\n\n    isHailImmunity() {\n        return hailImmunityAbilities.has(this.name);\n    }\n\n    reducesSuperEffective() {\n        return this.name === \"Filter\"\n            || this.name === \"Solid Rock\"\n            || this.name === \"Prism Armor\";\n    }\n\n    hasCritArmor() {\n        return this.name === \"Shell Armor\" || this.name === \"Battle Armor\";\n    }\n\n    isUseful() {\n        return isAbilityUseful(this.id);\n    }\n\n}\n\nfunction flagToValue(id, flag, gen) {\n    const effects = abilityEffects(id, gen);\n\n    if (effects !== undefined) {\n        for (const effect of effects.split(\"|\")) {\n            const [flagId, value] = effect.split(\"-\");\n            if (flagId === flag) {\n                return value;\n            }\n        }\n    }\n\n    return null;\n}\n\nfunction hasFlag(id, flag, gen) {\n    const effects = abilityEffects(id, gen);\n\n    if (effects !== undefined) {\n        for (const effect of effects.split(\"|\")) {\n            if (effect.startsWith(flag)) {\n                return true;\n            }\n        }\n    }\n\n    return false;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Ability.js","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nmodule.exports = objectToString;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_objectToString.js\n// module id = 121\n// module chunks = 6","import {Weathers, maxGen} from \"./utilities\";\n\nexport default class Field {\n\n    constructor(field = {}) {\n        this.gen = Number(field.gen) || maxGen;\n        this.multiBattle = Boolean(field.multiBattle);\n        this.invertedBattle = Boolean(field.invertedBattle);\n\n        this.weather = Number(field.weather) || Weathers.CLEAR;\n        this.airLock = Boolean(field.airLock);\n\n        this.waterSport = Boolean(field.waterSport);\n        this.mudSport = Boolean(field.mudSport);\n\n        this.magicRoom = Boolean(field.magicRoom);\n        this.wonderRoom = Boolean(field.wonderRoom);\n        this.gravity = Boolean(field.gravity); // a gravity field if you will\n\n        this.grassyTerrain = Boolean(field.grassyTerrain);\n        this.mistyTerrain = Boolean(field.mistyTerrain);\n        this.electricTerrain = Boolean(field.electricTerrain);\n        this.psychicTerrain = Boolean(field.psychicTerrain);\n\n        this.fairyAura = Boolean(field.fairyAura);\n        this.darkAura = Boolean(field.darkAura);\n        this.auraBreak = Boolean(field.auraBreak);\n\n        this.ionDeluge = Boolean(field.ionDeluge);\n    }\n\n    effectiveWeather() {\n        return this.airLock ? Weathers.CLEAR : this.weather;\n    }\n\n    isClearWeather() {\n        return this.effectiveWeather() === Weathers.CLEAR;\n    }\n\n    rain() {\n        return [\n            Weathers.RAIN,\n            Weathers.HEAVY_RAIN\n        ].includes(this.effectiveWeather());\n    }\n\n    sun() {\n        return [\n            Weathers.SUN,\n            Weathers.HARSH_SUN\n        ].includes(this.effectiveWeather());\n    }\n\n    sand() {\n        return this.effectiveWeather() === Weathers.SAND;\n    }\n\n    hail() {\n        return this.effectiveWeather() === Weathers.HAIL;\n    }\n\n    heavyRain() {\n        return this.effectiveWeather() === Weathers.HEAVY_RAIN;\n    }\n\n    harshSun() {\n        return this.effectiveWeather() === Weathers.HARSH_SUN;\n    }\n\n    strongWinds() {\n        return this.effectiveWeather() === Weathers.STRONG_WINDS;\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Field.js","var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\nmodule.exports = isSymbol;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/isSymbol.js\n// module id = 130\n// module chunks = 6","var isObject = require('./isObject'),\n    isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = toNumber;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/toNumber.js\n// module id = 131\n// module chunks = 6","import {Gens, Types, maxGen} from \"./utilities\";\n\nimport {\n    itemId, itemName, naturalGiftPower, naturalGiftType,\n    flingPower, isItemUseful, itemEffects\n} from \"./info\";\n\nconst {trunc} = Math;\n\nconst heavyItems = new Set([\n    \"Iron Ball\",\n    \"Macho Brace\",\n    \"Power Bracer\",\n    \"Power Belt\",\n    \"Power Lens\",\n    \"Power Band\",\n    \"Power Anklet\",\n    \"Power Weight\"\n]);\n\nexport default class Item {\n\n    constructor(item = {}, gen) {\n        if (typeof item === \"string\") {\n            this.name = item;\n            item = {};\n        } else if (item.name) {\n            this.name = item.name;\n        } else {\n            this.id = Number(item.id) || 0;\n        }\n\n        this.gen = Number(gen) || Number(item.gen) || maxGen;\n        this.used = Boolean(item.used);\n        this.disabled = Boolean(item.disabled);\n    }\n\n    get name() {\n        return itemName(this.used || this.disabled ? 0 : this.id);\n    }\n\n    set name(itemName) {\n        this.id = itemId(itemName);\n    }\n\n    nonDisabledName() {\n        return itemName(this.used ? 0 : this.id);\n    }\n\n    boostedType() {\n        const v = this.used || this.disabled\n            ? null : flagToValue(this.id, \"10\", this.gen);\n        return v === null ? -1 : Number(v);\n    }\n\n    isBerry() {\n        return !this.used && this.id >= 8000;\n    }\n\n    isPlate() {\n        return this.nonDisabledName().endsWith(\" Plate\");\n    }\n\n    berryTypeResist() {\n        if (this.used || this.disabled) return -1;\n\n        let v = flagToValue(this.id, \"4\", this.gen);\n        if (v !== null) return Number(v);\n\n        v = flagToValue(this.id, \"5\", this.gen);\n        if (v) return Types.NORMAL;\n\n        return -1;\n    }\n\n    naturalGiftPower() {\n        return naturalGiftPower(\n            this.used || this.disabled ? 0 : this.id, this.gen);\n    }\n\n    naturalGiftType() {\n        return naturalGiftType(\n            this.used || this.disabled ? 0 : this.id);\n    }\n\n    flingPower() {\n        return flingPower(this.used || this.disabled ? 0 : this.id);\n    }\n\n    gemType() {\n        const v = this.used || this.disabled\n            ? null : flagToValue(this.id, \"37\", this.gen);\n        return v === null ? -1 : Number(v);\n    }\n\n    megaPokeNum() {\n        const v = this.megaPoke();\n        return v === null ? null : Number(v.split(\":\")[0]);\n    }\n\n    megaPokeForm() {\n        const v = this.megaPoke();\n        return v === null ? null : Number(v.split(\":\")[1]);\n    }\n\n    megaPoke() {\n        return this.used ? null : flagToValue(this.id, \"66\", this.gen);\n    }\n\n    plateType() {\n        return this.isPlate() ? this.boostedType() : -1;\n    }\n\n    isHeavy() {\n        return heavyItems.has(this.nonDisabledName());\n    }\n\n    isUseful() {\n        return isItemUseful(this.id);\n    }\n\n    memoryType() {\n        return Number(flagToValue(this.id, \"68\", this.gen)) || Types.NORMAL;\n    }\n\n    berryHeal(hp) {\n        switch (this.name) {\n            case \"Sitrus Berry\":\n                return this.gen >= Gens.HGSS ? trunc(hp / 4) : 30;\n            case \"Oran Berry\":\n            case \"Berry\":\n                return 10;\n            case \"Figy Berry\":\n            case \"Wiki Berry\":\n            case \"Mago Berry\":\n            case \"Aguav Berry\":\n            case \"Iapapa Berry\":\n                return trunc(hp / 8);\n            case \"Gold Berry\":\n                return 30;\n            default:\n                return 0;\n        }\n    }\n\n}\n\nfunction flagToValue(id, flag, gen) {\n    const effects = itemEffects(id, gen);\n\n    if (effects !== undefined) {\n        for (const effect of effects.split(\"|\")) {\n            const [flagId, value] = effect.split(\"-\");\n            if (flagId === flag) {\n                return value || true;\n            }\n        }\n    }\n\n    return null;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Item.js","export class MissingnoError extends Error {\n    constructor() {\n        super(\"Pokemon cannot be Missingno\");\n        this.name = \"MissingnoError\";\n    }\n}\n\nexport class NoMoveError extends Error {\n    constructor() {\n        super(\"Move cannot be (No Move)\");\n        this.name = \"NoMoveError\";\n    }\n}\n\n/* Importable Errors */\n\nexport class ImportableEvError extends Error {\n    constructor(ev) {\n        super(`${ev} is not a valid EV`);\n        this.name = \"ImportableEvError\";\n    }\n}\n\nexport class ImportableIvError extends Error {\n    constructor(iv) {\n        super(`${iv} is not a valid IV`);\n        this.name = \"ImportableIvError\";\n    }\n}\n\nexport class ImportableLevelError extends Error {\n    constructor(level) {\n        super(`${level} is not a valid level`);\n        this.name = \"ImportableLevelError\";\n    }\n}\n\nexport class ImportableLineError extends Error {\n    constructor(line) {\n        super(`${line} is not a valid importable line`);\n        this.name = \"ImportableLineError\";\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/errors.js","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = 163\n// module chunks = 6","import Pokemon from \"./Pokemon\";\nimport Move from \"./Move\";\nimport Field from \"./Field\";\nimport Multiset from \"./Multiset\";\nimport {Gens, Stats, Types, addStrs, divideStrs} from \"./utilities\";\nimport {\n    isPhysicalType, natureMultiplier,\n    typeName, effectiveness\n} from \"./info\";\nimport {MissingnoError, NoMoveError} from \"./errors\";\n\nimport calculate from \"./calculate\";\nimport endOfTurn from \"./endOfTurn\";\n\n// eslint-disable-next-line no-duplicate-imports\nimport * as info from \"./info\";\n\nconst {max, min, round, trunc} = Math;\n\nexport {default as Multiset} from \"./Multiset\";\nexport {default as Pokemon} from \"./Pokemon\";\nexport {default as Ability} from \"./Ability\";\nexport {default as Item} from \"./Item\";\nexport {default as Move} from \"./Move\";\nexport {default as Field} from \"./Field\";\nexport * from \"./errors\";\nexport * from \"./utilities\";\nexport {info};\nexport const VERSION = process.libVersion;\n\nexport default function sulcalc(attacker, defender, move, field) {\n    attacker = new Pokemon(attacker, field.gen);\n    defender = new Pokemon(defender, field.gen);\n    move = new Move(move, field.gen);\n    field = new Field(field);\n\n    const reportPokes = [];\n    const reportDamage = [];\n    const reportResult = [];\n\n    if (attacker.name === \"Missingno\" || defender.name === \"Missingno\") {\n        throw new MissingnoError();\n    }\n\n    if (move.name === \"(No Move)\") {\n        throw new NoMoveError();\n    }\n\n    if (field.magicRoom || attacker.ability.name === \"Klutz\") {\n        attacker.item.disabled = true;\n    }\n    if (field.magicRoom || defender.ability.name === \"Klutz\") {\n        defender.item.disabled = true;\n    }\n\n    if (attacker.ability.name === \"Air Lock\"\n        || defender.ability.name === \"Air Lock\") {\n        field.airLock = true;\n    }\n\n    const effects = endOfTurn(attacker, defender, field);\n    effects.messages.unshift(\"\");\n    effects.values.unshift(0);\n\n    if ((attacker.ability.ignoresAbilities() || move.ignoresAbilities())\n        && defender.ability.isIgnorable()) {\n        defender.ability.disabled = false;\n    }\n\n    if (defender.hasCritArmor() || !move.canCrit()) {\n        move.critical = false;\n    } else if (attacker.ability.name === \"Merciless\"\n               && (defender.isPoisoned() || defender.isBadlyPoisoned())) {\n        move.critical = true;\n    }\n\n    const dmg = calculate(attacker, defender, move, field);\n\n    attacker.item.disabled = false;\n    attacker.item.used = false;\n    defender.item.disabled = false;\n    defender.item.used = false;\n    defender.ability.disabled = false;\n\n    const maxHp = defender.stat(Stats.HP);\n\n    const minPercent = round(dmg[0].min() / maxHp * 1000) / 10;\n    const maxPercent = round(dmg[0].max() / maxHp * 1000) / 10;\n\n    let initDmg = defender.currentHpRange.map(v => max(0, maxHp - v));\n    let initDmgBerry = defender.currentHpRangeBerry.map(v => max(0, maxHp - v));\n\n    let moveType, movePower;\n    if (move.name === \"Hidden Power\") {\n        moveType = Move.hiddenPowerType(attacker.ivs, field.gen);\n        movePower = Move.hiddenPowerBp(attacker.ivs, field.gen);\n    } else if (move.name === \"Weather Ball\") {\n        moveType = Move.weatherBall(field.effectiveWeather());\n        // gen 3 multiplies damage, not BP\n        movePower = field.gen >= Gens.HGSS && moveType ? 100 : 50;\n    } else if (move.zMove) {\n        moveType = move.type();\n        movePower = move.power();\n    } else {\n        moveType = move.type();\n        movePower = null; // we'll say null means non-var BP\n    }\n\n    let a, d;\n    if (move.isPsyshockLike()) {\n        a = Stats.SATK;\n        d = Stats.DEF;\n    } else if (field.gen >= Gens.HGSS && move.isPhysical()\n        || field.gen < Gens.HGSS && isPhysicalType(moveType)) {\n        a = Stats.ATK;\n        d = Stats.DEF;\n    } else {\n        a = Stats.SATK;\n        d = Stats.SDEF;\n    }\n\n    if (attacker.boosts[a]) {\n        reportPokes.push(\n            (attacker.boosts[a] > 0 ? \"+\" : \"\") + attacker.boosts[a]);\n    }\n\n    if (field.gen >= Gens.ADV || attacker.evs[a] < 252) {\n        const mult = field.gen >= Gens.ADV\n            ? natureMultiplier(attacker.nature, a) : 0;\n        if (mult) {\n            reportPokes.push(attacker.evs[a] + (mult > 0 ? \"+\" : \"-\"));\n        } else {\n            reportPokes.push(attacker.evs[a]);\n        }\n        reportPokes.push(a === Stats.ATK ? \"Atk\" : \"SpA\");\n    }\n\n    if (field.gen >= Gens.GSC && attacker.item.name !== \"(No Item)\"\n        && !attacker.holdingRequiredItem()) {\n        reportPokes.push(attacker.item.name);\n    }\n\n    if (field.gen >= Gens.ADV && attacker.ability.name !== \"(No Ability)\") {\n        reportPokes.push(attacker.ability.name);\n    }\n\n    if (attacker.isBurned()) {\n        reportPokes.push(\"burned\");\n    }\n\n    reportPokes.push(attacker.name);\n\n    if (move.critical) {\n        reportPokes.push(\"critical hit\");\n    }\n\n    if (attacker.helpingHand) {\n        reportPokes.push(\"Helping Hand\");\n    }\n\n    reportPokes.push(move.name);\n\n    if (move.name === \"Hidden Power\" && field.gen >= Gens.ORAS) {\n        reportPokes.push(`(${typeName(moveType)})`);\n    } else if (move.name === \"Hidden Power\") {\n        reportPokes.push(`(${typeName(moveType)} ${movePower} BP)`);\n    } else if (move.hitsMultipleTimes() && move.numberOfHits >= 1\n        && move.name !== \"Beat Up\") {\n        reportPokes.push(`[${move.numberOfHits} hits]`);\n    } else if (move.zMove) {\n        reportPokes.push(`(${movePower} BP)`);\n    }\n\n    reportPokes.push(\"vs.\");\n\n    if (defender.boosts[d]) {\n        reportPokes.push(\n            (defender.boosts[d] > 0 ? \"+\" : \"\") + defender.boosts[d]);\n    }\n\n    if (field.gen >= Gens.ADV\n        || defender.evs[d] < 252\n        || defender.evs[Stats.HP] < 252) {\n        reportPokes.push(defender.evs[Stats.HP], \"HP/\");\n        const mult = field.gen >= Gens.ADV\n            ? natureMultiplier(defender.nature, d) : 0;\n        if (mult) {\n            reportPokes.push(defender.evs[d] + (mult > 0 ? \"+\" : \"-\"));\n        } else {\n            reportPokes.push(defender.evs[d]);\n        }\n        reportPokes.push(d === Stats.DEF ? \"Def\" : \"SpD\");\n    }\n\n    if (field.gen >= Gens.GSC && defender.item.name !== \"(No Item)\"\n        && !defender.holdingRequiredItem()) {\n        reportPokes.push(defender.item.name);\n    }\n\n    if (field.gen >= Gens.ADV && defender.ability.name !== \"(No Ability)\") {\n        reportPokes.push(defender.ability.name);\n    }\n\n    reportPokes.push(defender.name);\n\n    if (defender.currentHp < 100) {\n        reportPokes.push(` at ${defender.currentHp}%`);\n    }\n\n    if (defender.reflect && d === Stats.DEF) {\n        reportPokes.push(\"behind Reflect\");\n    } else if (defender.lightScreen && d === Stats.SDEF) {\n        reportPokes.push(\"behind Light Screen\");\n    }\n\n    const weatherMessages = [\n        \"\",\n        \" in Hail\",\n        \" in Rain\",\n        \" in Sand\",\n        \" in Sun\",\n        \" in Heavy Rain\",\n        \" in Harsh Sun\",\n        \" in Strong Winds\"\n    ];\n\n    reportDamage.push(\n        weatherMessages[field.weather],\n        `${dmg[0].min()} - ${dmg[0].max()}`,\n        `(${minPercent} - ${maxPercent}%)`\n    );\n\n    // Remove field hazards from current HP for probability calculation\n    if (defender.ability.name !== \"Magic Guard\") {\n        let hazardsDmg = 0;\n        if (defender.stealthRock) {\n            const {num, den} = effectiveness(Types.ROCK, defender.types(),\n                                             {gen: field.gen});\n            hazardsDmg += trunc(maxHp * num / (den * 8));\n        }\n        if (defender.spikes > 0) {\n            hazardsDmg += trunc(maxHp / (10 - 2 * defender.spikes));\n        }\n        initDmg = initDmg.map(v => min(maxHp, v + hazardsDmg));\n        initDmgBerry = initDmgBerry.map(v => min(maxHp, v + hazardsDmg));\n    }\n\n    const chances = chanceToKo(defender, dmg, {\n        initDmgRange: initDmg,\n        initDmgRangeBerry: initDmgBerry,\n        effects: effects.values,\n        rechargeTurns: Number(move.requiresRecharge()),\n        toxicCounter: defender.toxicCounter\n    });\n\n    effects.messages = effects.messages.slice(1);\n    effects.values = effects.values.slice(1);\n\n    const displayChances = [];\n    for (let i = 0; i < chances.roundedChances.length; i++) {\n        const nhko = `${i ? i + 1 : \"O\"}HKO`;\n        const fractionalChance = chances.fractionalChances[i];\n        if (fractionalChance[0] === fractionalChance[1]) {\n            if (displayChances.length === 0) {\n                displayChances.push(`guaranteed ${nhko}`);\n            }\n            break;\n        } else if (fractionalChance[0] !== \"0\") {\n            const c = round(chances.roundedChances[i] * 1000) / 10;\n            if (c === 100) {\n                displayChances.push(`almost guaranteed ${nhko}`);\n            } else if (c === 0) {\n                displayChances.push(`negligible chance to ${nhko}`);\n            } else {\n                displayChances.push(`${c}% chance to ${nhko}`);\n            }\n        }\n    }\n\n    if (displayChances.length > 0) {\n        reportResult.push(displayChances.join(\", \"));\n        if (effects.messages.length > 0) {\n            reportResult.push(\"after\", effects.messages.join(\", \"));\n        }\n    } else {\n        reportResult.push(\"this might take a while...\");\n    }\n\n    const pokeInfo = reportPokes.join(\" \");\n    const damageInfo = reportDamage.join(\" \");\n    const resultInfo = reportResult.join(\" \");\n\n    return {\n        report: `${pokeInfo}: ${damageInfo} -- ${resultInfo}`,\n        attacker,\n        defender,\n        minPercent,\n        maxPercent,\n        damages: dmg.slice(0, dmg.length - 1),\n        damage: dmg[0],\n        remainingHealth: chances.remainingHealth,\n        remainingHealthBerry: chances.remainingHealthBerry,\n        effectValues: effects.values,\n        effectMessages: effects.messages,\n        fractionalChances: chances.fractionalChances,\n        roundedChances: chances.roundedChances,\n        toString() {\n            return this.report;\n        }\n    };\n}\n\nfunction berryDamageMap(v) {\n    for (let e = 0; e < this.effects.length && v < this.totalHp; e++) {\n        if (this.effects[e] === \"toxic\") {\n            // limit to at most enough to KO\n            v += trunc((this.toxicCounter + 1) * this.totalHp / 16);\n        } else {\n            // limit to at most enough to KO, at least enough to fully heal\n            v = max(0, v - this.effects[e]);\n        }\n    }\n    return min(this.totalHp, v);\n}\n\nfunction damageMap(v, w, set, skip) {\n    let berryUsed = false;\n    for (let e = 0; e < this.effects.length && v < this.totalHp; e++) {\n        if (this.effects[e] === \"toxic\") {\n            // limit to at most enough to KO\n            v += trunc((this.toxicCounter + 1) * this.totalHp / 16);\n        } else {\n            // limit to at most enough to KO, at least enough to fully heal\n            v = max(0, v - this.effects[e]);\n        }\n        if (!berryUsed && this.berryHeal > 0\n            && v < this.totalHp && 2 * v >= this.totalHp) {\n            /* berry can be whatever amount for sitrus, oran, etc.\n             * gen 3, 4, 5, & 6: apply at 1/2 or below\n             * I've personally confirmed that for gens 3, 4, & 5 it\n             * activates above 1/3, so I'm assuming it activates at <= 50%\n             * tested with Emerald, Heart Gold, and White\n             * tl;dr bulba lies, it was never 1/3\n             */\n            v = max(0, v - this.berryHeal);\n            berryUsed = true;\n        }\n    }\n    v = min(this.totalHp, v);\n    // berry might not be the last effect added, so do this at the end\n    if (berryUsed) {\n        this.berryDmg.add(v, w); // separate berry modified value into berryDmg\n        skip();\n    }\n    return v;\n}\n\nfunction chanceToKo(poke, damageRanges, params) {\n    const chances = [];\n    const totalHp = poke.stat(Stats.HP);\n    const berryHeal = poke.item.berryHeal(totalHp);\n    const maxTurns = params.maxTurns || 9;\n    const rechargeTurns = params.rechargeTurns || 0;\n    const effects = params.effects || [0];\n\n    let dmg = new Multiset(params.initDmgRange || [0]);\n    let berryDmg = new Multiset(params.initDmgRangeBerry);\n    let toxicCounter = params.toxicCounter || 0;\n\n    let remainingHealth, remainingHealthBerry;\n\n    const hasFainted = value => value >= totalHp;\n    const damageToHealth = value => totalHp - value;\n\n    for (let turn = 0, i = 0; turn < maxTurns; turn++, i++) {\n        if (typeof damageRanges[i] === \"number\") {\n            if (damageRanges[i] === 0) break;\n            i += damageRanges[i];\n        }\n\n        dmg = dmg.permute(damageRanges[i]).simplify();\n        berryDmg = berryDmg.permute(damageRanges[i]).simplify();\n\n        for (let j = 0; j <= rechargeTurns; j++) {\n            /* because effects always has a 0 value passed in the first index,\n             * berry check runs right after damage is applied, as well as after\n             * every added effect. Separating damages with berries applied\n             * prevents extra applications.\n             */\n            // berries go first to prevent double effect application\n            berryDmg = berryDmg.map(berryDamageMap, {\n                effects,\n                toxicCounter,\n                totalHp\n            });\n\n            dmg = dmg.map(damageMap, {\n                effects,\n                toxicCounter,\n                totalHp,\n                berryHeal,\n                berryDmg\n            });\n\n            toxicCounter++;\n        }\n\n        chances.push([\n            addStrs(dmg.count(hasFainted), berryDmg.count(hasFainted)),\n            addStrs(dmg.size, berryDmg.size)\n        ]);\n\n        if (!turn) {\n            remainingHealth = dmg.map(damageToHealth);\n            remainingHealthBerry = berryDmg.map(damageToHealth);\n        }\n\n        if (chances[chances.length - 1][0] === chances[chances.length - 1][1]) {\n            break;\n        }\n    }\n\n    return {\n        fractionalChances: chances,\n        roundedChances: chances.map(([num, den]) => {\n            if (num === \"0\") return 0;\n            return Number(divideStrs(num + \"000000\", den)[0]) / 1000000;\n        }),\n        remainingHealth,\n        remainingHealthBerry\n    };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/sulcalc.js","var root = require('./_root');\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nmodule.exports = Symbol;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_Symbol.js\n// module id = 20\n// module chunks = 6","var Symbol = require('./_Symbol'),\n    getRawTag = require('./_getRawTag'),\n    objectToString = require('./_objectToString');\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nmodule.exports = baseGetTag;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_baseGetTag.js\n// module id = 21\n// module chunks = 6","var freeGlobal = require('./_freeGlobal');\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nmodule.exports = root;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_root.js\n// module id = 22\n// module chunks = 6","/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nmodule.exports = isObjectLike;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/isObjectLike.js\n// module id = 25\n// module chunks = 6","import {Gens, Types, DamageClasses} from \"./utilities\";\nimport * as db from \"./db\";\n\nconst {trunc} = Math;\n\nif (process.env.NODE_ENV !== \"production\") {\n    (function deepFreeze(obj) {\n        for (const key in obj) {\n            if (obj.hasOwnProperty(key) && obj[key]\n                && typeof obj[key] === \"object\") {\n                deepFreeze(obj[key]);\n            }\n        }\n        return Object.freeze(obj);\n    })(db);\n}\n\nconst altPokeNames = {\n    \"681:0\": \"Aegislash-Shield\",\n    \"669:0\": \"Flabebe\",\n    \"678:0\": \"Meowstic-M\",\n    \"460:1\": \"Abomasnow-Mega\",\n    \"359:1\": \"Absol-Mega\",\n    \"142:1\": \"Aerodactyl-Mega\",\n    \"306:1\": \"Aggron-Mega\",\n    \"65:1\":  \"Alakazam-Mega\",\n    \"334:1\": \"Altaria-Mega\",\n    \"181:1\": \"Ampharos-Mega\",\n    \"531:1\": \"Audino-Mega\",\n    \"354:1\": \"Banette-Mega\",\n    \"15:1\":  \"Beedrill-Mega\",\n    \"9:1\":   \"Blastoise-Mega\",\n    \"257:1\": \"Blaziken-Mega\",\n    \"323:1\": \"Camerupt-Mega\",\n    \"6:1\":   \"Charizard-Mega-X\",\n    \"6:2\":   \"Charizard-Mega-Y\",\n    \"719:1\": \"Diancie-Mega\",\n    \"475:1\": \"Gallade-Mega\",\n    \"445:1\": \"Garchomp-Mega\",\n    \"282:1\": \"Gardevoir-Mega\",\n    \"94:1\":  \"Gengar-Mega\",\n    \"362:1\": \"Glalie-Mega\",\n    \"130:1\": \"Gyarados-Mega\",\n    \"214:1\": \"Heracross-Mega\",\n    \"229:1\": \"Houndoom-Mega\",\n    \"115:1\": \"Kangaskhan-Mega\",\n    \"380:1\": \"Latias-Mega\",\n    \"381:1\": \"Latios-Mega\",\n    \"428:1\": \"Lopunny-Mega\",\n    \"448:1\": \"Lucario-Mega\",\n    \"310:1\": \"Manectric-Mega\",\n    \"303:1\": \"Mawile-Mega\",\n    \"308:1\": \"Medicham-Mega\",\n    \"376:1\": \"Metagross-Mega\",\n    \"150:1\": \"Mewtwo-Mega-X\",\n    \"150:2\": \"Mewtwo-Mega-Y\",\n    \"18:1\":  \"Pidgeot-Mega\",\n    \"127:1\": \"Pinsir-Mega\",\n    \"384:1\": \"Rayquaza-Mega\",\n    \"302:1\": \"Sableye-Mega\",\n    \"373:1\": \"Salamence-Mega\",\n    \"254:1\": \"Sceptile-Mega\",\n    \"212:1\": \"Scizor-Mega\",\n    \"319:1\": \"Sharpedo-Mega\",\n    \"80:1\":  \"Slowbro-Mega\",\n    \"208:1\": \"Steelix-Mega\",\n    \"260:1\": \"Swampert-Mega\",\n    \"248:1\": \"Tyranitar-Mega\",\n    \"3:1\":   \"Venusaur-Mega\",\n    \"383:1\": \"Groudon-Primal\",\n    \"382:1\": \"Kyogre-Primal\"\n};\n\nconst requiredItems = {\n    // Don't exclude plates & orbs as those affect damage\n    // Genesect\n    \"649:1\":  \"Douse Drive\",\n    \"649:2\":  \"Shock Drive\",\n    \"649:3\":  \"Burn Drive\",\n    \"649:4\":  \"Chill Drive\",\n    // Megas\n    \"460:1\":  \"Abomasite\",\n    \"359:1\":  \"Absolite\",\n    \"142:1\":  \"Aerodactylite\",\n    \"306:1\":  \"Aggronite\",\n    \"65:1\":   \"Alakazite\",\n    \"334:1\":  \"Altarianite\",\n    \"181:1\":  \"Ampharosite\",\n    \"531:1\":  \"Audinite\",\n    \"354:1\":  \"Banettite\",\n    \"15:1\":   \"Beedrillite\",\n    \"9:1\":    \"Blastoisinite\",\n    \"257:1\":  \"Blazikenite\",\n    \"323:1\":  \"Cameruptite\",\n    \"6:1\":    \"Charizardite X\",\n    \"6:2\":    \"Charizardite Y\",\n    \"719:1\":  \"Diancite\",\n    \"475:1\":  \"Galladite\",\n    \"445:1\":  \"Garchompite\",\n    \"282:1\":  \"Gardevoirite\",\n    \"94:1\":   \"Gengarite\",\n    \"362:1\":  \"Glalitite\",\n    \"130:1\":  \"Gyaradosite\",\n    \"214:1\":  \"Heracronite\",\n    \"229:1\":  \"Houndoominite\",\n    \"115:1\":  \"Kangaskhanite\",\n    \"380:1\":  \"Latiasite\",\n    \"381:1\":  \"Latiosite\",\n    \"428:1\":  \"Lopunnity\",\n    \"448:1\":  \"Lucarionite\",\n    \"310:1\":  \"Manectite\",\n    \"303:1\":  \"Mawilite\",\n    \"308:1\":  \"Medichamite\",\n    \"376:1\":  \"Metagrossite\",\n    \"150:1\":  \"Mewtwonite X\",\n    \"150:2\":  \"Mewtwonite Y\",\n    \"18:1\":   \"Pidgeotite\",\n    \"127:1\":  \"Pinsirite\",\n    \"302:1\":  \"Sablenite\",\n    \"373:1\":  \"Salamencite\",\n    \"254:1\":  \"Sceptilite\",\n    \"212:1\":  \"Scizorite\",\n    \"319:1\":  \"Sharpedonite\",\n    \"80:1\":   \"Slowbronite\",\n    \"208:1\":  \"Steelixite\",\n    \"260:1\":  \"Swampertite\",\n    \"248:1\":  \"Tyranitarite\",\n    \"3:1\":    \"Venusaurite\",\n    // Primals\n    \"383:1\":  \"Red Orb\",\n    \"382:1\":  \"Blue Orb\",\n    // Silvally\n    \"773:1\":  \"Fighting Memory\",\n    \"773:2\":  \"Flying Memory\",\n    \"773:3\":  \"Poison Memory\",\n    \"773:4\":  \"Ground Memory\",\n    \"773:5\":  \"Rock Memory\",\n    \"773:6\":  \"Bug Memory\",\n    \"773:7\":  \"Ghost Memory\",\n    \"773:8\":  \"Steel Memory\",\n    \"773:9\":  \"Fire Memory\",\n    \"773:10\": \"Water Memory\",\n    \"773:11\": \"Grass Memory\",\n    \"773:12\": \"Electric Memory\",\n    \"773:13\": \"Psychic Memory\",\n    \"773:14\": \"Ice Memory\",\n    \"773:15\": \"Dragon Memory\",\n    \"773:16\": \"Dark Memory\",\n    \"773:17\": \"Fairy Memory\"\n};\n\nfunction getInfo(arr, key, gen, defaultValue) {\n    // search most to least recent\n    // stop at null or after the 0th index\n    while (gen >= Gens.RBY && arr[gen]) {\n        // best way to check since it might be falsy\n        if (arr[gen].hasOwnProperty(key)) {\n            return arr[gen][key];\n        }\n        gen--;\n    }\n\n    return defaultValue;\n}\n\nfunction normalizeName(name) {\n    return name.trim()\n        .replace(/ {2,}/g, \" \")\n        .toLowerCase();\n}\n\nfunction nameToId(obj, name, defaultId) {\n    const normName = normalizeName(name);\n\n    for (const id in obj) {\n        if (normalizeName(obj[id]) === normName) {\n            return id;\n        }\n    }\n\n    return defaultId;\n}\n\nconst natureMultArr = [-1, 0, 1, 3, 4, 2];\nconst natureStatsArr = [1, 2, 5, 3, 4];\n\n/* Nature Information */\n\nexport function natureName(natureId) {\n    return db.natures.hasOwnProperty(natureId)\n        ? db.natures[natureId] : undefined;\n}\n\nexport function natureId(natureName) {\n    const name = nameToId(db.natures, natureName);\n    return name ? Number(name) : undefined;\n}\n\nexport function natures() {\n    const natures = [];\n    for (let i = 0; i < 25; i++) {\n        natures.push(i);\n    }\n    return natures;\n}\n\nexport function natureMultiplier(natureId, stat) {\n    return (trunc(natureId / 5) === natureMultArr[stat])\n        - (natureId % 5 === natureMultArr[stat]);\n}\n\nexport function natureStats(natureId) {\n    if (trunc(natureId / 5) !== natureId % 5) {\n        return [\n            natureStatsArr[trunc(natureId / 5)],\n            natureStatsArr[natureId % 5]\n        ];\n    }\n    return [-1, -1];\n}\n\n/* Pokemon Information */\n\nexport function pokemonName(pokeId) {\n    return db.pokemon.hasOwnProperty(pokeId)\n        ? db.pokemon[pokeId] : \"Missingno\";\n}\n\nexport function pokemonId(pokeName) {\n    return nameToId(db.pokemon, pokeName)\n        || nameToId(altPokeNames, pokeName)\n        || \"0:0\";\n}\n\nexport function isPokeUseful(pokeId) {\n    return pokemonName(pokeId) !== \"Missingno\";\n}\n\nexport function isPokeReleased(pokeId, gen) {\n    return db.releasedPokes[gen].hasOwnProperty(pokeId);\n}\n\nexport function releasedPokes(gen) {\n    return Object.keys(db.releasedPokes[gen]).filter(id => id !== \"0:0\");\n}\n\nexport function pokeType1(pokeId, gen) {\n    let type = getInfo(db.pokeTypes1, pokeId, gen);\n    if (type !== undefined) return type;\n\n    type = getInfo(db.pokeTypes1, pokeId.split(\":\", 1) + \":0\", gen);\n    if (type !== undefined) return type;\n\n    return 18;\n}\n\nexport function pokeType2(pokeId, gen) {\n    let type = getInfo(db.pokeTypes2, pokeId, gen);\n    if (type !== undefined) return type;\n\n    type = getInfo(db.pokeTypes2, pokeId.split(\":\", 1) + \":0\", gen);\n    if (type !== undefined) return type;\n\n    return 18;\n}\n\nexport function baseStats(pokeId, gen) {\n    return getInfo(db.baseStats, pokeId, gen)\n        || getInfo(db.baseStats, pokeId.split(\":\", 1) + \":0\", gen);\n}\n\nexport function evolutions(pokeId, gen) {\n    const species = pokeId.split(\":\")[0];\n\n    if (pokemonName(pokeId) === \"Floette-Eternal\"\n        || !db.evolutions.hasOwnProperty(species)) {\n        return [];\n    }\n\n    const evolutions = db.evolutions[species];\n    return evolutions.filter(p => isPokeReleased(p + \":0\", gen));\n}\n\nexport function preEvolution(pokeId, gen) {\n    const species = Number(pokeId.split(\":\")[0]);\n    for (const e in db.evolutions) {\n        if (db.evolutions[e].includes(species)\n            && isPokeReleased(e + \":0\", gen)) {\n            return e + \":0\";\n        }\n    }\n    return undefined;\n}\n\nexport function weight(pokeId) {\n    if (db.weights.hasOwnProperty(pokeId)) return db.weights[pokeId];\n\n    const baseForm = pokeId.split(\":\", 1) + \":0\";\n    if (db.weights.hasOwnProperty(baseForm)) return db.weights[baseForm];\n\n    return undefined;\n}\n\nexport function requiredItemForPoke(pokeId) {\n    return requiredItems.hasOwnProperty(pokeId) ? itemId(requiredItems[pokeId])\n                                                : 0;\n}\n\n/* Move Information */\n\nexport function moveName(moveId) {\n    return db.moves.hasOwnProperty(moveId) ? db.moves[moveId] : \"(No Move)\";\n}\n\nexport function moveId(moveName) {\n    return Number(nameToId(db.moves, moveName, 0));\n}\n\nexport function isMoveUseful(moveId, gen) {\n    return moveName(moveId) !== \"(No Move)\" && movePower(moveId, gen) > 0;\n}\n\nexport function isMoveReleased(moveId, gen) {\n    return db.releasedMoves[gen].hasOwnProperty(moveId);\n}\n\nexport function releasedMoves(gen) {\n    return Object.keys(db.releasedMoves[gen]).map(Number);\n}\n\nexport function movePower(moveId, gen) {\n    return getInfo(db.movePowers, moveId, gen, 0);\n}\n\nexport function moveType(moveId, gen) {\n    return getInfo(db.moveTypes, moveId, gen, 0);\n}\n\nexport function moveDamageClass(moveId, gen) {\n    return getInfo(db.moveDamageClasses, moveId, gen, 0);\n}\n\nexport function minHits(moveId, gen) {\n    return getInfo(db.minMaxHits, moveId, gen, 0x11) & 0xF;\n}\n\nexport function maxHits(moveId, gen) {\n    return (getInfo(db.minMaxHits, moveId, gen, 0x11) & 0xF0) >> 4;\n}\n\nexport function moveRange(moveId, gen) {\n    return getInfo(db.moveRanges, moveId, gen);\n}\n\nexport function recoil(moveId, gen) {\n    return getInfo(db.recoils, moveId, gen, 0);\n}\n\nexport function moveHasFlags(moveId, flags, gen) {\n    return Boolean(getInfo(db.moveFlags, moveId, gen) & flags);\n}\n\nexport function flinchChance(moveId, gen) {\n    return getInfo(db.flinchChances, moveId, gen, 0);\n}\n\nexport function moveCategory(moveId, gen) {\n    return getInfo(db.moveCategories, moveId, gen);\n}\n\nexport function statBoosts(moveId, gen) {\n    return getInfo(db.statBoosts, moveId, gen, []);\n}\n\nexport function naturalGiftType(itemId) {\n    return db.naturalGiftTypes.hasOwnProperty(itemId - 8000)\n        ? db.naturalGiftTypes[itemId - 8000] : -1;\n}\n\nexport function naturalGiftPower(itemId, gen) {\n    return db.naturalGiftPowers.hasOwnProperty(itemId - 8000)\n        ? db.naturalGiftPowers[itemId - 8000] + 20 * (gen >= Gens.ORAS) : 0;\n}\n\nexport function flingPower(itemId) {\n    return itemId && db.items.hasOwnProperty(itemId)\n        ? db.flingPowers[itemId] || 10 : 0;\n}\n\nexport function zMovePower(moveId) {\n    return db.zMovePower.hasOwnProperty(moveId) ? db.zMovePower[moveId] : 0;\n}\n\n/* Item Information */\n\nexport function itemName(itemId) {\n    return db.items[itemId] || \"(No Item)\";\n}\n\nexport function itemId(itemName) {\n    return Number(nameToId(db.items, itemName)) || 0;\n}\n\nexport function isItemUseful(itemId) {\n    return db.usefulItems.hasOwnProperty(itemId)\n        && itemName(itemId) !== \"(No Item)\"\n        && itemName(itemId) !== \"(No Berry)\";\n}\n\nexport function isItemReleased(itemId, gen) {\n    return db.releasedItems[gen].hasOwnProperty(itemId);\n}\n\nexport function releasedItems(gen) {\n    return Object.keys(db.releasedItems[gen]).map(Number);\n}\n\nexport function itemEffects(itemId, gen) {\n    return getInfo(db.itemEffects, itemId, gen);\n}\n\nexport function zCrystalType(itemId) {\n    return db.zCrystalType.hasOwnProperty(itemId)\n        ? db.zCrystalType[itemId] : -1;\n}\n\n/* Ability Information */\n\nexport function abilityName(abilityId) {\n    return db.abilities[abilityId] || \"(No Ability)\";\n}\n\nexport function abilityId(abilityName) {\n    return Number(nameToId(db.abilities, abilityName, 0));\n}\n\nexport function isAbilityUseful(abilityId) {\n    return abilityName(abilityId) !== \"(No Ability)\";\n}\n\nexport function isAbilityReleased(abilityId, gen) {\n    return Number(abilityId) <= [NaN, NaN, NaN, 76, 123, 164, 191][gen];\n}\n\nexport function releasedAbilities(gen) {\n    return Object.keys(db.releasedItems[gen]).map(Number);\n}\n\nexport function abilityEffects(abilityId, gen) {\n    return getInfo(db.abilityEffects, abilityId, gen);\n}\n\nexport function isIgnoredByMoldBreaker(abilityId) {\n    return db.moldBreaker.hasOwnProperty(abilityId);\n}\n\nexport function ability1(pokeId, gen) {\n    return getInfo(db.abilities1, pokeId, gen)\n        || getInfo(db.abilities1, pokeId.split(\":\", 1) + \":0\", gen)\n        || 0;\n}\n\nexport function ability2(pokeId, gen) {\n    return getInfo(db.abilities2, pokeId, gen)\n        || getInfo(db.abilities2, pokeId.split(\":\", 1) + \":0\", gen)\n        || 0;\n}\n\nexport function ability3(pokeId, gen) {\n    return getInfo(db.abilities3, pokeId, gen)\n        || getInfo(db.abilities3, pokeId.split(\":\", 1) + \":0\", gen)\n        || 0;\n}\n\n/* Type Information */\n\nexport function typeName(typeId) {\n    return db.types.hasOwnProperty(typeId) ? db.types[typeId] : undefined;\n}\n\nexport function typeId(typeName) {\n    return Number(nameToId(db.types, typeName)) || undefined;\n}\n\nexport function types(gen) {\n    let types = [];\n    for (let i = 0; i <= 18; i++) {\n        types.push(i);\n    }\n    if (gen < Gens.GSC) {\n        types = types.filter(type => type !== 8 && type !== 16);\n    }\n    if (gen < Gens.ORAS) {\n        types = types.filter(type => type !== 17);\n    }\n    return types;\n}\n\nexport function typeDamageClass(typeId) {\n    return typeId >= 9 && typeId <= 17 ? 2 : 1;\n}\n\nexport function isPhysicalType(typeId) {\n    return typeDamageClass(typeId) === DamageClasses.PHYSICAL;\n}\n\nexport function isSpecialType(typeId) {\n    return typeDamageClass(typeId) === DamageClasses.SPECIAL;\n}\n\nexport function isLustrousType(typeId) {\n    return typeId === Types.WATER || typeId === Types.DRAGON;\n}\n\nexport function isAdamantType(typeId) {\n    return typeId === Types.STEEL || typeId === Types.DRAGON;\n}\n\nexport function isGriseousType(typeId) {\n    return typeId === Types.GHOST || typeId === Types.DRAGON;\n}\n\nexport function isSoulDewType(typeId) {\n    return typeId === Types.PSYCHIC || typeId === Types.DRAGON;\n}\n\nexport function isSandForceType(typeId) {\n    return typeId === Types.GROUND\n        || typeId === Types.ROCK\n        || typeId === Types.STEEL;\n}\n\nexport function effectiveness(attackingTypes, defendingTypes, options = {}) {\n    if (!Array.isArray(attackingTypes)) {\n        attackingTypes = [attackingTypes];\n    }\n    if (!Array.isArray(defendingTypes)) {\n        attackingTypes = [defendingTypes];\n    }\n\n    let effectiveness = 1;\n\n    for (const dType of defendingTypes) {\n        if (options.freezeDry && dType === Types.WATER) {\n            // 2x for each attacking type and one more 2x\n            // since freeze-dry is always 2x effective on water\n            effectiveness *= 2 * 2 ** attackingTypes.length;\n        } else {\n            for (const aType of attackingTypes) {\n                effectiveness *= typeEffectiveness(aType, dType, options);\n            }\n        }\n    }\n\n    return {\n        num: effectiveness,\n        den: 2 ** (attackingTypes.length * defendingTypes.length)\n    };\n}\n\nfunction typeEffectiveness(aType, dType, options = {}) {\n    const e = getInfo(db.typesTables, aType, options.gen)[dType];\n\n    if (options.inverted) {\n        if (e < 2) return 4;\n        if (e > 2) return 1;\n        return 2;\n    }\n\n    if (aType <= 1 && dType === Types.GHOST\n        && (options.foresight || options.scrappy)) {\n        return 2;\n    } else if (aType === Types.GROUND && dType === Types.FLYING\n               && options.gravity) {\n        return 2;\n    }\n\n    return e;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/info.js","import clamp from \"lodash/clamp\";\n\nimport {Gens, DamageClasses, Stats, Types, Weathers, maxGen} from \"./utilities\";\n\nimport {\n    moveId, moveName, movePower, moveDamageClass, moveType, moveCategory,\n    recoil, flinchChance, moveHasFlags, statBoosts, minHits, maxHits,\n    moveRange, isMoveUseful, zMovePower\n} from \"./info\";\n\nconst {min, trunc} = Math;\n\nconst zMoves = new Set([\n    \"Breakneck Blitz\",\n    \"All-Out Pummeling\",\n    \"Supersonic Skystrike\",\n    \"Acid Downpour\",\n    \"Tectonic Rage\",\n    \"Continental Crush\",\n    \"Savage Spin-Out\",\n    \"Never-Ending Nightmare\",\n    \"Corkscrew Crash\",\n    \"Inferno Overdrive\",\n    \"Hydro Vortex\",\n    \"Bloom Doom\",\n    \"Gigavolt Havoc\",\n    \"Shattered Psyche\",\n    \"Subzero Slammer\",\n    \"Devastating Drake\",\n    \"Black Hole Eclipse\",\n    \"Twinkle Tackle\"\n]);\n\nconst ohkoMoves = new Set([\n    \"Guillotine\",\n    \"Horn Drill\",\n    \"Fissure\",\n    \"Sheer Cold\"\n]);\n\nconst rechargeMoves = new Set([\n    \"Hyper Beam\",\n    \"Giga Impact\",\n    \"Rock Wrecker\",\n    \"Roar of Time\",\n    \"Blast Burn\",\n    \"Frenzy Plant\",\n    \"Hydro Cannon\"\n]);\n\nconst nonCritMoves = new Set([\n    \"Reversal\",\n    \"Flail\",\n    \"Future Sight\",\n    \"Doom Desire\",\n    \"Spit Up\"\n]);\n\nconst nonParentalBondMoves = new Set([\n    \"Fling\",\n    \"Self-Destruct\",\n    \"Explosion\",\n    \"Final Gambit\",\n    \"Endeavor\"\n]);\n\nexport default class Move {\n\n    constructor(move = {}, gen) {\n        if (typeof move === \"string\") {\n            this.name = move;\n            move = {};\n        } else if (move.id) {\n            this.id = Number(move.id);\n        } else if (move.name) {\n            this.name = move.name;\n        } else {\n            this.id = 0;\n        }\n\n        this.gen = Number(gen) || Number(move.gen) || maxGen;\n\n        this.critical = Boolean(move.critical);\n        this.zMove = Boolean(move.zMove);\n        this.numberOfHits = Number(move.numberOfHits) || 0;\n        this.beatUpHit = Number(move.beatUpHit) || 0;\n        this.secondHit = Boolean(move.secondHit);\n        this.meFirst = Boolean(move.meFirst);\n        this.furyCutter = Number(move.furyCutter) || 0;\n        this.echoedVoice = Number(move.echoedVoice) || 0;\n        this.trumpPP = Number(move.trumpPP) || 5;\n        this.roundBoost = Boolean(move.roundBoost);\n        this.minimize = Boolean(move.minimize);\n        this.dig = Boolean(move.dig);\n        this.dive = Boolean(move.dive);\n        this.fly = Boolean(move.fly);\n    }\n\n    get name() {\n        return this.zMove ? zMoves[this.type()] : moveName(this.id);\n    }\n\n    set name(moveName) {\n        this.id = moveId(moveName);\n    }\n\n    power() {\n        return this.zMove ? zMovePower(this.id) : movePower(this.id, this.gen);\n    }\n\n    type() {\n        return moveType(this.id, this.gen);\n    }\n\n    damageClass() {\n        return moveDamageClass(this.id, this.gen);\n    }\n\n    isPhysical() {\n        return this.damageClass() === DamageClasses.PHYSICAL;\n    }\n\n    isSpecial() {\n        return this.damageClass() === DamageClasses.SPECIAL;\n    }\n\n    isOther() {\n        return this.gen > Gens.ADV && this.damageClass() === DamageClasses.OTHER\n            || this.gen <= Gens.ADV && this.power() <= 0;\n    }\n\n    isPsyshockLike() {\n        return this.name === \"Psyshock\"\n            || this.name === \"Psystrike\"\n            || this.name === \"Secret Sword\";\n    }\n\n    hasRecoil() {\n        // negative is recoil, positive is recovery\n        return !(this.gen >= Gens.HGSS && this.name === \"Struggle\")\n            && recoil(this.id, this.gen) < 0;\n    }\n\n    flinchChance() {\n        return flinchChance(this.id, this.gen);\n    }\n\n    affectedBySheerForce() {\n        // OffensiveStatusInducingMove = 4\n        // OffensiveStatChangingMove = 6\n        // OffensiveSelfStatChangingMove = 7\n        // Only stat boosts are included, not drops\n        // Flinches are included\n        const category = moveCategory(this.id, this.gen);\n        return category === 4\n            || category === 6\n            || this.flinchChance() > 0\n            || (category === 7 && statBoosts(this.id, this.gen)[0] > 0);\n    }\n\n    isPunch() {\n        return moveHasFlags(this.id, 0x80, this.gen);\n    }\n\n    isContact() {\n        return moveHasFlags(this.id, 0x1, this.gen);\n    }\n\n    isSound() {\n        return moveHasFlags(this.id, 0x100, this.gen);\n    }\n\n    isPowder() {\n        return moveHasFlags(this.id, 0x8000, this.gen);\n    }\n\n    isBite() {\n        return moveHasFlags(this.id, 0x4000, this.gen);\n    }\n\n    isPulse() {\n        return moveHasFlags(this.id, 0x800, this.gen);\n    }\n\n    isBall() {\n        return moveHasFlags(this.id, 0x10000, this.gen);\n    }\n\n    minHits() {\n        return minHits(this.id, this.gen);\n    }\n\n    maxHits() {\n        return maxHits(this.id, this.gen);\n    }\n\n    hitsMultipleTimes() {\n        return this.maxHits > 1;\n    }\n\n    hasMultipleTargets() {\n        const range = moveRange(this.id, this.gen);\n        return range === 4 || range === 5;\n    }\n\n    isOhko() {\n        return ohkoMoves.has(this.name);\n    }\n\n    requiresRecharge() {\n        return rechargeMoves.has(this.name);\n    }\n\n    isRecklessBoosted() {\n        return this.hasRecoil()\n            || this.name === \"Jump Kick\"\n            || this.name === \"High Jump Kick\";\n    }\n\n    canCrit() {\n        return this.gen < Gens.GSC\n            || this.gen >= Gens.HGSS\n            || !nonCritMoves.has(this.name);\n    }\n\n    affectedByParentalBond() {\n        return !nonParentalBondMoves.has(this.name);\n    }\n\n    isUseful() {\n        return isMoveUseful(this.id, this.gen);\n    }\n\n    optimalHappiness() {\n        return this.name === \"Return\" ? 255 : 0;\n    }\n\n    usesHappiness() {\n        return this.name === \"Return\" || this.name === \"Frustration\";\n    }\n\n    ignoresAbilities() {\n        return this.name === \"Moongeist Beam\"\n            || this.name === \"Sunsteel Strike\";\n    }\n\n    ignoresDefenseBoosts() {\n        return this.name === \"Chip Away\"\n            || this.name === \"Sacred Sword\"\n            || this.name === \"Darkest Lariat\";\n    }\n\n    boostedByDig() {\n        return this.name === \"Earthquake\" || this.name === \"Magnitude\";\n    }\n\n    boostedByDive() {\n        return this.name === \"Surf\" || this.name === \"Whirlpool\";\n    }\n\n    boostedByFly() {\n        return this.name === \"Gust\" || this.name === \"Twister\";\n    }\n\n    boostedByMinimize() {\n        switch (this.name) {\n            case \"Stomp\":\n                return this.gen >= Gens.GSC;\n            case \"Astonish\":\n            case \"Extrasensory\":\n            case \"Needle Arm\":\n                return this.gen === Gens.ADV;\n            case \"Steamroller\":\n                return this.gen >= Gens.B2W2;\n            case \"Body Slam\":\n            case \"Dragon Rush\":\n            case \"Flying Press\":\n            case \"Shadow Force\":\n            case \"Phantom Force\":\n                return this.gen >= Gens.ORAS;\n            case \"Heavy Slam\":\n                return this.gen >= Gens.SM;\n            default:\n                return false;\n        }\n    }\n\n    static hiddenPowers(typeId, gen) {\n        if (gen < Gens.ADV) {\n            if (typeId < 1 || typeId > 16) {\n                return [];\n            }\n            const t = typeId - 1;\n            return [[\n                ((t & 4) << 1) | ((t & 1) << 2) | 3,\n                (t >> 2) | 12,\n                (t & 3) | 12,\n                15,\n                15,\n                15\n            ]];\n        }\n\n        const hiddenPowers = [];\n\n        // check if each possible hidden power matches the type\n        for (let i = 0; i < 64; i++) {\n            const ivs = [\n                (i & 1) ? 31 : 30, (i & 2) ? 31 : 30, (i & 4) ? 31 : 30,\n                (i & 8) ? 31 : 30, (i & 16) ? 31 : 30, (i & 32) ? 31 : 30\n            ];\n            if (typeId === Move.hiddenPowerType(ivs)) {\n                hiddenPowers.push(ivs);\n            }\n        }\n\n        return hiddenPowers.sort(ivsCmp);\n    }\n\n    static hiddenPowerBp(ivs, gen) {\n        // differs for gsc\n        if (gen < Gens.ADV) {\n            const bits = (ivs[Stats.SPC] >> 3)\n                | ((ivs[Stats.SPD] >> 2) & 2)\n                | ((ivs[Stats.DEF] >> 1) & 4)\n                | (ivs[Stats.ATK] & 8);\n            return 31 + trunc((5 * bits + (ivs[Stats.SPC] & 3)) / 2);\n        }\n\n        // just a weird formula involving the second bit of the pokemon's IVs\n        if (gen < Gens.ORAS) {\n            const bits = ((ivs[Stats.HP] & 2) >> 1)\n                | (ivs[Stats.ATK] & 2)\n                | ((ivs[Stats.DEF] & 2) << 1)\n                | ((ivs[Stats.SPD] & 2) << 2)\n                | ((ivs[Stats.SATK] & 2) << 3)\n                | ((ivs[Stats.SDEF] & 2) << 4);\n            return 30 + trunc(bits * 40 / 63);\n        }\n\n        // constant in oras\n        return 60;\n    }\n\n    static hiddenPowerType(ivs, gen) {\n        // Another weird formula involving the first bit (even/odd) of the\n        // pokemon's IVs. Also differs in gsc.\n        if (gen < Gens.ADV) {\n            return 1 + (((ivs[Stats.ATK] & 3) << 2) | (ivs[Stats.DEF] & 3));\n        }\n\n        const bits = (ivs[Stats.HP] & 1)\n            | ((ivs[Stats.ATK] & 1) << 1)\n            | ((ivs[Stats.DEF] & 1) << 2)\n            | ((ivs[Stats.SPD] & 1) << 3)\n            | ((ivs[Stats.SATK] & 1) << 4)\n            | ((ivs[Stats.SDEF] & 1) << 5);\n        return 1 + trunc(bits * 15 / 63);\n    }\n\n    static flail(currentHealth, totalHealth, gen) {\n        if (gen === Gens.HGSS) {\n            const p = trunc(64 * currentHealth / totalHealth);\n            if (p < 2) return 200;\n            if (p < 6) return 150;\n            if (p < 13) return 100;\n            if (p < 22) return 80;\n            if (p < 43) return 40;\n            return 20;\n        }\n\n        const p = trunc(48 * currentHealth / totalHealth);\n        if (p <= 1) return 200;\n        if (p <= 4) return 150;\n        if (p <= 9) return 100;\n        if (p <= 16) return 80;\n        if (p <= 32) return 40;\n        return 20;\n    }\n\n    static magnitude(magnitude) {\n        return [10, 30, 50, 70, 90, 110, 150][magnitude - 4];\n    }\n\n    static weatherBall(weather) {\n        if (weather === Weathers.SUN || weather === Weathers.HARSH_SUN) {\n            return Types.FIRE;\n        }\n        if (weather === Weathers.RAIN || weather === Weathers.HEAVY_RAIN) {\n            return Types.WATER;\n        }\n        if (weather === Weathers.SAND) {\n            return Types.ROCK;\n        }\n        if (weather === Weathers.HAIL) {\n            return Types.ICE;\n        }\n        return Types.NORMAL;\n    }\n\n    static trumpCard(ppLeft) {\n        return [200, 80, 60, 50, 40][clamp(ppLeft, 0, 4)];\n    }\n\n    static electroBall(attackerSpeed, defenderSpeed) {\n        const s = attackerSpeed / (defenderSpeed || 1);\n        if (s >= 4) return 150;\n        if (s >= 3) return 120;\n        if (s >= 2) return 80;\n        if (s >= 1) return 60;\n        return 40;\n    }\n\n    static gyroBall(attackerSpeed, defenderSpeed) {\n        return min(150, trunc(25 * defenderSpeed / (attackerSpeed || 1)));\n    }\n\n    static grassKnot(weight) {\n        // w in kg * 10\n        if (weight >= 2000) return 120;\n        if (weight >= 1000) return 100;\n        if (weight >= 500) return 80;\n        if (weight >= 250) return 60;\n        if (weight >= 100) return 40;\n        return 20;\n    }\n\n    static heavySlam(attackerWeight, defenderWeight) {\n        const w = trunc(attackerWeight / defenderWeight);\n        if (w >= 5) return 120;\n        if (w === 4) return 100;\n        if (w === 3) return 80;\n        if (w === 2) return 60;\n        return 40;\n    }\n\n    static punishment(boosts) {\n        let statBoostTotal = 0;\n        for (const boost of boosts.slice(1, 8)) {\n            if (boost > 0) {\n                statBoostTotal += boost;\n            }\n        }\n        return min(120, 60 + 20 * statBoostTotal);\n    }\n\n    static storedPower(boosts) {\n        let statBoostTotal = 0;\n        for (const boost of boosts.slice(1, 8)) {\n            if (boost > 0) {\n                statBoostTotal += boost;\n            }\n        }\n        return 20 + 20 * statBoostTotal;\n    }\n\n    static frustration(happiness) {\n        return trunc((255 - happiness) * 10 / 25) || 1;\n    }\n\n    static return(happiness) {\n        return trunc(happiness * 10 / 25) || 1;\n    }\n\n    static eruption(hp, totalHp) {\n        return trunc(150 * hp / totalHp) || 1;\n    }\n\n}\n\n// Determines how good IVs are in comparison to each other\n// Sort for ideal perfect IVs: Speed > SpA > HP > Def > SpD > Atk\nfunction ivsCmp(a, b) {\n    for (const s of [5, 3, 0, 2, 4, 1]) {\n        if (a[s] !== b[s]) return b[s] - a[s];\n    }\n    return 0;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Move.js","var baseClamp = require('./_baseClamp'),\n    toNumber = require('./toNumber');\n\n/**\n * Clamps `number` within the inclusive `lower` and `upper` bounds.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Number\n * @param {number} number The number to clamp.\n * @param {number} [lower] The lower bound.\n * @param {number} upper The upper bound.\n * @returns {number} Returns the clamped number.\n * @example\n *\n * _.clamp(-10, -5, 5);\n * // => -5\n *\n * _.clamp(10, -5, 5);\n * // => 5\n */\nfunction clamp(number, lower, upper) {\n  if (upper === undefined) {\n    upper = lower;\n    lower = undefined;\n  }\n  if (upper !== undefined) {\n    upper = toNumber(upper);\n    upper = upper === upper ? upper : 0;\n  }\n  if (lower !== undefined) {\n    lower = toNumber(lower);\n    lower = lower === lower ? lower : 0;\n  }\n  return baseClamp(toNumber(number), lower, upper);\n}\n\nmodule.exports = clamp;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/clamp.js\n// module id = 6\n// module chunks = 6","import clamp from \"lodash/clamp\";\n\nimport Multiset from \"../Multiset\";\nimport {Gens, Stats, multiplyStrs, divideStrs, cmpStrs} from \"../utilities\";\n\nimport rbyCalculate from \"./rbyCalculate\";\nimport gscCalculate from \"./gscCalculate\";\nimport advCalculate from \"./advCalculate\";\nimport hgssCalculate from \"./hgssCalculate\";\nimport b2w2Calculate from \"./b2w2Calculate\";\nimport orasCalculate from \"./orasCalculate\";\nimport smCalculate from \"./smCalculate\";\n\nconst {min} = Math;\n\nexport default function calculate(attacker, defender, move, field) {\n    const dmg = [];\n    if (move.name === \"(No Move)\") {\n        dmg.push(new Multiset([0]));\n        dmg.push(0);\n    } else if (move.name === \"Fury Cutter\") {\n        const tempCutter = move.furyCutter;\n        while (move.furyCutter <= 5) {\n            dmg.push(turnCalculate(attacker, defender, move, field));\n            move.furyCutter++;\n        }\n        dmg.push(-1); // look at the last damage range\n        move.furyCutter = tempCutter; // restore\n    } else if (move.name === \"Echoed Voice\") {\n        const tempVoice = move.echoedVoice;\n        while (move.echoedVoice <= 4) {\n            dmg.push(turnCalculate(attacker, defender, move, field));\n            move.echoedVoice++;\n        }\n        dmg.push(-1); // look at the last damage range\n        move.echoedVoice = tempVoice;\n    } else if (move.name === \"Trump Card\") {\n        const tempPP = move.trumpPP;\n        dmg.push(turnCalculate(attacker, defender, move, field));\n        while (move.trumpPP > 0) {\n            if (defender.ability.name === \"Pressure\") {\n                move.trumpPP -= min(2, move.trumpPP);\n            } else {\n                move.trumpPP--;\n            }\n            dmg.push(turnCalculate(attacker, defender, move, field));\n        }\n        dmg.push(0); // no more PP, no more damage ranges\n        move.trumpPP = tempPP;\n    } else if (move.name === \"Explosion\" || move.name === \"Self-Destruct\") {\n        dmg.push(turnCalculate(attacker, defender, move, field));\n        dmg.push(0); // ur dead\n    } else if (move.name === \"Rollout\" || move.name === \"Ice Ball\") {\n        const tempRollout = move.rollout;\n        // repeat 5 times, The formulas wrap around automatically\n        for (let i = 0; i < 5; i++) {\n            dmg.push(turnCalculate(attacker, defender, move, field));\n            move.rollout++;\n        }\n        dmg.push(-dmg.length);\n        move.rollout = tempRollout;\n    } else {\n        dmg.push(turnCalculate(attacker, defender, move, field));\n        // an item like a type-resist berry or a gem might get used\n        dmg.push(turnCalculate(attacker, defender, move, field));\n        dmg.push(-1); // only repeat the last roll\n    }\n    defender.brokenMultiscale = false; // reset multiscale\n    return dmg;\n}\n\nfunction turnCalculate(attacker, defender, move, field) {\n    let dmg;\n    if (move.name === \"Triple Kick\") {\n        dmg = new Multiset([0]);\n        for (let i = 1; i <= 3; i++) {\n            move.tripleKickCount = i; // Determine which turn it is.\n            dmg = dmg.permute(genCalculate(attacker, defender, move, field));\n            defender.brokenMultiscale = true;\n        }\n        move.tripleKickCount = 1; // Reset count for next calculation.\n    } else if (move.name === \"Beat Up\") {\n        dmg = new Multiset([0]);\n        for (let i = 0; i < attacker.beatUpStats.length; i++) {\n            move.beatUpHit = i;\n            dmg = dmg.permute(genCalculate(attacker, defender, move, field));\n            defender.brokenMultiscale = true;\n        }\n        move.beatUpHit = 0;\n    } else if (attacker.ability.name === \"Parental Bond\"\n        && move.maxHits() === 1 && move.affectedByParentalBond()\n        && !(field.multiBattle && move.hasMultipleTargets())) {\n        // Parental Bond has no effect on Multi Hit moves in all cases\n        // or in Multiple Target moves during non-Singles battles.\n        // Fixed damage moves are still fixed. Psywave is calculated twice.\n        // Fling, Self-Destruct, Explosion, Final Gambit, and Endeavor\n        // are excluded from the effect.\n        // Hits once at full power, and once at half power.\n        dmg = genCalculate(attacker, defender, move, field);\n        move.secondHit = true;\n        defender.brokenMultiscale = true;\n        dmg = dmg.permute(genCalculate(attacker, defender, move, field));\n        move.secondHit = false;\n    } else if (move.maxHits() > 1) {\n        // multi-hit moves\n        const dmgs = [new Multiset([0])];\n\n        for (let i = 1; i <= move.maxHits(); i++) {\n            if (field.gen >= Gens.GSC) {\n                dmgs.push(dmgs[i - 1].permute(\n                    genCalculate(attacker, defender, move, field)));\n            } else {\n                dmgs.push(\n                    genCalculate(attacker, defender, move, field)\n                        .map(d => d * i));\n            }\n            defender.brokenMultiscale = true;\n        }\n\n        if (move.numberOfHits >= 1) {\n            dmg = dmgs[clamp(move.numberOfHits,\n                             move.minHits(),\n                             move.maxHits())];\n        } else if (move.maxHits() === 2) {\n            dmg = dmgs[2];\n        } else {\n            /* before b2w2:\n             * 2 hits (3/8), 3 hits (3/8), 4 hits (1/8), 5 hits (1/8)\n             * after b2w2:\n             * 2 hits (1/3), 3 hits (1/3), 4 hits (1/6), 5 hits (1/6)\n             */\n            const p = field.gen >= Gens.B2W2\n                ? [0, 0, 2, 2, 1, 1] : [0, 0, 3, 3, 1, 1];\n            const product = dmgs.map(dmg => dmg.size).reduce(multiplyStrs);\n            const scaledDmgs = dmgs.map(dmg => {\n                const multiplier = divideStrs(product, dmg.size)[0];\n                return dmg.scale(multiplier);\n            });\n            dmg = new Multiset();\n            for (let i = move.minHits(); i <= move.maxHits(); i++) {\n                dmg = dmg.union(scaledDmgs[i].scale(p[i]));\n            }\n        }\n    } else {\n        // Simple move; default case.\n        dmg = genCalculate(attacker, defender, move, field);\n        defender.brokenMultiscale = true;\n    }\n\n    if (move.name === \"Knock Off\" && defender.knockOff()) {\n        defender.item.used = true;\n    }\n\n    return cmpStrs(dmg.size, \"39\") <= 0 ? dmg : dmg.simplify();\n}\n\nfunction genCalculate(attacker, defender, move, field) {\n    const calculateFns = [\n        undefined, // i swear undefined is a function\n        rbyCalculate,\n        gscCalculate,\n        advCalculate,\n        hgssCalculate,\n        b2w2Calculate,\n        orasCalculate,\n        smCalculate\n    ];\n    let damages = calculateFns[field.gen](attacker, defender, move, field);\n\n    const maxHp = defender.stat(Stats.HP);\n    if (defender.ability.name === \"Sturdy\" && defender.currentHp === maxHp) {\n        damages = damages.map(d => min(maxHp - 1, d));\n    }\n\n    return new Multiset(damages);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/calculate/index.js","import rbyEndOfTurn from \"./rbyEndOfTurn\";\nimport gscEndOfTurn from \"./gscEndOfTurn\";\nimport advEndOfTurn from \"./advEndOfTurn\";\nimport hgssEndOfTurn from \"./hgssEndOfTurn\";\nimport b2w2EndOfTurn from \"./b2w2EndOfTurn\";\nimport orasEndOfTurn from \"./orasEndOfTurn\";\nimport smEndOfTurn from \"./smEndOfTurn\";\n\nexport default function endOfTurn(attacker, defender, field) {\n    return [\n        undefined,\n        rbyEndOfTurn,\n        gscEndOfTurn,\n        advEndOfTurn,\n        hgssEndOfTurn,\n        b2w2EndOfTurn,\n        orasEndOfTurn,\n        smEndOfTurn\n    ][field.gen](attacker, defender, field);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/endOfTurn/index.js","import Move from \"../Move\";\r\nimport {Gens, Stats, Types, damageVariation} from \"../utilities\";\r\nimport {isPhysicalType, isSpecialType, effectiveness} from \"../info\";\r\n\r\nconst {max, min, trunc} = Math;\r\n\r\nexport default function advCalculate(attacker, defender, move, field) {\r\n    let moveType = move.type();\r\n    let movePower = move.power();\r\n\r\n    if (movePower === 0) return [0];\r\n\r\n    if (move.isSound() && defender.ability.name === \"Soundproof\") {\r\n        return [0];\r\n    }\r\n\r\n    switch (move.name) {\r\n        case \"Hidden Power\":\r\n            movePower = Move.hiddenPowerBp(attacker.ivs, Gens.ADV);\r\n            moveType = Move.hiddenPowerType(attacker.ivs, Gens.ADV);\r\n            break;\r\n        case \"Reversal\":\r\n        case \"Flail\":\r\n            movePower = Move.flail(attacker.currentHp,\n                                   attacker.stat(Stats.HP),\n                                   Gens.ADV);\n            break;\r\n        case \"Frustration\":\r\n            movePower = Move.frustration(attacker.happiness);\r\n            break;\r\n        case \"Return\":\r\n            movePower = Move.return(attacker.happiness);\r\n            break;\r\n        case \"Future Sight\":\r\n        case \"Doom Desire\":\r\n            moveType = Types.CURSE;\r\n            break;\r\n        case \"Magnitude\":\r\n            movePower = Move.magnitude(move.magnitude);\r\n            break;\r\n        case \"Present\":\r\n            movePower = move.present;\r\n            break;\r\n        case \"Weather Ball\":\r\n            moveType = Move.weatherBall(field.effectiveWeather());\r\n            break;\r\n        case \"Rollout\":\r\n        case \"Ice Ball\":\r\n            movePower = 30 * 2 ** ((move.rollout - 1) % 5 + move.defenseCurl);\n            break;\n        case \"Triple Kick\":\r\n            movePower = 10 * move.tripleKickCount;\r\n            break;\r\n        case \"Water Spout\":\r\n        case \"Eruption\":\r\n            movePower = Move.eruption(\n                attacker.currentHp, attacker.stat(Stats.HP));\r\n            break;\r\n        case \"Fury Cutter\":\r\n            movePower = min(160, 10 * 2 ** move.furyCutter);\r\n            break;\r\n        case \"Beat Up\":\r\n            moveType = Types.CURSE;\r\n            break;\r\n        case \"Seismic Toss\":\r\n        case \"Night Shade\":\r\n            return [attacker.level];\r\n        case \"Dragon Rage\":\r\n            return [40];\r\n        case \"Sonic Boom\":\r\n            return [20];\r\n        case \"Endeavor\":\r\n            return [max(0, defender.currentHp - attacker.currentHp)];\r\n        case \"Psywave\": {\r\n            const range = [];\r\n            for (let i = 0; i <= 10; i++) {\r\n                range.push(max(1, trunc(attacker.level * (10 * i + 50) / 100)));\n            }\r\n            return range;\r\n        }\r\n        case \"Super Fang\":\r\n            return [max(1, trunc(defender.currentHp / 2))];\r\n        default:\r\n            if (move.isOhko()) return [defender.stat(Stats.HP)];\r\n    }\r\n\r\n    if (move.dig && move.boostedByDig()\n        || move.dive && move.boostedByDive()\r\n        || move.fly && move.boostedByFly()) {\r\n        movePower *= 2;\r\n    }\r\n\r\n    let atk = attacker.stat(Stats.ATK);\r\n    let def = defender.stat(Stats.DEF);\r\n    let satk = attacker.stat(Stats.SATK);\r\n    let sdef = attacker.stat(Stats.SDEF);\r\n\r\n    if (attacker.ability.name === \"Huge Power\"\r\n        || attacker.ability.name === \"Pure Power\") {\r\n        atk *= 2;\r\n    }\r\n\r\n    switch (attacker.item.name) {\r\n        case \"Choice Band\":\r\n            atk = trunc(atk * 3 / 2);\r\n            break;\r\n        case \"Soul Dew\":\r\n            if (attacker.name === \"Latias\" || attacker.name === \"Latios\") {\r\n                satk = trunc(satk * 3 / 2);\r\n            }\r\n            break;\r\n        case \"Deep Sea Tooth\":\r\n            if (attacker.name === \"Clamperl\") satk *= 2;\r\n            break;\r\n        case \"Sea Incense\":\r\n            satk = trunc(satk * 105 / 100);\r\n            break;\r\n        default:\r\n            if (attacker.item.boostedType() === moveType) {\r\n                // make sure we are boosting the right stat\r\n                if (isPhysicalType(moveType)) {\r\n                    atk = trunc(atk * 110 / 100);\r\n                } else {\r\n                    satk = trunc(satk * 110 / 100);\r\n                }\r\n            } else if (attacker.thickClubBoosted()) {\r\n                atk *= 2;\r\n            } else if (attacker.lightBallBoosted()) {\r\n                satk *= 2;\r\n            }\r\n    }\r\n\r\n    switch (defender.item.name) {\r\n        case \"Soul Dew\":\r\n            if (defender.name === \"Latias\" || defender.name === \"Latios\") {\r\n                sdef = trunc(sdef * 3 / 2);\r\n            }\r\n            break;\r\n        case \"Deep Sea Scale\":\r\n            if (defender.name === \"Clamperl\") sdef *= 2;\r\n            break;\r\n        case \"Metal Powder\":\r\n            if (defender.name === \"Ditto\") def *= 2;\r\n            break;\r\n        /* no default */\r\n    }\r\n\r\n    switch (attacker.ability.name) {\r\n        case \"Hustle\":\r\n            atk = trunc(atk * 3 / 2);\r\n            break;\r\n        case \"Plus\":\r\n            if (attacker.minus) satk = trunc(satk * 3 / 2);\r\n            break;\r\n        case \"Minus\":\r\n            if (attacker.plus) satk = trunc(satk * 3 / 2);\r\n            break;\r\n        case \"Guts\":\r\n            if (attacker.status) atk = trunc(atk * 3 / 2);\r\n            break;\r\n        /* no default */\r\n    }\r\n\r\n    switch (defender.ability.name) {\r\n        case \"Thick Fat\":\r\n            if (moveType === Types.FIRE || moveType === Types.ICE) {\r\n                satk = trunc(satk / 2);\r\n            }\r\n            break;\r\n        case \"Marvel Scale\":\r\n            if (defender.status) def = trunc(def * 3 / 2);\r\n            break;\r\n        /* no default */\r\n    }\r\n\r\n    if (field.mudSport && moveType === Types.ELECTRIC) {\r\n        movePower = trunc(movePower / 2);\r\n    }\r\n\r\n    if (field.waterSport && moveType === Types.FIRE) {\r\n        movePower = trunc(movePower / 2);\r\n    }\r\n\r\n    if (attacker.pinchAbilityActivated(moveType)) {\r\n        movePower = trunc(movePower * 3 / 2);\r\n    }\r\n\r\n    if (move.name === \"Self-Destruct\" || move.name === \"Explosion\") {\r\n        if (defender.ability.name === \"Damp\") {\r\n            return [0];\r\n        }\r\n        def = max(1, trunc(def / 2));\r\n    }\r\n\r\n    if (move.critical) {\r\n        atk = trunc(atk * max(2, 2 + attacker.boosts[Stats.ATK]) / 2);\r\n        satk = trunc(satk * max(2, 2 + attacker.boosts[Stats.SATK]) / 2);\r\n        def = trunc(def * 2 / max(2, 2 - defender.boosts[Stats.DEF]));\r\n        sdef = trunc(sdef * 2 / max(2, 2 - defender.boosts[Stats.SDEF]));\r\n    } else {\r\n        atk = trunc(atk * max(2, 2 + attacker.boosts[Stats.ATK])\r\n                        / max(2, 2 - attacker.boosts[Stats.ATK]));\r\n        satk = trunc(satk * max(2, 2 + attacker.boosts[Stats.SATK])\r\n                          / max(2, 2 - attacker.boosts[Stats.SATK]));\r\n        def = trunc(def * max(2, 2 + defender.boosts[Stats.DEF])\r\n                        / max(2, 2 - defender.boosts[Stats.DEF]));\r\n        sdef = trunc(sdef * max(2, 2 + defender.boosts[Stats.SDEF])\r\n                          / max(2, 2 - defender.boosts[Stats.SDEF]));\r\n    }\r\n\r\n    let a, d, lvl;\r\n    if (move.name === \"Beat Up\") {\r\n        a = attacker.beatUpStats[move.beatUpHit];\r\n        lvl = attacker.beatUpLevels[move.beatUpHit];\r\n        d = defender.baseStat(Stats.DEF);\r\n    } else if (isPhysicalType(moveType)) {\r\n        a = atk;\r\n        lvl = attacker.level;\r\n        d = def;\r\n    } else if (isSpecialType(moveType)) {\r\n        a = satk;\r\n        lvl = attacker.level;\r\n        d = sdef;\r\n    } else {\r\n        return [0];\r\n    }\r\n\r\n    let baseDamage = trunc(trunc(trunc(2 * lvl / 5 + 2)\r\n                                 * movePower * a / d) / 50);\r\n\r\n    if (move.name !== \"Beat Up\") {\r\n        if (attacker.isBurned() && attacker.ability.name !== \"Guts\") {\r\n            baseDamage = trunc(baseDamage / 2);\r\n        }\r\n\r\n        if (!move.critical\r\n            && (defender.reflect && isPhysicalType(moveType)\r\n                || defender.lightScreen && isSpecialType(moveType))) {\r\n            baseDamage = trunc(field.multiBattle ? baseDamage * 2 / 3\n                                                 : baseDamage / 2);\n        }\r\n    }\r\n\r\n    if (field.multiBattle && move.hasMultipleTargets()) {\r\n        baseDamage = trunc(baseDamage / 2);\r\n    }\r\n\r\n    if (move.name !== \"Weather Ball\") {\r\n        if (field.sun()) {\r\n            if (moveType === Types.FIRE) {\r\n                baseDamage = trunc(baseDamage * 3 / 2);\r\n            } else if (moveType === Types.WATER) {\r\n                baseDamage = trunc(baseDamage / 2);\r\n            }\r\n        } else if (field.rain()) {\r\n            if (moveType === Types.WATER) {\r\n                baseDamage = trunc(baseDamage * 3 / 2);\r\n            } else if (moveType === Types.FIRE) {\r\n                baseDamage = trunc(baseDamage / 2);\r\n            }\r\n        }\r\n        if (!field.sun() && !field.isClearWeather()\r\n            && move.name === \"Solar Beam\") {\r\n            baseDamage = trunc(baseDamage / 2);\r\n        }\r\n    }\r\n\r\n    if (attacker.flashFire && moveType === Types.FIRE\r\n        && attacker.ability.name === \"Flash Fire\") {\r\n        baseDamage = trunc(baseDamage * 3 / 2);\r\n    }\r\n\r\n    if (isPhysicalType(moveType)) {\r\n        baseDamage = max(1, baseDamage);\r\n    }\r\n\r\n    baseDamage += 2;\r\n\r\n    if (move.critical) {\r\n        baseDamage *= 2;\r\n    }\r\n\r\n    switch (move.name) {\r\n        case \"Facade\":\r\n            if (attacker.status) baseDamage *= 2;\r\n            break;\r\n        case \"Pursuit\":\r\n            if (defender.switchedOut) baseDamage *= 2;\r\n            break;\r\n        case \"Revenge\":\r\n            if (attacker.damagedPreviously) baseDamage *= 2;\r\n            break;\r\n        case \"Smelling Salts\":\r\n            if (defender.isParalyzed()) baseDamage *= 2;\r\n            break;\r\n        case \"Weather Ball\":\r\n            if (!field.isClearWeather()) baseDamage *= 2;\r\n            break;\r\n        /* no default */\r\n    }\r\n\r\n    if (move.minimize && move.boostedByMinimize()) {\r\n        baseDamage *= 2;\r\n    }\r\n\r\n    if (attacker.charge && moveType === Types.ELECTRIC) {\r\n        baseDamage *= 2;\r\n    }\r\n\r\n    if (attacker.helpingHand) {\r\n        baseDamage = trunc(baseDamage * 3 / 2);\r\n    }\r\n\r\n    if (attacker.stab(moveType)) {\r\n        baseDamage = trunc(baseDamage * 3 / 2);\r\n    }\r\n\r\n    let eff = effectiveness(moveType, defender.types(), {\n        gen: Gens.ADV,\n        foresight: defender.foresight\n    });\r\n    if (moveType === defender.ability.immunityType()) {\r\n        eff = {num: 0, den: 2};\r\n    }\r\n    if (eff.num === 0) return [0];\r\n    baseDamage = trunc(baseDamage * eff.num / eff.den);\r\n\r\n    if (move.name === \"Spit Up\") {\r\n        return [attacker.stockpile > 0 ? baseDamage : 0];\r\n    }\r\n\r\n    const damages = damageVariation(baseDamage, 85, 100);\r\n\r\n    return damages;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/calculate/advCalculate.js","import Move from \"../Move\";\r\n\r\nimport {\r\n    Gens, Stats, Types, applyMod, chainMod,\r\n    roundHalfToZero, damageVariation\r\n} from \"../utilities\";\r\n\r\nimport {\r\n    isSandForceType, isAdamantType, isLustrousType,\r\n    isGriseousType, effectiveness\r\n} from \"../info\";\r\n\r\nconst {max, min, trunc} = Math;\r\n\r\nexport default function b2w2Calculate(attacker, defender, move, field) {\r\n    let moveType = move.type();\r\n    let movePower = move.power();\r\n\r\n    if (movePower === 0) return [0];\r\n\r\n    switch (move.name) {\r\n        case \"Weather Ball\":\r\n            moveType = Move.weatherBall(field.effectiveWeather());\r\n            movePower = moveType === Types.NORMAL ? 50 : 100;\r\n            break;\r\n        case \"Frustration\":\r\n            movePower = Move.frustration(attacker.happiness);\r\n            break;\r\n        case \"Return\":\r\n            movePower = Move.return(attacker.happiness);\r\n            break;\r\n        case \"Payback\":\r\n            if (defender.movedFirst) movePower *= 2;\r\n            break;\r\n        case \"Electro Ball\":\r\n            movePower = Move.electroBall(attacker.speed(), defender.speed());\r\n            break;\r\n        case \"Assurance\":\r\n            if (attacker.damagedPreviously) movePower *= 2;\r\n            break;\r\n        case \"Avalanche\":\r\n        case \"Revenge\":\r\n            if (attacker.damagedPreviously && !attacker.damagedByPainSplit) {\r\n                movePower *= 2;\r\n            }\r\n            break;\r\n        case \"Gyro Ball\":\r\n            movePower = Move.gyroBall(attacker.speed(), defender.speed());\r\n            break;\r\n        case \"Water Spout\":\r\n        case \"Eruption\":\r\n            movePower = Move.eruption(attacker.currentHp,\r\n                                      attacker.stat(Stats.HP));\r\n            break;\r\n        case \"Punishment\":\r\n            movePower = Move.punishment(defender.boosts);\r\n            break;\r\n        case \"Fury Cutter\":\r\n            movePower = min(160, 20 * 2 ** move.furyCutter);\r\n            break;\r\n        case \"Low Kick\":\r\n        case \"Grass Knot\":\r\n            movePower = Move.grassKnot(defender.weight());\r\n            break;\r\n        case \"Echoed Voice\":\r\n            movePower = min(200, 40 + 40 * move.echoedVoice);\r\n            break;\r\n        case \"Hex\":\r\n            if (defender.status) movePower *= 2;\r\n            break;\r\n        case \"Wring Out\":\r\n        case \"Crush Grip\":\r\n            movePower = max(1, roundHalfToZero(120 * defender.currentHp\r\n                                               / defender.stat(Stats.HP)));\r\n            break;\r\n        case \"Heavy Slam\":\r\n        case \"Heat Crash\":\r\n            movePower = Move.heavySlam(attacker.weight(), defender.weight());\r\n            break;\r\n        case \"Stored Power\":\r\n            movePower = Move.storedPower(attacker.boosts);\r\n            break;\r\n        case \"Flail\":\r\n        case \"Reversal\":\r\n            movePower = Move.flail(attacker.currentHp,\r\n                                   attacker.stat(Stats.HP),\r\n                                   Gens.B2W2);\r\n            break;\r\n        case \"Trump Card\":\r\n            movePower = Move.trumpCard(move.trumpPP);\r\n            break;\r\n        case \"Round\":\r\n            if (move.roundBoost) movePower *= 2;\r\n            break;\r\n        case \"Wake-Up Slap\":\r\n            if (defender.isAsleep()) movePower *= 2;\r\n            break;\r\n        case \"Smelling Salts\":\r\n            if (defender.isParalyzed()) movePower *= 2;\r\n            break;\r\n        case \"Beat Up\": {\r\n            const stat = attacker.beatUpStats[move.beatUpHit];\r\n            movePower = trunc(stat / 10) + 5;\r\n            break;\r\n        }\r\n        case \"Hidden Power\":\r\n            movePower = Move.hiddenPowerBp(attacker.ivs, Gens.B2W2);\r\n            moveType = Move.hiddenPowerType(attacker.ivs, Gens.B2W2);\r\n            break;\r\n        case \"Spit Up\":\r\n            if (attacker.stockpile === 0) return [0];\r\n            movePower = 100 * attacker.stockpile;\r\n            break;\r\n        case \"Pursuit\":\r\n            movePower *= 2;\r\n            break;\r\n        case \"Present\":\r\n            movePower = move.present;\r\n            break;\r\n        case \"Natural Gift\":\r\n            if (attacker.item.disabled || !attacker.item.isBerry()) return [0];\r\n            movePower = attacker.item.naturalGiftPower();\r\n            moveType = attacker.item.naturalGiftType();\r\n            break;\r\n        case \"Magnitude\":\r\n            movePower = Move.magnitude(move.magnitude);\r\n            break;\r\n        case \"Rollout\":\r\n        case \"Ice Ball\":\r\n            movePower = 30 * 2 ** ((move.rollout - 1) % 5 + move.defenseCurl);\r\n            break;\r\n        case \"Fling\":\r\n            movePower = attacker.item.flingPower();\r\n            break;\r\n        case \"Fire Pledge\":\r\n        case \"Water Pledge\":\r\n        case \"Grass Pledge\":\r\n            if (move.pledgeBoost) movePower *= 2;\r\n            break;\r\n        case \"Triple Kick\":\r\n            movePower = 10 * move.tripleKickCount;\r\n            break;\r\n        case \"Judgment\":\r\n            if (attacker.item.plateType() > -1) {\n                moveType = attacker.item.plateType();\n            }\r\n            break;\r\n        case \"Seismic Toss\":\r\n        case \"Night Shade\":\r\n            return [attacker.level];\r\n        case \"Dragon Rage\":\r\n            return [40];\r\n        case \"Sonic Boom\":\r\n            return [20];\r\n        case \"Endeavor\":\r\n            return [max(0, defender.currentHp - attacker.currentHp)];\r\n        case \"Psywave\": {\r\n            const range = [];\r\n            for (let i = 0; i <= 100; i++) {\r\n                range.push(max(1, trunc(attacker.level * (i + 50) / 100)));\r\n            }\r\n            return range;\r\n        }\r\n        case \"Super Fang\":\r\n            return [max(1, trunc(defender.currentHp / 2))];\r\n        case \"Self-Destruct\":\r\n        case \"Explosion\":\r\n            if (defender.ability.name === \"Damp\") return [0];\r\n            break;\r\n        case \"Final Gambit\":\r\n            return [attacker.currentHp];\r\n        default:\r\n            if (move.isOhko()) {\r\n                return [defender.stat(Stats.HP)];\r\n            }\r\n            if (move.isSound() && defender.ability.name === \"Soundproof\") {\r\n                return [0];\r\n            }\r\n            if (move.fly && move.boostedByFly()) {\r\n                movePower *= 2;\r\n            }\r\n    }\r\n\r\n    const gemBoost = moveType === attacker.item.gemType();\r\n    attacker.item.used = attacker.item.used || gemBoost;\r\n\r\n    if (move === \"Acrobatics\" && attacker.item.name === \"(No Item)\") {\r\n        movePower *= 2;\r\n    }\r\n\r\n    let movePowerMod = 0x1000;\r\n\r\n    switch (attacker.ability.name) {\r\n        case \"Technician\":\r\n            if (movePower <= 60) {\r\n                movePowerMod = chainMod(0x1800, movePowerMod);\r\n            }\r\n            break;\r\n        case \"Flare Boost\":\r\n            if (attacker.isBurned() && move.isSpecial()) {\r\n                movePowerMod = chainMod(0x1800, movePowerMod);\r\n            }\r\n            break;\r\n        case \"Analytic\":\r\n            if (defender.movedFirst) {\r\n                movePowerMod = chainMod(0x14CD, movePowerMod);\r\n            }\r\n            break;\r\n        case \"Reckless\":\r\n            if (move.isRecklessBoosted()) {\r\n                movePowerMod = chainMod(0x1333, movePowerMod);\r\n            }\r\n            break;\r\n        case \"Iron Fist\":\r\n            if (move.isPunch()) {\r\n                movePowerMod = chainMod(0x1333, movePowerMod);\r\n            }\r\n            break;\r\n        case \"Toxic Boost\":\r\n            if ((attacker.isPoisoned() || attacker.isBadlyPoisoned())\r\n                && move.isPhysical()) {\r\n                movePowerMod = chainMod(0x1800, movePowerMod);\r\n            }\r\n            break;\r\n        case \"Rivalry\":\r\n            if (attacker.gender && defender.gender) {\r\n                const m = attacker.gender === defender.gender ? 0xC00 : 0x1400;\r\n                movePowerMod = chainMod(m, movePowerMod);\r\n            }\r\n            break;\r\n        case \"Sand Force\":\r\n            if (field.sand() && isSandForceType(moveType)) {\r\n                movePowerMod = chainMod(0x14CD, movePowerMod);\r\n            }\r\n            break;\r\n        case \"Normalize\":\r\n            moveType = 0;\r\n            break;\r\n        /* no default */\r\n    }\r\n\r\n    if (moveType === Types.FIRE) {\r\n        if (defender.ability.name === \"Heatproof\") {\r\n            movePowerMod = chainMod(0x800, movePowerMod);\r\n        } else if (defender.ability.name === \"Dry Skin\") {\r\n            movePowerMod = chainMod(0x1400, movePowerMod);\r\n        }\r\n    }\r\n\r\n    if (attacker.ability.name === \"Sheer Force\"\r\n        && move.affectedBySheerForce()) {\r\n        movePowerMod = chainMod(0x14CD, movePowerMod);\r\n    }\r\n\r\n    switch (attacker.item.name) {\r\n        case \"Muscle Band\":\r\n            if (move.isPhysical()) {\r\n                movePowerMod = chainMod(0x1199, movePowerMod);\r\n            }\r\n            break;\r\n        case \"Wise Glasses\":\r\n            if (move.isSpecial()) {\r\n                movePowerMod = chainMod(0x1199, movePowerMod);\r\n            }\r\n            break;\r\n        case \"Adamant Orb\":\r\n            if (attacker.name === \"Dialga\" && isAdamantType(moveType)) {\r\n                movePowerMod = chainMod(0x1333, movePowerMod);\r\n            }\r\n            break;\r\n        case \"Lustrous Orb\":\r\n            if (attacker.name === \"Palkia\" && isLustrousType(moveType)) {\r\n                movePowerMod = chainMod(0x1333, movePowerMod);\r\n            }\r\n            break;\r\n        case \"Griseous Orb\":\r\n            if (attacker.name.startsWith(\"Giratina\")\r\n                && isGriseousType(moveType)) {\r\n                movePowerMod = chainMod(0x1333, movePowerMod);\r\n            }\r\n            break;\r\n        default:\r\n            if (gemBoost) {\r\n                movePowerMod = chainMod(0x1800, movePowerMod);\r\n            } else if (attacker.item.boostedType() === moveType) {\r\n                movePowerMod = chainMod(0x1333, movePowerMod);\r\n            }\r\n    }\r\n\r\n    switch (move.name) {\r\n        case \"Facade\":\r\n            if (attacker.status) {\r\n                movePowerMod = chainMod(0x2000, movePowerMod);\r\n            }\r\n            break;\r\n        case \"Brine\":\r\n            if (defender.currentHp * 2 <= defender.stat(Stats.HP)) {\r\n                movePowerMod = chainMod(0x2000, movePowerMod);\r\n            }\r\n            break;\r\n        case \"Venoshock\":\r\n            if (attacker.isPoisoned() || attacker.isBadlyPoisoned()) {\r\n                movePowerMod = chainMod(0x2000, movePowerMod);\r\n            }\r\n            break;\r\n        case \"Retaliate\":\r\n            if (move.previouslyFainted) {\r\n                movePowerMod = chainMod(0x2000, movePowerMod);\r\n            }\r\n            break;\r\n        case \"Fusion Bolt\":\r\n            if (move.fusionFlare) {\r\n                movePowerMod = chainMod(0x2000, movePowerMod);\r\n            }\r\n            break;\r\n        case \"Fusion Flare\":\r\n            if (move.fusionBolt) {\r\n                movePowerMod = chainMod(0x2000, movePowerMod);\r\n            }\r\n            break;\r\n        /* no default */\r\n    }\r\n\r\n    if (move.meFirst) {\r\n        movePowerMod = chainMod(0x1800, movePowerMod);\r\n    }\r\n\r\n    if (!field.sun() && !field.isClearWeather() && move.name === \"Solar Beam\") {\r\n        movePowerMod = chainMod(0x800, movePowerMod);\r\n    }\r\n\r\n    if (attacker.charge && moveType === Types.ELECTRIC) {\r\n        movePowerMod = chainMod(0x2000, movePowerMod);\r\n    }\r\n\r\n    if (attacker.helpingHand) {\r\n        movePowerMod = chainMod(0x1800, movePowerMod);\r\n    }\r\n\r\n    if (field.waterSport && moveType === Types.FIRE) {\r\n        movePowerMod = chainMod(0x548, movePowerMod);\r\n    }\r\n\r\n    if (field.mudSport && moveType === Types.ELECTRIC) {\r\n        movePowerMod = chainMod(0x548, movePowerMod);\r\n    }\r\n\r\n    movePower = max(1, applyMod(movePowerMod, movePower));\r\n\r\n    const defStat = field.wonderRoom ? Stats.SDEF : Stats.DEF;\r\n    const sdefStat = field.wonderRoom ? Stats.DEF : Stats.SDEF;\r\n    const unawareA = attacker.ability.name === \"Unaware\";\r\n    const unawareD = defender.ability.name === \"Unaware\";\r\n    let atk, def, satk, sdef;\r\n    if (move.name === \"Foul Play\") {\r\n        if (unawareA) {\r\n            def = defender.stat(defStat);\r\n            sdef = defender.stat(sdefStat);\r\n            atk = defender.stat(Stats.ATK);\r\n        } else if (move.critical) {\r\n            def = min(defender.stat(defStat),\r\n                      defender.boostedStat(defStat));\r\n            sdef = min(defender.stat(sdefStat),\r\n                       defender.boostedStat(sdefStat));\r\n            atk = max(defender.stat(Stats.ATK),\r\n                      defender.boostedStat(Stats.ATK));\r\n        } else {\r\n            def = defender.boostedStat(defStat);\r\n            sdef = defender.boostedStat(sdefStat);\r\n            atk = defender.boostedStat(Stats.ATK);\r\n        }\r\n\r\n        if (unawareD) {\r\n            satk = attacker.stat(Stats.SATK);\r\n        } else if (move.critical) {\r\n            satk = max(attacker.stat(Stats.SATK),\r\n                       attacker.boostedStat(Stats.SATK));\r\n        } else {\r\n            satk = attacker.boostedStat(Stats.SATK);\r\n        }\r\n    } else if (move.ignoresDefenseBoosts()) {\r\n        def = defender.stat(defStat);\r\n        sdef = defender.stat(sdefStat);\r\n\r\n        if (unawareD) {\r\n            atk = attacker.stat(Stats.ATK);\r\n            satk = attacker.stat(Stats.SATK);\r\n        } else if (move.critical) {\r\n            atk = max(attacker.stat(Stats.ATK),\r\n                      attacker.boostedStat(Stats.ATK));\r\n            satk = max(attacker.stat(Stats.SATK),\r\n                       attacker.boostedStat(Stats.SATK));\r\n        } else {\r\n            atk = attacker.boostedStat(Stats.ATK);\r\n            satk = attacker.boostedStat(Stats.SATK);\r\n        }\r\n    } else {\r\n        if (unawareA) {\r\n            def = defender.stat(defStat);\r\n            sdef = defender.stat(sdefStat);\r\n        } else if (move.critical) {\r\n            def = min(defender.stat(defStat),\r\n                      defender.boostedStat(defStat));\r\n            sdef = min(defender.stat(sdefStat),\r\n                       defender.boostedStat(sdefStat));\r\n        } else {\r\n            def = defender.boostedStat(defStat);\r\n            sdef = defender.boostedStat(sdefStat);\r\n        }\r\n\r\n        if (unawareD) {\r\n            atk = attacker.stat(Stats.ATK);\r\n            satk = attacker.stat(Stats.SATK);\r\n        } else if (move.critical) {\r\n            atk = max(attacker.stat(Stats.ATK),\r\n                      attacker.boostedStat(Stats.ATK));\r\n            satk = max(attacker.stat(Stats.SATK),\r\n                       attacker.boostedStat(Stats.SATK));\r\n        } else {\r\n            atk = attacker.boostedStat(Stats.ATK);\r\n            satk = attacker.boostedStat(Stats.SATK);\r\n        }\r\n    }\r\n\r\n    let atkMod = 0x1000;\r\n    let satkMod = 0x1000;\r\n\r\n    if (defender.ability.name === \"Thick Fat\"\r\n        && (moveType === Types.FIRE || moveType === Types.ICE)) {\r\n        atkMod = chainMod(0x800, atkMod);\r\n        satkMod = chainMod(0x800, satkMod);\r\n    }\r\n\r\n    switch (attacker.ability.name) {\r\n        case \"Guts\":\r\n            if (defender.status) atkMod = chainMod(0x1800, atkMod);\r\n            break;\r\n        case \"Plus\":\r\n            if (attacker.minus) satkMod = chainMod(0x1800, satkMod);\r\n            break;\r\n        case \"Minus\":\r\n            if (attacker.plus) satkMod = chainMod(0x1800, satkMod);\r\n            break;\r\n        case \"Defeatist\":\r\n            if (attacker.currentHp * 2 <= attacker.stat(Stats.HP)) {\r\n                atkMod = chainMod(0x800, atkMod);\r\n                satkMod = chainMod(0x800, satkMod);\r\n            }\r\n            break;\r\n        case \"Huge Power\":\r\n        case \"Pure Power\":\r\n            atkMod = chainMod(0x2000, atkMod);\r\n            break;\r\n        case \"Solar Power\":\r\n            if (field.sun()) satkMod = chainMod(0x1800, satkMod);\r\n            break;\r\n        case \"Hustle\":\r\n            atk = applyMod(0x1800, atk);\r\n            break;\r\n        case \"Flash Fire\":\r\n            if (attacker.flashFire && moveType === Types.FIRE) {\r\n                atkMod = chainMod(0x1800, atkMod);\r\n                satkMod = chainMod(0x1800, satkMod);\r\n            }\r\n            break;\r\n        case \"Slow Start\":\r\n            if (attacker.slowStart) atkMod = chainMod(0x800, atkMod);\r\n            break;\r\n        default:\r\n            if (attacker.pinchAbilityActivated(moveType)) {\r\n                // blaze, torrent, overgrow, ...\r\n                atkMod = chainMod(0x1800, atkMod);\r\n                satkMod = chainMod(0x1800, satkMod);\r\n            }\r\n    }\r\n\r\n    if (attacker.flowerGift && field.sun()) {\r\n        atkMod = chainMod(0x1800, atkMod);\r\n    }\r\n\r\n    switch (attacker.item.name) {\r\n        case \"Deep Sea Tooth\":\r\n            if (attacker.name === \"Clamperl\") {\r\n                satkMod = chainMod(0x2000, satkMod);\r\n            }\r\n            break;\r\n        case \"Soul Dew\":\r\n            if (attacker.name === \"Latias\" || attacker.name === \"Latios\") {\r\n                satkMod = chainMod(0x1800, satkMod);\r\n            }\r\n            break;\r\n        case \"Choice Band\":\r\n            atkMod = chainMod(0x1800, atkMod);\r\n            break;\r\n        case \"Choice Specs\":\r\n            satkMod = chainMod(0x1800, satkMod);\r\n            break;\r\n        default:\r\n            if (attacker.thickClubBoosted()) {\r\n                atkMod = chainMod(0x2000, atkMod);\r\n            } else if (attacker.lightBallBoosted()) {\r\n                atkMod = chainMod(0x2000, atkMod);\r\n                satkMod = chainMod(0x2000, satkMod);\r\n            }\r\n    }\r\n\r\n    atk = applyMod(atkMod, atk);\r\n    satk = applyMod(satkMod, satk);\r\n\r\n    if (field.sand() && defender.stab(Types.ROCK)) {\r\n        sdef = applyMod(0x1800, sdef);\r\n    }\r\n\r\n    let defMod = 0x1000;\r\n    let sdefMod = 0x1000;\r\n\r\n    if (defender.ability.name === \"Marvel Scale\" && defender.status) {\r\n        defMod = chainMod(0x1800, defMod);\r\n    }\r\n\r\n    if (defender.flowerGift && field.sun()) {\r\n        sdefMod = chainMod(0x1800, sdefMod);\r\n    }\r\n\r\n    switch (defender.item.name) {\r\n        case \"Deep Sea Scale\":\r\n            if (defender.name === \"Clamperl\") {\r\n                sdefMod = chainMod(0x1800, sdefMod);\r\n            }\r\n            break;\r\n        case \"Metal Powder\":\r\n            if (defender.name === \"Ditto\") {\r\n                defMod = chainMod(0x2000, defMod);\r\n            }\r\n            break;\r\n        case \"Eviolite\":\r\n            if (defender.hasEvolution()) {\r\n                defMod = chainMod(0x1800, defMod);\r\n                sdefMod = chainMod(0x1800, sdefMod);\r\n            }\r\n            break;\r\n        case \"Soul Dew\":\r\n            if (defender.name === \"Latias\" || defender.name === \"Latios\") {\r\n                sdefMod = chainMod(0x1800, sdefMod);\r\n            }\r\n            break;\r\n        /* no default */\r\n    }\r\n\r\n    def = applyMod(defMod, def);\r\n    sdef = applyMod(sdefMod, sdef);\r\n\r\n    let a = 0, d = 0;\r\n    if (move.isPsyshockLike()) {\r\n        a = satk;\r\n        d = def;\r\n    } else if (move.isPhysical()) {\r\n        a = atk;\r\n        d = def;\r\n    } else if (move.isSpecial()) {\r\n        a = satk;\r\n        d = sdef;\r\n    } else {\r\n        return [0];\r\n    }\r\n\r\n    let baseDamage = trunc(trunc(trunc(2 * attacker.level / 5 + 2)\r\n                                 * movePower * a / d) / 50) + 2;\r\n\r\n    if (field.multiBattle && move.hasMultipleTargets()) {\r\n        baseDamage = applyMod(0xC00, baseDamage);\r\n    }\r\n\r\n    if (move.name !== \"Weather Ball\") {\r\n        if (field.sun()) {\r\n            if (moveType === Types.FIRE) {\r\n                baseDamage = applyMod(0x1800, baseDamage);\r\n            } else if (moveType === Types.WATER) {\r\n                baseDamage = applyMod(0x800, baseDamage);\r\n            }\r\n        } else if (field.rain()) {\r\n            if (moveType === Types.WATER) {\r\n                baseDamage = applyMod(0x1800, baseDamage);\r\n            } else if (moveType === Types.FIRE) {\r\n                baseDamage = applyMod(0x800, baseDamage);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (move.critical) {\r\n        baseDamage = applyMod(0x2000, baseDamage);\r\n    }\r\n\r\n    let damages = damageVariation(baseDamage, 85, 100);\r\n\r\n    if (attacker.stab(moveType)) {\r\n        if (attacker.ability.name === \"Adaptability\") {\r\n            damages = applyMod(0x2000, damages);\r\n        } else {\r\n            damages = applyMod(0x1800, damages);\r\n        }\r\n    }\r\n\r\n    let eff = effectiveness(moveType, defender.types(), {\r\n        gen: Gens.B2W2,\r\n        foresight: defender.foresight,\r\n        scrappy: attacker.ability.name === \"Scrappy\",\r\n        gravity: field.gravity\r\n    });\r\n    if (moveType === defender.ability.immunityType()) {\r\n        eff = {num: 0, den: 2};\r\n    }\r\n    if (eff.num === 0) return [0];\r\n    damages = damages.map(d => trunc(d * eff.num / eff.den));\r\n\r\n    if (attacker.isBurned() && move.isPhysical()\r\n        && attacker.ability.name !== \"Guts\") {\r\n        damages = damages.map(d => trunc(d / 2));\r\n    }\r\n\r\n    damages = damages.map(d => max(1, d));\r\n\r\n    let finalMod = 0x1000;\r\n\r\n    if (!move.critical && attacker.ability.name !== \"Infiltrator\") {\r\n        if (defender.reflect && (move.isPhysical() || move.isPsyshockLike())) {\r\n            finalMod = chainMod(field.multiBattle ? 0xA8F : 0x800, finalMod);\r\n        }\r\n        if (defender.lightScreen && move.isSpecial()\r\n            && !move.isPsyshockLike()) {\r\n            finalMod = chainMod(field.multiBattle ? 0xA8F : 0x800, finalMod);\r\n        }\r\n    }\r\n\r\n    if (defender.multiscaleIsActive()) {\r\n        finalMod = chainMod(0x800, finalMod);\r\n    }\r\n\r\n    if (attacker.ability.name === \"Tinted Lens\" && eff.num < eff.den) {\r\n        finalMod = chainMod(0x2000, finalMod);\r\n    }\r\n\r\n    if (defender.friendGuard) {\r\n        finalMod = chainMod(0xC00, finalMod);\r\n    }\r\n\r\n    if (attacker.ability.name === \"Sniper\" && move.critical) {\r\n        finalMod = chainMod(0x1800, finalMod);\r\n    }\r\n\r\n    if (eff.num > eff.den && defender.ability.reducesSuperEffective()) {\r\n        finalMod = chainMod(0xC00, finalMod);\r\n    }\r\n\r\n    switch (attacker.item.name) {\r\n        case \"Metronome\":\r\n            if (attacker.metronome <= 4) {\r\n                const mod = 0x1000 + attacker.metronome * 0x333;\r\n                finalMod = chainMod(mod, finalMod);\r\n            } else {\r\n                finalMod = chainMod(0x2000, finalMod);\r\n            }\r\n            break;\r\n        case \"Expert Belt\":\r\n            if (eff.num > eff.den) {\r\n                finalMod = chainMod(0x1333, finalMod);\r\n            }\r\n            break;\r\n        case \"Life Orb\":\r\n            finalMod = chainMod(0x14CC, finalMod);\r\n            break;\r\n        /* no default */\r\n    }\r\n\r\n    if (defender.item.berryTypeResist() === moveType\r\n        && (eff.num > eff.den || moveType === Types.NORMAL)) {\r\n        finalMod = chainMod(0x800, finalMod);\r\n        defender.item.used = true;\r\n    }\r\n\r\n    if (move.dig && move.boostedByDig()\r\n        || move.dive && move.boostedByDive()\r\n        || move.minimize && move.boostedByMinimize()) {\r\n        finalMod = chainMod(0x2000, finalMod);\r\n    }\r\n\r\n    damages = applyMod(finalMod, damages);\r\n\r\n    return damages;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/calculate/b2w2Calculate.js","import Move from \"../Move\";\r\nimport {isPhysicalType, isSpecialType, effectiveness} from \"../info\";\r\n\r\nimport {\r\n    Gens, Stats, Types, damageVariation,\r\n    scaleStat, needsScaling\r\n} from \"../utilities\";\r\n\r\nconst {max, min, trunc} = Math;\r\n\r\nexport default function gscCalculate(attacker, defender, move, field) {\r\n    let moveType = move.type();\r\n    let movePower = move.power();\r\n\r\n    if (movePower === 0) return [0];\r\n\r\n    switch (move.name) {\r\n        case \"Hidden Power\":\r\n            moveType = Move.hiddenPowerType(attacker.ivs, Gens.GSC);\r\n            movePower = Move.hiddenPowerBp(attacker.ivs, Gens.GSC);\r\n            break;\r\n        case \"Reversal\":\r\n        case \"Flail\":\r\n            movePower = Move.flail(attacker.currentHp,\r\n                                   attacker.stat(Stats.HP),\r\n                                   Gens.GSC);\r\n            break;\r\n        case \"Frustration\":\r\n            movePower = Move.frustration(attacker.happiness);\r\n            break;\r\n        case \"Return\":\r\n            movePower = Move.return(attacker.happiness);\r\n            break;\r\n        case \"Future Sight\":\r\n            moveType = Types.CURSE;\r\n            break;\r\n        case \"Magnitude\":\r\n            movePower = Move.magnitude(move.magnitude);\r\n            break;\r\n        case \"Present\":\r\n            movePower = move.present;\r\n            break;\r\n        case \"Rollout\":\r\n            movePower = 30 * 2 ** ((move.rollout - 1) % 5 + move.defenseCurl);\r\n            break;\r\n        case \"Triple Kick\":\r\n            movePower = 10 * move.tripleKickCount;\r\n            break;\r\n        case \"Fury Cutter\":\r\n            movePower = min(160, 10 * 2 ** move.furyCutter);\r\n            break;\r\n        case \"Beat Up\":\r\n            moveType = Types.CURSE;\r\n            break;\r\n        case \"Seismic Toss\":\r\n        case \"Night Shade\":\r\n            return [attacker.level];\r\n        case \"Dragon Rage\":\r\n            return [40];\r\n        case \"Sonic Boom\":\r\n            return [20];\r\n        case \"Psywave\": {\r\n            // according to crystal_, it really is 1-149\r\n            const range = [];\r\n            const maxPsywave = trunc(attacker.level * 3 / 2);\r\n            for (let i = 1; i < maxPsywave; i++) {\r\n                range.push(i);\r\n            }\r\n            return range;\r\n        }\r\n        case \"Super Fang\":\r\n            return [max(1, trunc(defender.currentHp / 2))];\r\n        default:\r\n            if (move.isOhko()) return [65535];\r\n    }\r\n\r\n    if (move.dig && move.boostedByDig()\r\n        || move.fly && move.boostedByFly()) {\r\n        movePower *= 2;\r\n    }\r\n\r\n    let lvl = attacker.level;\r\n    const defBoost = defender.boost(Stats.DEF);\r\n    const atkBoost = attacker.boost(Stats.ATK);\r\n    const sdefBoost = defender.boost(Stats.SDEF);\r\n    const satkBoost = attacker.boost(Stats.SATK);\r\n\r\n    // crits are weird. thanks to crystal_ and the gsc community on\r\n    // the mt. silver boards for figuring them out.\r\n    const ignorePhysicalBoosts = move.critical && defBoost < atkBoost;\r\n    const ignoreSpecialBoosts = move.critical && sdefBoost < satkBoost;\r\n\r\n    let atk, def;\r\n    if (ignorePhysicalBoosts) {\r\n        atk = attacker.stat(Stats.ATK);\r\n        def = defender.stat(Stats.DEF);\r\n    } else {\r\n        atk = attacker.boostedStat(Stats.ATK);\r\n        def = defender.boostedStat(Stats.DEF);\r\n    }\r\n\r\n    let satk, sdef;\r\n    if (ignoreSpecialBoosts) {\r\n        satk = attacker.stat(Stats.SATK);\r\n        sdef = defender.stat(Stats.SDEF);\r\n    } else {\r\n        satk = attacker.boostedStat(Stats.SATK);\r\n        sdef = defender.boostedStat(Stats.SDEF);\r\n    }\r\n\r\n    if (attacker.isBurned() && !ignorePhysicalBoosts) {\r\n        atk = trunc(atk / 2);\r\n    }\r\n\r\n    if (defender.reflect && !ignorePhysicalBoosts) def *= 2;\r\n    if (defender.lightScreen && !ignoreSpecialBoosts) sdef *= 2;\r\n\r\n    if (attacker.thickClubBoosted()) atk *= 2;\r\n    if (attacker.lightBallBoosted()) satk *= 2;\r\n\r\n    let a, d;\r\n    if (isPhysicalType(moveType)) {\r\n        a = atk;\r\n        d = def;\r\n    } else if (isSpecialType(moveType)) {\r\n        a = satk;\r\n        d = sdef;\r\n    } else {\r\n        return [0];\r\n    }\r\n\r\n    if (needsScaling(a, d)) {\r\n        a = scaleStat(a);\r\n        d = max(1, scaleStat(d));\r\n    }\r\n    // in-game Crystal would repeatedly shift by 2 until it fits in a byte\r\n\r\n    if (attacker.name === \"Ditto\" && attacker.item.name === \"Metal Powder\") {\r\n        d = trunc(d * 3 / 2);\r\n        if (needsScaling(d)) {\r\n            a = scaleStat(a, 1);\r\n            d = max(1, scaleStat(d, 1));\r\n        }\r\n    }\r\n\r\n    if (move.name === \"Explosion\" || move.name === \"Self-Destruct\") {\r\n        d = max(1, trunc(d / 2));\r\n    }\r\n\r\n    if (move.name === \"Beat Up\") {\r\n        a = attacker.beatUpStats[move.beatUpHit];\r\n        lvl = attacker.beatUpLevels[move.beatUpHit];\r\n        d = defender.baseStat(Stats.DEF);\r\n    }\r\n\r\n    d = max(1, d);\r\n    let baseDamage = trunc(trunc(trunc(2 * lvl / 5 + 2)\r\n                                 * movePower * a / d) / 50);\r\n\r\n    if (move.critical) {\r\n        baseDamage *= 2;\r\n    }\r\n\r\n    if (attacker.item.boostedType() === moveType) {\r\n        baseDamage = trunc(baseDamage * 110 / 100);\r\n    }\r\n\r\n    baseDamage = min(997, baseDamage) + 2;\r\n\r\n    if (field.sun()) {\r\n        if (moveType === Types.FIRE) {\r\n            baseDamage = trunc(baseDamage * 3 / 2);\r\n        } else if (moveType === Types.WATER) {\r\n            baseDamage = trunc(baseDamage / 2);\r\n        }\r\n    } else if (field.rain()) {\r\n        if (moveType === Types.WATER) {\r\n            baseDamage = trunc(baseDamage * 3 / 2);\r\n        } else if (moveType === Types.FIRE || move.name === \"Solar Beam\") {\r\n            baseDamage = trunc(baseDamage / 2);\r\n        }\r\n    }\r\n\r\n    if (attacker.stab(moveType)) {\r\n        baseDamage = trunc(baseDamage * 3 / 2);\r\n    }\r\n\r\n    const eff = effectiveness(moveType, defender.types(), {\r\n        gen: Gens.GSC,\r\n        foresight: defender.foresight\r\n    });\r\n    if (eff.num === 0) return [0];\r\n    baseDamage = trunc(baseDamage * eff.num / eff.den);\r\n\r\n    // these don't have damage variance\r\n    if (move.name === \"Reversal\" || move.name === \"Flail\") {\r\n        return [baseDamage];\r\n    }\r\n\r\n    let damages = damageVariation(baseDamage, 217, 255);\r\n\r\n    if (move.name === \"Pursuit\" && defender.switchedOut) {\r\n        damages = damages.map(d => 2 * d);\r\n    }\r\n\r\n    return damages;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/calculate/gscCalculate.js","import {addStrs, cmpStrs, multiplyStrs, divideStrs, gcdStrs} from \"./utilities\";\n\nexport default class Multiset {\n\n    constructor(iterable = []) {\n        if (iterable instanceof Multiset) {\n            this._data = new Map(iterable._data);\n        } else if (iterable instanceof Map) {\n            this._data = new Map(iterable);\n        } else {\n            this._data = new Map();\n            for (const value of iterable) {\n                this.add(value);\n            }\n        }\n    }\n\n    add(value, multiplicity = \"1\") {\n        this._data.set(value, addStrs(this._data.get(value) || \"0\",\n                                      String(multiplicity)));\n        return this;\n    }\n\n    clear() {\n        this._data.clear();\n    }\n\n    count(callbackFn = (() => true), thisArg) {\n        let sum = \"0\";\n        for (const entry of this) {\n            if (Reflect.apply(callbackFn, thisArg, [...entry, this])) {\n                sum = addStrs(sum, entry[1]);\n            }\n        }\n        return sum;\n    }\n\n    delete(value) {\n        return this._data.delete(value);\n    }\n\n    *entries() {\n        yield* this._data;\n    }\n\n    every(callbackFn, thisArg) {\n        for (const entry of this) {\n            if (!Reflect.apply(callbackFn, thisArg, [...entry, this])) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    forEach(callbackFn, thisArg) {\n        for (const entry of this) {\n            Reflect.apply(callbackFn, thisArg, [...entry, this]);\n        }\n    }\n\n    has(value) {\n        return this._data.has(value);\n    }\n\n    get(value) {\n        return this._data.get(value);\n    }\n\n    intersect(iterable) {\n        const multiset = (iterable instanceof Multiset)\n            ? iterable : new Multiset(iterable);\n        const intersection = new Multiset();\n        for (const [value, multiplicity] of this) {\n            if (multiset.has(value)) {\n                if (cmpStrs(multiplicity, multiset.get(value)) <= 0) {\n                    intersection.add(value, multiplicity);\n                } else {\n                    intersection.add(value, multiset.get(value));\n                }\n            }\n        }\n        return intersection;\n    }\n\n    isEmpty() {\n        return this._data.size === 0;\n    }\n\n    *keys() {\n        yield* this._data.keys();\n    }\n\n    map(callbackFn, thisArg) {\n        let skipValue = false;\n        function skip() {\n            skipValue = true;\n        }\n        const mapped = new Multiset();\n        for (const entry of this) {\n            const value = Reflect.apply(callbackFn, thisArg,\n                                        [...entry, this, skip]);\n            if (skipValue) {\n                skipValue = false;\n            } else {\n                mapped.add(value, entry[1]);\n            }\n        }\n        return mapped;\n    }\n\n    max(compareFn = ((a, b) => a > b)) {\n        let max = undefined;\n        const itr = this.values();\n        const first = itr.next();\n        if (!first.done) {\n            max = first.value;\n            for (const value of itr) {\n                if (compareFn(value, max) > 0) {\n                    max = value;\n                }\n            }\n        }\n        return max;\n    }\n\n    min(compareFn = ((a, b) => a > b)) {\n        let min = undefined;\n        const itr = this.values();\n        const first = itr.next();\n        if (!first.done) {\n            min = first.value;\n            for (const value of itr) {\n                if (compareFn(value, min) <= 0) {\n                    min = value;\n                }\n            }\n        }\n        return min;\n    }\n\n    permute(iterable, callbackFn = ((a, b) => a + b)) {\n        const multiset = (iterable instanceof Multiset)\n            ? iterable : new Multiset(iterable);\n        const permutation = new Multiset();\n        for (const [value1, multiplicity1] of this) {\n            for (const [value2, multiplicity2] of multiset) {\n                permutation.add(callbackFn(value1, value2),\n                                multiplyStrs(multiplicity1, multiplicity2));\n            }\n        }\n        return permutation;\n    }\n\n    get size() {\n        let size = \"0\";\n        for (const multiplicity of this.multiplicities()) {\n            size = addStrs(size, multiplicity);\n        }\n        return size;\n    }\n\n    reduce(callbackFn, initialValue) {\n        const itr = this.entries();\n        let total = initialValue;\n        if (initialValue === undefined) {\n            const first = itr.next();\n            if (first.done) return undefined;\n            total = first.value;\n        }\n        for (const entry of itr) {\n            total = callbackFn(total, ...entry, this);\n        }\n        return total;\n    }\n\n    scale(factor = \"1\") {\n        factor = String(factor);\n        const scaled = new Multiset();\n        for (const [value, multiplicity] of this) {\n            scaled.add(value, multiplyStrs(multiplicity, factor));\n        }\n        return scaled;\n    }\n\n    simplify() {\n        const simplified = new Multiset();\n        const itr = this.multiplicities();\n        const first = itr.next();\n        if (first.done) return simplified;\n        let gcd = first.value;\n        for (const multiplicity of itr) {\n            gcd = gcdStrs(gcd, multiplicity);\n        }\n        for (const [value, multiplicity] of this) {\n            simplified.add(value, divideStrs(multiplicity, gcd)[0]);\n        }\n        return simplified;\n    }\n\n    some(callbackFn, thisArg) {\n        for (const entry of this) {\n            if (Reflect.apply(callbackFn, thisArg, [...entry, this])) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    toString(toStringFn = (entry => entry.join(\":\")),\n             compareFn = (([a], [b]) => (a > b) - (b > a))) {\n        return Array.from(this)\n                    .sort(compareFn)\n                    .map(toStringFn)\n                    .join(\", \");\n    }\n\n    union(iterable) {\n        const multiset = (iterable instanceof Multiset)\n            ? iterable : new Multiset(iterable);\n        const union = new Multiset(this);\n        for (const entry of multiset) {\n            union.add(...entry);\n        }\n        return union;\n    }\n\n    *values() {\n        yield* this._data.keys();\n    }\n\n    *multiplicities() {\n        yield* this._data.values();\n    }\n\n    *[Symbol.iterator]() {\n        yield* this._data;\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Multiset.js","import Move from \"../Move\";\r\nimport {Gens, Stats, Types, damageVariation} from \"../utilities\";\r\nimport {\r\n    isAdamantType, isLustrousType,\r\n    isGriseousType, effectiveness\r\n} from \"../info\";\r\n\r\nconst {max, min, trunc} = Math;\r\n\r\nexport default function hgssCalculate(attacker, defender, move, field) {\r\n    let moveType = move.type();\r\n    let movePower = move.power();\r\n\r\n    if (movePower === 0) return [0];\r\n\r\n    if (move.isSound() && defender.ability.name === \"Soundproof\") {\r\n        return [0];\r\n    }\r\n\r\n    switch (move.name) {\r\n        case \"Hidden Power\":\r\n            movePower = Move.hiddenPowerBp(attacker.ivs, Gens.HGSS);\r\n            moveType = Move.hiddenPowerType(attacker.ivs, Gens.HGSS);\r\n            break;\r\n        case \"Reversal\":\r\n        case \"Flail\":\r\n            movePower = Move.flail(attacker.currentHp,\r\n                                   attacker.stat(Stats.HP),\r\n                                   Gens.HGSS);\r\n            break;\r\n        case \"Frustration\":\r\n            movePower = Move.frustration(attacker.happiness);\r\n            break;\r\n        case \"Return\":\r\n            movePower = Move.return(attacker.happiness);\r\n            break;\r\n        case \"Future Sight\":\r\n        case \"Doom Desire\":\r\n            moveType = Types.CURSE;\r\n            break;\r\n        case \"Magnitude\":\r\n            movePower = Move.magnitude(move.magnitude);\r\n            break;\r\n        case \"Present\":\r\n            movePower = move.present;\r\n            break;\r\n        case \"Weather Ball\":\r\n            moveType = Move.weatherBall(field.effectiveWeather());\r\n            movePower = moveType === Types.NORMAL ? 50 : 100;\r\n            break;\r\n        case \"Rollout\":\r\n        case \"Ice Ball\":\r\n            movePower = 30 * 2 ** ((move.rollout - 1) % 5 + move.defenseCurl);\r\n            break;\r\n        case \"Triple Kick\":\r\n            movePower = 10 * move.tripleKickCount;\r\n            break;\r\n        case \"Assurance\":\r\n            if (attacker.damagedPreviously) movePower *= 2;\r\n            break;\r\n        case \"Avalanche\":\r\n        case \"Revenge\":\r\n            if (attacker.damagedPreviously && !attacker.damagedByPainSplit) {\r\n                movePower *= 2;\r\n            }\r\n            break;\r\n        case \"Wring Out\":\r\n        case \"Crush Grip\":\r\n            movePower = 1 + trunc(defender.currentHp * 120\r\n                                  / max(1, defender.stat(Stats.HP)));\r\n            break;\r\n        case \"Water Spout\":\r\n        case \"Eruption\":\r\n            movePower = Move.eruption(attacker.currentHp,\r\n                                      attacker.stat(Stats.HP));\r\n            break;\r\n        case \"Brine\":\r\n            if (defender.currentHp * 2 <= defender.stat(Stats.HP)) {\r\n                movePower *= 2;\r\n            }\r\n            break;\r\n        case \"Echoed Voice\":\r\n            movePower = min(200, 40 + 40 * move.echoedVoice);\r\n            break;\r\n        case \"Facade\":\r\n            if (attacker.status) movePower *= 2;\r\n            break;\r\n        case \"Trump Card\":\r\n            movePower = Move.trumpCard(move.trumpPP);\r\n            break;\r\n        case \"Wake-Up Slap\":\r\n            if (defender.isAsleep()) movePower *= 2;\r\n            break;\r\n        case \"Smelling Salts\":\r\n            if (defender.isParalyzed()) movePower *= 2;\n            break;\r\n        case \"Gyro Ball\":\r\n            movePower = Move.gyroBall(attacker.speed(), defender.speed());\n            break;\n        case \"Low Kick\":\r\n        case \"Grass Knot\":\r\n            movePower = Move.grassKnot(defender.weight());\r\n            break;\r\n        case \"Fury Cutter\":\r\n            movePower = min(160, 10 * 2 ** move.furyCutter);\r\n            break;\r\n        case \"Punishment\":\r\n            movePower = Move.punishment(defender.boosts);\r\n            break;\r\n        case \"Pursuit\":\r\n            if (defender.switchedOut) movePower *= 2;\r\n            break;\r\n        case \"Spit Up\":\r\n            if (attacker.stockpile === 0) return [0];\r\n            movePower = 100 * attacker.stockpile;\r\n            break;\r\n        case \"Natural Gift\":\r\n            if (attacker.item.disabled || !attacker.item.isBerry()) return [0];\r\n            movePower = attacker.item.naturalGiftPower();\r\n            moveType = attacker.item.naturalGiftType();\r\n            break;\r\n        case \"Fling\":\r\n            movePower = attacker.item.flingPower();\r\n            break;\r\n        case \"Beat Up\":\r\n            moveType = Types.CURSE;\r\n            break;\r\n        case \"Judgment\":\r\n            if (attacker.item.plateType() > -1) {\r\n                moveType = attacker.item.plateType();\r\n            }\r\n            break;\r\n        case \"Seismic Toss\":\r\n        case \"Night Shade\":\r\n            return [attacker.level];\r\n        case \"Dragon Rage\":\r\n            return [40];\r\n        case \"Sonic Boom\":\r\n            return [20];\r\n        case \"Endeavor\":\r\n            return [max(0, defender.currentHp - attacker.currentHp)];\r\n        case \"Psywave\": {\r\n            const range = [];\r\n            for (let i = 0; i <= 10; i++) {\r\n                range.push(max(1, trunc(attacker.level * (10 * i + 50) / 100)));\r\n            }\r\n            return range;\r\n        }\r\n        case \"Super Fang\":\r\n            return [max(1, trunc(defender.currentHp / 2))];\r\n        default:\r\n            if (move.isOhko()) return [defender.stat(Stats.HP)];\r\n    }\r\n\r\n    if (move.dig && move.boostedByDig()\r\n        || move.dive && move.boostedByDive()\r\n        || move.fly && move.boostedByFly()\r\n        || move.minimize && move.boostedByMinimize()) {\r\n        movePower *= 2;\r\n    }\r\n\r\n    if (attacker.helpingHand) {\r\n        movePower = trunc(movePower * 3 / 2);\r\n    }\r\n\r\n    switch (attacker.item.name) {\r\n        case \"Muscle Band\":\r\n            if (move.isPhysical()) {\r\n                movePower = trunc(movePower * 11 / 10);\r\n            }\r\n            break;\r\n        case \"Wise Glasses\":\r\n            if (move.isSpecial()) {\r\n                movePower = trunc(movePower * 11 / 10);\r\n            }\r\n            break;\r\n        case \"Adamant Orb\":\r\n            if (attacker.name === \"Dialga\" && isAdamantType(moveType)) {\r\n                movePower = trunc(movePower * 12 / 10);\r\n            }\r\n            break;\r\n        case \"Lustrous Orb\":\r\n            if (attacker.name === \"Palkia\" && isLustrousType(moveType)) {\r\n                movePower = trunc(movePower * 12 / 10);\r\n            }\r\n            break;\r\n        case \"Griseous Orb\":\r\n            if (attacker.name.startsWith(\"Giratina\")\r\n                && isGriseousType(moveType)) {\r\n                movePower = trunc(movePower * 12 / 10);\r\n            }\r\n            break;\r\n        default:\r\n            if (attacker.item.boostedType() === moveType) {\r\n                movePower = trunc(movePower * 12 / 10);\r\n            }\r\n    }\r\n\r\n    if (attacker.charge && moveType === Types.ELECTRIC) {\r\n        movePower *= 2;\r\n    }\r\n\r\n    switch (attacker.ability.name) {\r\n        case \"Rivalry\":\r\n            if (attacker.gender && defender.gender) {\r\n                movePower *= attacker.gender === defender.gender ? 3 : 5;\r\n                movePower = trunc(movePower / 4);\r\n            }\r\n            break;\r\n        case \"Reckless\":\r\n            if (move.isRecklessBoosted()) {\r\n                movePower = trunc(movePower * 12 / 10);\r\n            }\r\n            break;\r\n        case \"Iron Fist\":\r\n            if (move.isPunch()) movePower = trunc(movePower * 12 / 10);\r\n            break;\r\n        case \"Technician\":\r\n            if (movePower <= 60) movePower = trunc(movePower * 3 / 2);\r\n            break;\r\n        /* no default */\r\n    }\r\n\r\n    switch (defender.ability.name) {\r\n        case \"Heatproof\":\r\n            if (moveType === Types.FIRE) {\r\n                movePower = trunc(movePower / 2);\r\n            }\r\n            break;\r\n        case \"Thick Fat\":\r\n            if (moveType === Types.FIRE || moveType === Types.ICE) {\r\n                movePower = trunc(movePower / 2);\r\n            }\r\n            break;\r\n        case \"Dry Skin\":\r\n            if (moveType === Types.FIRE) {\r\n                movePower = trunc(movePower * 5 / 4);\r\n            }\r\n            break;\r\n        /* no default */\r\n    }\r\n\r\n    if (field.mudSport && moveType === Types.ELECTRIC) {\r\n        movePower = trunc(movePower / 2);\r\n    }\r\n\r\n    if (field.waterSport && moveType === Types.FIRE) {\r\n        movePower = trunc(movePower / 2);\r\n    }\r\n\r\n    let atk, def, sdef, satk;\r\n    const unawareA = attacker.ability.name === \"Unaware\";\r\n    const unawareD = defender.ability.name === \"Unaware\";\r\n    if (move.critical) {\r\n        if (unawareA) {\r\n            def = defender.stat(Stats.DEF);\r\n            sdef = defender.stat(Stats.SDEF);\r\n        } else {\r\n            def = min(defender.stat(Stats.DEF),\r\n                      defender.boostedStat(Stats.DEF));\r\n            sdef = min(defender.stat(Stats.SDEF),\r\n                       defender.boostedStat(Stats.SDEF));\r\n        }\r\n        if (unawareD) {\r\n            atk = attacker.stat(Stats.ATK);\r\n            satk = attacker.stat(Stats.SATK);\r\n        } else {\r\n            atk = max(attacker.stat(Stats.ATK),\r\n                      attacker.boostedStat(Stats.ATK));\r\n            satk = max(attacker.stat(Stats.SATK),\r\n                       attacker.boostedStat(Stats.SATK));\r\n        }\r\n    } else {\r\n        if (unawareA) {\r\n            def = defender.stat(Stats.DEF);\r\n            sdef = defender.stat(Stats.SDEF);\r\n        } else {\r\n            def = defender.boostedStat(Stats.DEF);\r\n            sdef = defender.boostedStat(Stats.SDEF);\r\n        }\r\n        if (unawareD) {\r\n            atk = attacker.stat(Stats.ATK);\r\n            satk = attacker.stat(Stats.SATK);\r\n        } else {\r\n            atk = attacker.boostedStat(Stats.ATK);\r\n            satk = attacker.boostedStat(Stats.SATK);\r\n        }\r\n    }\r\n\r\n    if (attacker.ability.name === \"Huge Power\"\r\n        || attacker.ability.name === \"Pure Power\") {\r\n        atk *= 2;\r\n    }\r\n\r\n    if (attacker.flowerGift && field.sun()) {\r\n        atk *= 2;\r\n    }\r\n\r\n    switch (attacker.ability.name) {\r\n        case \"Guts\":\r\n            if (attacker.status) atk = trunc(atk * 3 / 2);\r\n            break;\r\n        case \"Hustle\":\r\n            atk = trunc(atk * 3 / 2);\r\n            break;\r\n        case \"Slow Start\":\r\n            if (field.slowStart) atk = trunc(atk / 2);\r\n            break;\r\n        case \"Plus\":\r\n            if (attacker.minus) satk = trunc(satk * 3 / 2);\r\n            break;\r\n        case \"Minus\":\r\n            if (attacker.plus) satk = trunc(satk * 3 / 2);\r\n            break;\r\n        case \"Solar Power\":\r\n            if (field.sun()) satk *= 2;\r\n            break;\r\n        /* no default */\r\n    }\r\n\n    switch (attacker.item.name) {\n        case \"Choice Band\":\n            atk = trunc(atk * 3 / 2);\n            break;\n        case \"Choice Specs\":\n            satk = trunc(satk * 3 / 2);\n            break;\n        case \"Soul Dew\":\n            if (attacker.name === \"Latias\" || attacker.name === \"Latios\") {\n                satk = trunc(satk * 3 / 2);\n            }\n            break;\n        case \"Deep Sea Tooth\":\n            if (attacker.name === \"Clamperl\") satk *= 2;\n            break;\n        default:\n            if (attacker.thickClubBoosted()) {\n                atk *= 2;\n            } else if (attacker.lightBallBoosted()) {\n                atk *= 2;\n                satk *= 2;\n            }\n    }\r\n\r\n    if (move.name === \"Explosion\" || move.name === \"Self-Destruct\") {\r\n        if (defender.ability.name === \"Damp\") {\r\n            return [0];\r\n        }\r\n        def = trunc(def / 2);\r\n    }\r\n\r\n    if (defender.ability.name === \"Marvel Scale\" && defender.status) {\r\n        def = trunc(def * 3 / 2);\r\n    }\r\n\r\n    if (defender.flowerGift && field.sun()) {\r\n        sdef = trunc(sdef * 3 / 2);\r\n    }\r\n\r\n    switch (defender.item.name) {\r\n        case \"Metal Powder\":\r\n            if (defender.name === \"Ditto\") def *= 2;\r\n            break;\r\n        case \"Soul Dew\":\r\n            if (defender.name === \"Latias\" || defender.name === \"Latios\") {\r\n                sdef = trunc(sdef * 3 / 2);\r\n            }\r\n            break;\r\n        case \"Deep Sea Scale\":\r\n            if (defender.name === \"Clamperl\") sdef *= 2;\r\n            break;\r\n        /* no default */\r\n    }\r\n\r\n    if (field.sand() && defender.stab(Types.ROCK)) {\r\n        sdef = trunc(sdef * 3 / 2);\r\n    }\r\n\r\n    let a, d, lvl;\r\n    if (move.name === \"Beat Up\") {\r\n        a = attacker.beatUpStats[move.beatUpHit];\r\n        d = defender.baseStat(Stats.DEF);\r\n        lvl = attacker.beatUpLevels[move.beatUpHit];\r\n    } else if (move.isPhysical()) {\r\n        a = atk;\r\n        d = def;\r\n        lvl = attacker.level;\r\n    } else if (move.isSpecial()) {\r\n        a = satk;\r\n        d = sdef;\r\n        lvl = attacker.level;\r\n    } else {\r\n        return [0];\r\n    }\r\n\r\n    let baseDamage = trunc(trunc(trunc(2 * lvl / 5 + 2)\r\n                                 * movePower * a / d) / 50);\r\n\r\n    if (move.name !== \"Beat Up\") {\r\n        if (attacker.isBurned() && move.isPhysical()\r\n            && attacker.ability.name !== \"Guts\") {\r\n            baseDamage = trunc(baseDamage / 2);\r\n        }\r\n\r\n        if (!move.critical\r\n            && (defender.reflect && move.isPhysical()\r\n                || defender.lightScreen && move.isSpecial())) {\r\n            if (field.multiBattle) {\r\n                baseDamage = trunc(baseDamage * 2 / 3);\r\n            } else {\r\n                baseDamage = trunc(baseDamage / 2);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (field.multiBattle && move.hasMultipleTargets()) {\r\n        baseDamage = trunc(baseDamage * 3 / 4);\r\n    }\r\n\r\n    if (move.name !== \"Weather Ball\") {\r\n        if (field.sun()) {\r\n            if (moveType === Types.FIRE) {\r\n                baseDamage = trunc(baseDamage * 3 / 2);\r\n            } else if (moveType === Types.WATER) {\r\n                baseDamage = trunc(baseDamage / 2);\r\n            }\r\n        } else if (field.rain()) {\r\n            if (moveType === Types.WATER) {\r\n                baseDamage = trunc(baseDamage * 3 / 2);\r\n            } else if (moveType === Types.FIRE) {\r\n                baseDamage = trunc(baseDamage / 2);\r\n            }\r\n        }\r\n        if (!field.sun() && !field.isClearWeather()\r\n            && move.name === \"Solar Beam\") {\r\n            baseDamage = trunc(baseDamage / 2);\r\n        }\r\n    }\r\n\r\n    if (attacker.flashFire && moveType === Types.FIRE\r\n        && attacker.ability.name === \"Flash Fire\") {\r\n        baseDamage = trunc(baseDamage * 3 / 2);\r\n    }\r\n\r\n    baseDamage += 2;\r\n\r\n    if (move.critical) {\r\n        baseDamage *= attacker.ability.name === \"Sniper\" ? 3 : 2;\r\n    }\r\n\r\n    if (move.name !== \"Beat Up\") {\r\n        if (attacker.item.name === \"Life Orb\") {\r\n            baseDamage = trunc(baseDamage * 13 / 10);\r\n        } else if (attacker.item.name === \"Metronome\") {\r\n            const m = min(20, 10 + attacker.metronome);\r\n            baseDamage = trunc(baseDamage * m / 10);\r\n        }\r\n\r\n        if (move.meFirst) {\r\n            baseDamage = trunc(baseDamage * 3 / 2);\r\n        }\r\n    }\r\n\r\n    let damages = damageVariation(baseDamage, 85, 100);\r\n\r\n    if (attacker.stab(moveType)) {\r\n        damages = damages.map(d => trunc(d * 3 / 2));\r\n    }\r\n\r\n    let eff = effectiveness(moveType, defender.types(), {\r\n        gen: Gens.HGSS,\r\n        foresight: defender.foresight,\r\n        scrappy: attacker.ability.name === \"Scrappy\",\r\n        gravity: field.gravity\r\n    });\r\n    if (moveType === defender.ability.immunityType()) {\r\n        eff = {num: 0, den: 2};\r\n    }\r\n    if (eff.num === 0) return [0];\r\n    damages = damages.map(d => trunc(d * eff.num / eff.den));\r\n\r\n    if (eff.num > eff.den) {\r\n        if (defender.ability.reducesSuperEffective()) {\r\n            damages = damages.map(d => trunc(d * 3 / 4));\r\n        }\r\n\r\n        if (attacker.item.name === \"Expert Belt\") {\r\n            damages = damages.map(d => trunc(d * 12 / 10));\r\n        }\r\n\r\n        if (defender.item.berryTypeResist() === moveType) {\r\n            damages = damages.map(d => trunc(d / 2));\r\n        }\r\n    } else if (eff.num < eff.den && attacker.ability.name === \"Tinted Lens\") {\r\n        damages = damages.map(d => 2 * d);\r\n    }\r\n\r\n    if (defender.item.berryTypeResist() === Types.NORMAL\r\n        && moveType === Types.NORMAL) {\r\n        damages = damages.map(d => trunc(d / 2));\r\n    }\r\n\r\n    return damages;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/calculate/hgssCalculate.js","import Move from \"../Move\";\r\n\r\nimport {\r\n    Gens, Stats, Types, applyMod, chainMod,\r\n    roundHalfToZero, damageVariation\r\n} from \"../utilities\";\r\n\r\nimport {\r\n    isSandForceType, isLustrousType, isAdamantType,\r\n    isGriseousType, effectiveness\r\n} from \"../info\";\r\n\r\nconst {max, min, trunc} = Math;\r\n\r\nexport default function orasCalculate(attacker, defender, move, field) {\r\n    let moveType = move.type();\r\n    let movePower = move.power();\r\n\r\n    if (movePower === 0) return [0];\r\n\r\n    switch (move.name) {\r\n        case \"Weather Ball\":\r\n            moveType = Move.weatherBall(field.effectiveWeather());\r\n            movePower = moveType === Types.NORMAL ? 50 : 100;\r\n            break;\r\n        case \"Frustration\":\r\n            movePower = Move.frustration(attacker.happiness);\r\n            break;\r\n        case \"Return\":\r\n            movePower = Move.return(attacker.happiness);\r\n            break;\r\n        case \"Payback\":\r\n            if (defender.movedFirst) movePower *= 2;\r\n            break;\r\n        case \"Electro Ball\":\r\n            movePower = Move.electroBall(attacker.speed(), defender.speed());\r\n            break;\r\n        case \"Assurance\":\r\n            if (attacker.damagedPreviously) movePower *= 2;\r\n            break;\r\n        case \"Avalanche\":\r\n        case \"Revenge\":\r\n            if (attacker.damagedPreviously && !attacker.damagedByPainSplit) {\r\n                movePower *= 2;\r\n            }\r\n            break;\r\n        case \"Gyro Ball\":\r\n            movePower = Move.gyroBall(attacker.speed(), defender.speed());\r\n            break;\r\n        case \"Water Spout\":\r\n        case \"Eruption\":\r\n            movePower = Move.eruption(attacker.currentHp,\r\n                                      attacker.stat(Stats.HP));\r\n            break;\r\n        case \"Punishment\":\r\n            movePower = Move.punishment(defender.boosts);\r\n            break;\r\n        case \"Fury Cutter\":\r\n            movePower = min(160, 40 * 2 ** move.furyCutter);\r\n            break;\r\n        case \"Low Kick\":\r\n        case \"Grass Knot\":\r\n            movePower = Move.grassKnot(defender.weight());\r\n            break;\r\n        case \"Echoed Voice\":\r\n            movePower = min(200, 40 + 40 * move.echoedVoice);\r\n            break;\r\n        case \"Hex\":\r\n            if (defender.status) movePower *= 2;\r\n            break;\r\n        case \"Wring Out\":\r\n        case \"Crush Grip\":\r\n            movePower = max(1, roundHalfToZero(120 * defender.currentHp\r\n                                               / defender.stat(Stats.HP)));\r\n            break;\r\n        case \"Heavy Slam\":\r\n        case \"Heat Crash\":\r\n            movePower = Move.heavySlam(attacker.weight(), defender.weight());\r\n            break;\r\n        case \"Stored Power\":\r\n            movePower = Move.storedPower(attacker.boosts);\r\n            break;\r\n        case \"Flail\":\r\n        case \"Reversal\":\r\n            movePower = Move.flail(attacker.currentHp,\r\n                                   attacker.stat(Stats.HP),\r\n                                   Gens.ORAS);\r\n            break;\r\n        case \"Trump Card\":\r\n            movePower = Move.trumpCard(move.trumpPP);\r\n            break;\r\n        case \"Round\":\r\n            if (move.roundBoost) movePower *= 2;\r\n            break;\r\n        case \"Wake-Up Slap\":\r\n            if (defender.isAsleep()) movePower *= 2;\r\n            break;\r\n        case \"Smelling Salts\":\r\n            if (defender.isParalyzed()) movePower *= 2;\r\n            break;\r\n        case \"Beat Up\": {\r\n            const stat = attacker.beatUpStats[move.beatUpHit];\r\n            movePower = trunc(stat / 10) + 5;\r\n            break;\r\n        }\r\n        case \"Hidden Power\":\r\n            movePower = Move.hiddenPowerBp(attacker.ivs, Gens.ORAS);\r\n            moveType = Move.hiddenPowerType(attacker.ivs, Gens.ORAS);\r\n            break;\r\n        case \"Spit Up\":\r\n            if (attacker.stockpile === 0) return [0];\r\n            movePower = 100 * attacker.stockpile;\r\n            break;\r\n        case \"Pursuit\":\r\n            movePower *= 2;\r\n            break;\r\n        case \"Present\":\r\n            movePower = move.present;\r\n            break;\r\n        case \"Natural Gift\":\r\n            if (attacker.item.disabled || !attacker.item.isBerry()) return [0];\r\n            movePower = attacker.item.naturalGiftPower();\r\n            moveType = attacker.item.naturalGiftType();\r\n            break;\r\n        case \"Magnitude\":\r\n            movePower = Move.magnitude(move.magnitude);\r\n            break;\r\n        case \"Rollout\":\r\n        case \"Ice Ball\":\r\n            movePower = 30 * 2 ** ((move.rollout - 1) % 5 + move.defenseCurl);\r\n            break;\r\n        case \"Fling\":\r\n            movePower = attacker.item.flingPower();\r\n            break;\r\n        case \"Fire Pledge\":\r\n        case \"Water Pledge\":\r\n        case \"Grass Pledge\":\r\n            if (move.pledgeBoost) movePower *= 2;\r\n            break;\r\n        case \"Triple Kick\":\r\n            movePower = 10 * move.tripleKickCount;\r\n            break;\r\n        case \"Judgment\":\r\n            if (attacker.item.plateType() > -1) {\r\n                moveType = attacker.item.plateType();\r\n            }\r\n            break;\r\n        case \"Seismic Toss\":\r\n        case \"Night Shade\":\r\n            return [attacker.level];\r\n        case \"Dragon Rage\":\r\n            return [40];\r\n        case \"Sonic Boom\":\r\n            return [20];\r\n        case \"Endeavor\":\r\n            return [max(0, defender.currentHp - attacker.currentHp)];\r\n        case \"Psywave\": {\r\n            const range = [];\r\n            for (let i = 0; i <= 100; i++) {\r\n                range.push(max(1, trunc(attacker.level * (i + 50) / 100)));\r\n            }\r\n            return range;\r\n        }\r\n        case \"Super Fang\":\r\n            return [max(1, trunc(defender.currentHp / 2))];\r\n        case \"Self-Destruct\":\r\n        case \"Explosion\":\r\n            if (defender.ability.name === \"Damp\") return [0];\r\n            break;\r\n        case \"Final Gambit\":\r\n            return [attacker.currentHp];\r\n        default:\r\n            if (move.isOhko()) {\r\n                return [defender.stat(Stats.HP)];\r\n            }\n            if (move.isSound() && defender.ability.name === \"Soundproof\"\n                || move.isBall() && defender.ability.name === \"Bulletproof\") {\n                return [0];\n            }\n            if (move.fly && move.boostedByFly()) {\n                movePower *= 2;\n            }\r\n    }\r\n\r\n    const gemBoost = moveType === attacker.item.gemType();\r\n    attacker.item.used = attacker.item.used || gemBoost;\r\n\r\n    if (move.name === \"Acrobatics\" && attacker.item.name === \"(No Item)\") {\r\n        movePower *= 2;\r\n    }\r\n\r\n    let movePowerMod = 0x1000;\n\n    switch (attacker.ability.name) {\r\n        case \"Technician\":\r\n            if (movePower <= 60) {\r\n                movePowerMod = chainMod(0x1800, movePowerMod);\r\n            }\r\n            break;\r\n        case \"Flare Boost\":\r\n            if (attacker.isBurned() && move.isSpecial()) {\r\n                movePowerMod = chainMod(0x1800, movePowerMod);\r\n            }\r\n            break;\r\n        case \"Analytic\":\r\n            if (defender.movedFirst) {\r\n                movePowerMod = chainMod(0x14CD, movePowerMod);\r\n            }\r\n            break;\r\n        case \"Reckless\":\r\n            if (move.isRecklessBoosted()) {\r\n                movePowerMod = chainMod(0x1333, movePowerMod);\r\n            }\r\n            break;\r\n        case \"Iron Fist\":\r\n            if (move.isPunch()) {\n                movePowerMod = chainMod(0x1333, movePowerMod);\n            }\r\n            break;\r\n        case \"Toxic Boost\":\r\n            if ((attacker.isPoisoned() || attacker.isBadlyPoisoned())\r\n                && move.isPhysical()) {\r\n                movePowerMod = chainMod(0x1800, movePowerMod);\r\n            }\r\n            break;\r\n        case \"Rivalry\":\r\n            if (attacker.gender && defender.gender) {\r\n                const m = attacker.gender === defender.gender ? 0xC00 : 0x1400;\r\n                movePowerMod = chainMod(m, movePowerMod);\r\n            }\r\n            break;\r\n        case \"Sand Force\":\r\n            if (field.sand() && isSandForceType(moveType)) {\r\n                movePowerMod = chainMod(0x14CD, movePowerMod);\r\n            }\r\n            break;\r\n        case \"Normalize\":\r\n            moveType = Types.NORMAL;\r\n            break;\n        case \"Tough Claws\":\n            if (move.isContact()) {\n                movePowerMod = chainMod(0x1555, movePowerMod);\n            }\n            break;\n        case \"Strong Jaw\":\n            if (move.isBite()) {\n                movePowerMod = chainMod(0x1800, movePowerMod);\n            }\n            break;\n        case \"Mega Launcher\":\n            if (move.isPulse()) {\n                movePowerMod = chainMod(0x1800, movePowerMod);\n            }\n            break;\n        case \"Parental Bond\":\n            if (move.secondHit) {\n                movePowerMod = chainMod(0x800, movePowerMod);\n            }\n            break;\n        default:\n            if (attacker.ability.normalToType() > -1\n                && moveType === Types.NORMAL) {\n                // refrigerate, etc.\n                movePowerMod = chainMod(0x14CD, movePowerMod);\r\n                moveType = attacker.ability.normalToType();\n            }\r\n    }\n\r\n    if (moveType === Types.FIRE) {\r\n        if (defender.ability.name === \"Heatproof\") {\r\n            movePowerMod = chainMod(0x800, movePowerMod);\r\n        } else if (defender.ability.name === \"Dry Skin\") {\r\n            movePowerMod = chainMod(0x1400, movePowerMod);\r\n        }\r\n    }\r\n\r\n    if (attacker.ability.name === \"Sheer Force\"\r\n        && move.affectedBySheerForce()) {\r\n        movePowerMod = chainMod(0x14CD, movePowerMod);\r\n    }\n\r\n    switch (attacker.item.name) {\r\n        case \"Muscle Band\":\r\n            if (move.isPhysical()) {\r\n                movePowerMod = chainMod(0x1199, movePowerMod);\r\n            }\r\n            break;\r\n        case \"Wise Glasses\":\r\n            if (move.isSpecial()) {\r\n                movePowerMod = chainMod(0x1199, movePowerMod);\r\n            }\r\n            break;\r\n        case \"Adamant Orb\":\r\n            if (attacker.name === \"Dialga\" && isAdamantType(moveType)) {\r\n                movePowerMod = chainMod(0x1333, movePowerMod);\r\n            }\r\n            break;\r\n        case \"Lustrous Orb\":\r\n            if (attacker.name === \"Palkia\" && isLustrousType(moveType)) {\r\n                movePowerMod = chainMod(0x1333, movePowerMod);\r\n            }\r\n            break;\r\n        case \"Griseous Orb\":\r\n            if (attacker.name.startsWith(\"Giratina\")\r\n                && isGriseousType(moveType)) {\r\n                movePowerMod = chainMod(0x1333, movePowerMod);\r\n            }\r\n            break;\r\n        default:\r\n            if (gemBoost) {\r\n                movePowerMod = chainMod(0x14CD, movePowerMod);\r\n            } else if (attacker.item.boostedType() === moveType) {\r\n                movePowerMod = chainMod(0x1333, movePowerMod);\r\n            }\r\n    }\n\r\n    switch (move.name) {\r\n        case \"Facade\":\r\n            if (attacker.status) {\r\n                movePowerMod = chainMod(0x2000, movePowerMod);\r\n            }\r\n            break;\r\n        case \"Brine\":\r\n            if (defender.currentHp * 2 <= defender.stat(Stats.HP)) {\r\n                movePowerMod = chainMod(0x2000, movePowerMod);\r\n            }\r\n            break;\r\n        case \"Venoshock\":\r\n            if (attacker.isPoisoned() || attacker.isBadlyPoisoned()) {\r\n                movePowerMod = chainMod(0x2000, movePowerMod);\r\n            }\r\n            break;\r\n        case \"Retaliate\":\r\n            if (move.previouslyFainted) {\r\n                movePowerMod = chainMod(0x2000, movePowerMod);\r\n            }\r\n            break;\r\n        case \"Fusion Bolt\":\r\n            if (move.fusionFlare) {\r\n                movePowerMod = chainMod(0x2000, movePowerMod);\r\n            }\r\n            break;\r\n        case \"Fusion Flare\":\r\n            if (move.fusionBolt) {\r\n                movePowerMod = chainMod(0x2000, movePowerMod);\r\n            }\r\n            break;\r\n        case \"Knock Off\":\r\n            if (defender.knockOffBoost()) {\r\n                movePowerMod = chainMod(0x1800, movePowerMod);\r\n            }\r\n            break;\r\n        case \"Earthquake\":\r\n        case \"Magnitude\":\r\n        case \"Bulldoze\":\r\n            if (field.grassyTerrain) {\r\n                movePowerMod = chainMod(0x800, movePowerMod);\r\n            }\r\n            break;\r\n        /* no default */\r\n    }\n\r\n    if (move.meFirst) {\r\n        movePowerMod = chainMod(0x1800, movePowerMod);\r\n    }\r\n\r\n    if (!field.sun() && !field.isClearWeather() && move.name === \"Solar Beam\") {\r\n        movePowerMod = chainMod(0x800, movePowerMod);\r\n    }\r\n\r\n    if (attacker.charge && moveType === Types.ELECTRIC) {\r\n        movePowerMod = chainMod(0x2000, movePowerMod);\r\n    }\r\n\r\n    if (attacker.helpingHand) {\r\n        movePowerMod = chainMod(0x1800, movePowerMod);\r\n    }\r\n\r\n    if (field.waterSport && moveType === Types.FIRE) {\r\n        movePowerMod = chainMod(0x548, movePowerMod);\r\n    }\r\n\r\n    if (field.mudSport && moveType === Types.ELECTRIC) {\r\n        movePowerMod = chainMod(0x548, movePowerMod);\r\n    }\r\n\r\n    if (field.grassyTerrain && attacker.grounded && moveType === Types.GRASS) {\r\n        movePowerMod = chainMod(0x1800, movePowerMod);\r\n    }\r\n\r\n    if (field.electricTerrain && attacker.grounded\r\n        && moveType === Types.ELECTRIC) {\r\n        movePowerMod = chainMod(0x1800, movePowerMod);\r\n    }\r\n\r\n    if (field.mistyTerrain && defender.grounded && moveType === Types.DRAGON) {\n        movePowerMod = chainMod(0x800, movePowerMod);\r\n    }\r\n\r\n    if (field.ionDeluge && moveType === Types.NORMAL) {\r\n        moveType = Types.ELECTRIC;\r\n    }\r\n\r\n    if (attacker.electrify) {\r\n        moveType = Types.ELECTRIC;\r\n    }\r\n\r\n    movePower = max(1, applyMod(movePowerMod, movePower));\r\n\r\n    const defStat = field.wonderRoom ? Stats.SDEF : Stats.DEF;\r\n    const sdefStat = field.wonderRoom ? Stats.DEF : Stats.SDEF;\r\n    const unawareA = attacker.ability.name === \"Unaware\";\r\n    const unawareD = defender.ability.name === \"Unaware\";\r\n    let atk, def, satk, sdef;\r\n    if (move.name === \"Foul Play\") {\r\n        if (unawareA) {\r\n            def = defender.stat(defStat);\r\n            sdef = defender.stat(sdefStat);\r\n            atk = defender.stat(Stats.ATK);\r\n        } else if (move.critical) {\r\n            def = min(defender.stat(defStat),\r\n                      defender.boostedStat(defStat));\r\n            sdef = min(defender.stat(sdefStat),\r\n                       defender.boostedStat(sdefStat));\r\n            atk = max(defender.stat(Stats.ATK),\r\n                      defender.boostedStat(Stats.ATK));\r\n        } else {\r\n            def = defender.boostedStat(defStat);\r\n            sdef = defender.boostedStat(sdefStat);\r\n            atk = defender.boostedStat(Stats.ATK);\r\n        }\r\n\r\n        if (unawareD) {\r\n            satk = attacker.stat(Stats.SATK);\r\n        } else if (move.critical) {\r\n            satk = max(attacker.stat(Stats.SATK),\r\n                       attacker.boostedStat(Stats.SATK));\r\n        } else {\r\n            satk = attacker.boostedStat(Stats.SATK);\r\n        }\r\n    } else if (move.ignoresDefenseBoosts()) {\r\n        def = defender.stat(defStat);\r\n        sdef = defender.stat(sdefStat);\r\n\r\n        if (unawareD) {\r\n            atk = attacker.stat(Stats.ATK);\r\n            satk = attacker.stat(Stats.SATK);\r\n        } else if (move.critical) {\r\n            atk = max(attacker.stat(Stats.ATK),\r\n                      attacker.boostedStat(Stats.ATK));\r\n            satk = max(attacker.stat(Stats.SATK),\r\n                       attacker.boostedStat(Stats.SATK));\r\n        } else {\r\n            atk = attacker.boostedStat(Stats.ATK);\r\n            satk = attacker.boostedStat(Stats.SATK);\r\n        }\r\n    } else {\r\n        if (unawareA) {\r\n            def = defender.stat(defStat);\r\n            sdef = defender.stat(sdefStat);\r\n        } else if (move.critical) {\r\n            def = min(defender.stat(defStat),\r\n                      defender.boostedStat(defStat));\r\n            sdef = min(defender.stat(sdefStat),\r\n                       defender.boostedStat(sdefStat));\r\n        } else {\r\n            def = defender.boostedStat(defStat);\r\n            sdef = defender.boostedStat(sdefStat);\r\n        }\r\n\r\n        if (unawareD) {\r\n            atk = attacker.stat(Stats.ATK);\r\n            satk = attacker.stat(Stats.SATK);\r\n        } else if (move.critical) {\r\n            atk = max(attacker.stat(Stats.ATK),\r\n                      attacker.boostedStat(Stats.ATK));\r\n            satk = max(attacker.stat(Stats.SATK),\r\n                       attacker.boostedStat(Stats.SATK));\r\n        } else {\r\n            atk = attacker.boostedStat(Stats.ATK);\r\n            satk = attacker.boostedStat(Stats.SATK);\r\n        }\r\n    }\r\n\r\n    let atkMod = 0x1000;\r\n    let satkMod = 0x1000;\r\n\r\n    if (defender.ability.name === \"Thick Fat\"\r\n        && (moveType === Types.FIRE || moveType === Types.ICE)) {\r\n        atkMod = chainMod(0x800, atkMod);\r\n        satkMod = chainMod(0x800, satkMod);\r\n    }\r\n\r\n    switch (attacker.ability.name) {\r\n        case \"Guts\":\r\n            if (defender.status) atkMod = chainMod(0x1800, atkMod);\r\n            break;\r\n        case \"Plus\":\r\n            if (attacker.minus) satkMod = chainMod(0x1800, satkMod);\r\n            break;\r\n        case \"Minus\":\r\n            if (attacker.plus) satkMod = chainMod(0x1800, satkMod);\r\n            break;\r\n        case \"Defeatist\":\r\n            if (attacker.currentHp * 2 <= attacker.stat(Stats.HP)) {\r\n                atkMod = chainMod(0x800, atkMod);\r\n                satkMod = chainMod(0x800, satkMod);\r\n            }\r\n            break;\r\n        case \"Huge Power\":\r\n        case \"Pure Power\":\r\n            atkMod = chainMod(0x2000, atkMod);\r\n            break;\r\n        case \"Solar Power\":\r\n            if (field.sun()) satkMod = chainMod(0x1800, satkMod);\r\n            break;\r\n        case \"Hustle\":\r\n            atk = applyMod(0x1800, atk);\r\n            break;\r\n        case \"Flash Fire\":\r\n            if (attacker.flashFire && moveType === Types.FIRE) {\r\n                atkMod = chainMod(0x1800, atkMod);\r\n                satkMod = chainMod(0x1800, satkMod);\r\n            }\r\n            break;\r\n        case \"Slow Start\":\r\n            if (attacker.slowStart) atkMod = chainMod(0x800, atkMod);\r\n            break;\r\n        default:\r\n            if (attacker.pinchAbilityActivated(moveType)) {\r\n                // blaze, torrent, overgrow, ...\r\n                atkMod = chainMod(0x1800, atkMod);\r\n                satkMod = chainMod(0x1800, satkMod);\r\n            }\r\n    }\r\n\r\n    if (attacker.flowerGift && field.sun()) {\r\n        atkMod = chainMod(0x1800, atkMod);\r\n    }\r\n\r\n    switch (attacker.item.name) {\r\n        case \"Deep Sea Tooth\":\r\n            if (attacker.name === \"Clamperl\") {\r\n                satkMod = chainMod(0x2000, satkMod);\r\n            }\r\n            break;\r\n        case \"Soul Dew\":\r\n            if (attacker.name === \"Latias\" || attacker.name === \"Latios\") {\r\n                satkMod = chainMod(0x1800, satkMod);\r\n            }\r\n            break;\r\n        case \"Choice Band\":\r\n            atkMod = chainMod(0x1800, atkMod);\r\n            break;\r\n        case \"Choice Specs\":\r\n            satkMod = chainMod(0x1800, satkMod);\r\n            break;\r\n        default:\r\n            if (attacker.thickClubBoosted()) {\r\n                atkMod = chainMod(0x2000, atkMod);\r\n            } else if (attacker.lightBallBoosted()) {\r\n                atkMod = chainMod(0x2000, atkMod);\r\n                satkMod = chainMod(0x2000, satkMod);\r\n            }\r\n    }\r\n\r\n    atk = applyMod(atkMod, atk);\r\n    satk = applyMod(satkMod, satk);\r\n\r\n    if (field.sand() && defender.stab(Types.ROCK)) {\r\n        sdef = applyMod(0x1800, sdef);\r\n    }\r\n\r\n    let defMod = 0x1000;\r\n    let sdefMod = 0x1000;\r\n\r\n    if (defender.ability.name === \"Marvel Scale\" && defender.status) {\r\n        defMod = chainMod(0x1800, defMod);\r\n    } else if (defender.ability.name === \"Grass Pelt\" && field.grassyTerrain) {\r\n        defMod = chainMod(0x1800, defMod);\r\n    }\r\n\r\n    if (defender.flowerGift && field.sun()) {\r\n        sdefMod = chainMod(0x1800, sdefMod);\r\n    }\r\n\r\n    switch (defender.item.name) {\r\n        case \"Deep Sea Scale\":\r\n            if (defender.name === \"Clamperl\") {\r\n                sdefMod = chainMod(0x1800, sdefMod);\r\n            }\r\n            break;\r\n        case \"Metal Powder\":\r\n            if (defender.name === \"Ditto\") {\r\n                defMod = chainMod(0x2000, defMod);\r\n            }\r\n            break;\r\n        case \"Eviolite\":\r\n            if (defender.hasEvolution()) {\r\n                defMod = chainMod(0x1800, defMod);\r\n                sdefMod = chainMod(0x1800, sdefMod);\r\n            }\r\n            break;\r\n        case \"Soul Dew\":\r\n            if (defender.name === \"Latias\" || defender.name === \"Latios\") {\r\n                sdefMod = chainMod(0x1800, sdefMod);\r\n            }\r\n            break;\r\n        case \"Assault Vest\":\r\n            sdefMod = chainMod(0x1800, sdefMod);\r\n            break;\r\n        /* no default */\r\n    }\r\n\r\n    def = applyMod(defMod, def);\r\n    sdef = applyMod(sdefMod, sdef);\r\n\r\n    let a = 0, d = 0;\r\n    if (move.isPsyshockLike()) {\r\n        a = satk;\r\n        d = def;\r\n    } else if (move.isPhysical()) {\r\n        a = atk;\r\n        d = def;\r\n    } else if (move.isSpecial()) {\r\n        a = satk;\r\n        d = sdef;\r\n    } else {\r\n        return [0];\r\n    }\r\n\r\n    let baseDamage = trunc(trunc(trunc(2 * attacker.level / 5 + 2)\r\n                                 * movePower * a / d) / 50) + 2;\r\n\r\n    if (field.multiBattle && move.hasMultipleTargets()) {\r\n        baseDamage = applyMod(0xC00, baseDamage);\r\n    }\r\n\r\n    if (move.name !== \"Weather Ball\") {\r\n        if (field.harshSun() && moveType === Types.WATER) {\r\n            return [0];\r\n        } else if (field.heavyRain() && moveType === Types.FIRE) {\r\n            return [0];\r\n        } else if (field.sun()) {\r\n            if (moveType === Types.FIRE) {\r\n                baseDamage = applyMod(0x1800, baseDamage);\r\n            } else if (moveType === Types.WATER) {\r\n                baseDamage = applyMod(0x800, baseDamage);\r\n            }\r\n        } else if (field.rain()) {\r\n            if (moveType === Types.WATER) {\r\n                baseDamage = applyMod(0x1800, baseDamage);\r\n            } else if (moveType === Types.FIRE) {\r\n                baseDamage = applyMod(0x800, baseDamage);\r\n            }\r\n        } else if (field.strongWinds() && defender.stab(Types.FLYING)) {\r\n            const eff = effectiveness(moveType, Types.FLYING, {gen: Gens.ORAS});\r\n            if (eff.num > eff.den) {\r\n                baseDamage = applyMod(0x800, baseDamage);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (move.critical) {\r\n        baseDamage = applyMod(0x1800, baseDamage);\r\n    }\r\n\r\n    let damages = damageVariation(baseDamage, 85, 100);\r\n\r\n    if (attacker.stab(moveType) || attacker.ability.name === \"Protean\") {\r\n        if (attacker.ability.name === \"Adaptability\") {\r\n            damages = applyMod(0x2000, damages);\r\n        } else {\r\n            damages = applyMod(0x1800, damages);\r\n        }\r\n    }\r\n\r\n    const moveTypes = [moveType];\r\n    if (move.name === \"Flying Press\") {\r\n        moveTypes.push(Types.FLYING);\r\n    }\r\n    let eff = effectiveness(moveTypes, defender.types(), {\r\n        gen: Gens.ORAS,\r\n        foresight: defender.foresight,\r\n        scrappy: attacker.ability.name === \"Scrappy\",\r\n        gravity: field.gravity,\r\n        freezeDry: move.name === \"Freeze-Dry\",\r\n        inverted: field.invertedBattle\r\n    });\r\n    if (moveTypes.includes(defender.ability.immunityType())) {\r\n        eff = {num: 0, den: 2};\r\n    }\r\n    if (eff.num === 0 && move.name === \"Thousand Arrows\") {\r\n        eff = {num: 2, den: 2};\r\n    }\r\n    if (eff.num === 0) return [0];\r\n\r\n    damages = damages.map(d => trunc(d * eff.num / eff.den));\r\n\r\n    if (attacker.isBurned() && move.isPhysical()\r\n        && attacker.ability.name !== \"Guts\"\r\n        && move.name !== \"Facade\") {\r\n        damages = damages.map(d => trunc(d / 2));\r\n    }\r\n\r\n    damages = damages.map(d => max(1, d));\r\n\r\n    let finalMod = 0x1000;\r\n\r\n    if (!move.critical && attacker.ability.name !== \"Infiltrator\") {\r\n        if (defender.reflect && (move.isPhysical() || move.isPsyshockLike())) {\r\n            finalMod = chainMod(field.multiBattle ? 0xA8F : 0x800, finalMod);\r\n        }\r\n        if (defender.lightScreen && move.isSpecial()\r\n            && !move.isPsyshockLike()) {\r\n            finalMod = chainMod(field.multiBattle ? 0xA8F : 0x800, finalMod);\r\n        }\r\n    }\r\n\r\n    if (defender.multiscaleIsActive()) {\r\n        finalMod = chainMod(0x800, finalMod);\r\n    }\r\n\r\n    if (defender.ability.name === \"Fur Coat\"\r\n        && (move.isPhysical() || move.isPsyshockLike())) {\r\n        finalMod = chainMod(0x800, finalMod);\r\n    }\r\n\r\n    if (attacker.ability.name === \"Tinted Lens\" && eff.num < eff.den) {\r\n        finalMod = chainMod(0x2000, finalMod);\r\n    }\r\n\r\n    if (defender.friendGuard) {\r\n        finalMod = chainMod(0xC00, finalMod);\r\n    }\r\n\r\n    if (attacker.ability.name === \"Sniper\" && move.critical) {\r\n        finalMod = chainMod(0x1800, finalMod);\r\n    }\r\n\r\n    if (eff.num > eff.den && defender.ability.reducesSuperEffective()) {\r\n        finalMod = chainMod(0xC00, finalMod);\r\n    }\r\n\r\n    if (field.fairyAura && moveType === Types.FAIRY\r\n        || field.darkAura && moveType === Types.DARK) {\r\n        finalMod = chainMod(field.auraBreak ? 0xAAA : 0x1555, finalMod);\r\n    }\r\n\r\n    switch (attacker.item.name) {\r\n        case \"Metronome\":\r\n            if (attacker.metronome <= 4) {\r\n                const mod = 0x1000 + attacker.metronome * 0x333;\r\n                finalMod = chainMod(mod, finalMod);\r\n            } else {\r\n                finalMod = chainMod(0x2000, finalMod);\r\n            }\r\n            break;\r\n        case \"Expert Belt\":\r\n            if (eff.num > eff.den) {\r\n                finalMod = chainMod(0x1333, finalMod);\r\n            }\r\n            break;\r\n        case \"Life Orb\":\r\n            finalMod = chainMod(0x14CC, finalMod);\r\n            break;\r\n        /* no default */\r\n    }\r\n\r\n    if (defender.item.berryTypeResist() === moveType\r\n        && (eff.num > eff.den || moveType === Types.NORMAL)) {\r\n        finalMod = chainMod(0x800, finalMod);\r\n        defender.item.used = true;\r\n    }\r\n\r\n    if (move.dig && move.boostedByDig()\r\n        || move.dive && move.boostedByDive()\r\n        || move.minimize && move.boostedByMinimize()) {\r\n        finalMod = chainMod(0x2000, finalMod);\r\n    }\r\n\r\n    damages = applyMod(finalMod, damages);\r\n\r\n    return damages;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/calculate/orasCalculate.js","import {isPhysicalType, effectiveness} from \"../info\";\r\n\r\nimport {\r\n    Gens, Stats, damageVariation,\r\n    scaleStat, needsScaling\r\n} from \"../utilities\";\r\n\r\nconst {max, min, trunc} = Math;\r\n\r\nexport default function rbyCalculate(attacker, defender, move) {\r\n    if (move.isOther()) return [0];\r\n\r\n    switch (move.name) {\r\n        case \"Seismic Toss\":\r\n        case \"Night Shade\":\r\n            return [attacker.level];\r\n        case \"Dragon Rage\":\r\n            return [40];\r\n        case \"Sonic Boom\":\r\n            return [20];\r\n        case \"Psywave\": {\r\n            // intentionally 1-149\r\n            const range = [];\r\n            const maxPsywave = trunc(attacker.level * 3 / 2);\r\n            for (let i = 1; i < maxPsywave; i++) {\r\n                range.push(i);\r\n            }\r\n            return range;\r\n        }\r\n        case \"Super Fang\":\r\n            return [max(1, trunc(defender.currentHp / 2))];\r\n        default:\r\n            if (move.isOhko()) return [65535];\r\n    }\r\n\r\n    let lvl, atk, def, spcA, spcD;\r\n    if (move.critical) {\r\n        lvl = 2 * attacker.level;\r\n        atk = attacker.stat(Stats.ATK);\r\n        def = defender.stat(Stats.DEF);\r\n        spcA = attacker.stat(Stats.SPC);\r\n        spcD = defender.stat(Stats.SPC);\r\n    } else {\r\n        lvl = attacker.level;\r\n        atk = attacker.boostedStat(Stats.ATK);\r\n        if (attacker.isBurned()) atk = trunc(atk / 2);\r\n        def = defender.boostedStat(Stats.DEF);\r\n        spcA = attacker.boostedStat(Stats.SPC);\r\n        spcD = defender.boostedStat(Stats.SPC);\r\n    }\r\n\r\n    if (defender.reflect && !move.critical) def *= 2;\r\n    if (defender.lightScreen && !move.critical) spcD *= 2;\r\n\r\n    if (needsScaling(atk, def)) {\r\n        atk = max(1, scaleStat(atk));\r\n        def = scaleStat(def);\r\n    }\r\n    if (needsScaling(spcA, spcD)) {\r\n        spcA = max(1, scaleStat(spcA));\r\n        spcD = scaleStat(spcD);\r\n    }\r\n\r\n    if (move.name === \"Explosion\" || move.name === \"Self-Destruct\") {\r\n        def = trunc(def / 2);\r\n    }\r\n\r\n    let a, d;\r\n    if (isPhysicalType(move.type())) {\r\n        a = atk;\r\n        d = def;\r\n    } else {\r\n        a = spcA;\r\n        d = spcD;\r\n    }\r\n\r\n    // Technically the game would procede with division by zero and crash.\r\n    // I might add a case to notify for this. Maybe an optional argument.\r\n    d = max(1, d);\r\n\r\n    let baseDamage = trunc(trunc(trunc(2 * lvl / 5 + 2)\r\n                                 * move.power() * a / d) / 50);\r\n\r\n    baseDamage = min(997, baseDamage) + 2;\r\n\r\n    if (attacker.stab(move.type())) {\r\n        baseDamage = trunc(baseDamage * 3 / 2);\r\n    }\r\n\r\n    const eff = effectiveness(move.type(), defender.types(), {gen: Gens.RBY});\r\n    if (eff.num === 0) return [0];\r\n    baseDamage = trunc(baseDamage * eff.num / eff.den);\r\n\r\n    const damages = damageVariation(baseDamage, 217, 255);\r\n\r\n    return damages;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/calculate/rbyCalculate.js","import Move from \"../Move\";\n\nimport {\n    Gens, Stats, Types, applyMod, chainMod,\n    roundHalfToZero, damageVariation\n} from \"../utilities\";\n\nimport {\n    isSandForceType, isLustrousType, isAdamantType,\n    isGriseousType, isSoulDewType, effectiveness\n} from \"../info\";\n\nconst {max, min, trunc} = Math;\n\n/*\n * TODO\n * Moves:\n * Multi-Attack\n * Shell Trap\n * Guardian of Alola 75% HP\n * Thousand Arrows (ORAS too)\n * Revelation Dance\n * Psychic Terrain (needs prio info) (created by psychic surge too)\n * Sparkling Aria heals burns\n * Darkest Lariat (ignores stat changes)\n * Baneful Bunker poisons\n * Z-Moves in general\n * Burn Up\n *\n * Abilities:\n * Stakeout\n * Soul-Heart\n * Shields Down\n * Schooling\n */\nexport default function smCalculate(attacker, defender, move, field) {\n    let moveType = move.type();\n    let movePower = move.power();\n\n    if (movePower === 0) return [0];\n\n    switch (move.name) {\n        case \"Weather Ball\":\n            moveType = Move.weatherBall(field.effectiveWeather());\n            movePower = moveType === Types.NORMAL ? 50 : 100;\n            break;\n        case \"Frustration\":\n            movePower = Move.frustration(attacker.happiness);\n            break;\n        case \"Return\":\n            movePower = Move.return(attacker.happiness);\n            break;\n        case \"Payback\":\n            if (defender.movedFirst) movePower *= 2;\n            break;\n        case \"Electro Ball\":\n            movePower = Move.electroBall(attacker.speed(), defender.speed());\n            break;\n        case \"Assurance\":\n            if (attacker.damagedPreviously) movePower *= 2;\n            break;\n        case \"Avalanche\":\n        case \"Revenge\":\n            if (attacker.damagedPreviously && !attacker.damagedByPainSplit) {\n                movePower *= 2;\n            }\n            break;\n        case \"Gyro Ball\":\n            movePower = Move.gyroBall(attacker.speed(), defender.speed());\n            break;\n        case \"Water Spout\":\n        case \"Eruption\":\n            movePower = Move.eruption(attacker.currentHp,\n                                      attacker.stat(Stats.HP));\n            break;\n        case \"Punishment\":\n            movePower = Move.punishment(defender.boosts);\n            break;\n        case \"Fury Cutter\":\n            movePower = min(160, 40 * 2 ** move.furyCutter);\n            break;\n        case \"Low Kick\":\n        case \"Grass Knot\":\n            movePower = Move.grassKnot(defender.weight());\n            break;\n        case \"Echoed Voice\":\n            movePower = min(200, 40 + 40 * move.echoedVoice);\n            break;\n        case \"Hex\":\n            if (defender.status) movePower *= 2;\n            break;\n        case \"Wring Out\":\n        case \"Crush Grip\":\n            movePower = max(1, roundHalfToZero(\n                120 * defender.currentHp / defender.stat(Stats.HP)));\n            break;\n        case \"Heavy Slam\":\n        case \"Heat Crash\":\n            movePower = Move.heavySlam(attacker.weight(), defender.weight());\n            break;\n        case \"Stored Power\":\n            movePower = Move.storedPower(attacker.boosts);\n            break;\n        case \"Flail\":\n        case \"Reversal\":\n            movePower = Move.flail(attacker.currentHp,\n                                   attacker.stat(Stats.HP),\n                                   Gens.SM);\n            break;\n        case \"Trump Card\":\n            movePower = Move.trumpCard(move.trumpPP);\n            break;\n        case \"Round\":\n            if (move.roundBoost) movePower *= 2;\n            break;\n        case \"Wake-Up Slap\":\n            if (defender.isAsleep()) movePower *= 2;\n            break;\n        case \"Smelling Salts\":\n            if (defender.isParalyzed()) movePower *= 2;\n            break;\n        case \"Beat Up\": {\n            const stat = attacker.beatUpStats[move.beatUpHit];\n            movePower = trunc(stat / 10) + 5;\n            break;\n        }\n        case \"Hidden Power\":\n            movePower = Move.hiddenPowerBp(attacker.ivs, Gens.SM);\n            moveType = Move.hiddenPowerType(attacker.ivs, Gens.SM);\n            break;\n        case \"Spit Up\":\n            if (attacker.stockpile === 0) return [0];\n            movePower = 100 * attacker.stockpile;\n            break;\n        case \"Pursuit\":\n            movePower *= 2;\n            break;\n        case \"Present\":\n            movePower = move.present;\n            break;\n        case \"Natural Gift\":\n            if (attacker.item.disabled || !attacker.item.isBerry()) return [0];\n            movePower = attacker.item.naturalGiftPower();\n            moveType = attacker.item.naturalGiftType();\n            break;\n        case \"Magnitude\":\n            movePower = Move.magnitude(move.magnitude);\n            break;\n        case \"Rollout\":\n        case \"Ice Ball\":\n            movePower = 30 * 2 ** ((move.rollout - 1) % 5 + move.defenseCurl);\n            break;\n        case \"Fling\":\n            movePower = attacker.item.flingPower();\n            break;\n        case \"Fire Pledge\":\n        case \"Water Pledge\":\n        case \"Grass Pledge\":\n            if (move.pledgeBoost) movePower *= 2;\n            break;\n        case \"Triple Kick\":\n            movePower = 10 * move.tripleKickCount;\n            break;\n        case \"Judgment\":\n            if (attacker.item.plateType() > -1) {\n                moveType = attacker.item.plateType();\n            }\n            break;\n        case \"Seismic Toss\":\n        case \"Night Shade\":\n            return [attacker.level];\n        case \"Dragon Rage\":\n            return [40];\n        case \"Sonic Boom\":\n            return [20];\n        case \"Endeavor\":\n            return [max(0, defender.currentHp - attacker.currentHp)];\n        case \"Psywave\": {\n            const range = [];\n            for (let i = 0; i <= 100; i++) {\n                range.push(max(1, trunc(attacker.level * (i + 50) / 100)));\n            }\n            return range;\n        }\n        case \"Super Fang\":\n        case \"Nature's Madness\":\n            return [max(1, trunc(defender.currentHp / 2))];\n        case \"Self-Destruct\":\n        case \"Explosion\":\n            if (defender.ability.name === \"Damp\") return [0];\n            break;\n        case \"Final Gambit\":\n            return [attacker.currentHp];\n        default:\n            if (move.isOhko()) {\n                return [defender.stat(Stats.HP)];\n            }\n            if (move.isSound() && defender.ability.name === \"Soundproof\"\n                || move.isBall() && defender.ability.name === \"Bulletproof\") {\n                return [0];\n            }\n            if (move.fly && move.boostedByFly()) {\n                movePower *= 2;\n            } else if (attacker.ability.name === \"Liquid Voice\"\n                       && move.isSound()) {\n                moveType = Types.WATER;\n            } else if (move.name === \"Multi-Attack\") {\n                moveType = attacker.item.memoryType();\n            }\n    }\n\n    const gemBoost = moveType === attacker.item.gemType();\n    attacker.item.used = attacker.item.used || gemBoost;\n\n    if (move.name === \"Acrobatics\" && attacker.item.name === \"(No Item)\") {\n        movePower *= 2;\n    }\n\n    let movePowerMod = 0x1000;\n\n    switch (attacker.ability.name) {\n        case \"Technician\":\n            if (movePower <= 60) {\n                movePowerMod = chainMod(0x1800, movePowerMod);\n            }\n            break;\n        case \"Flare Boost\":\n            if (attacker.isBurned() && move.isSpecial()) {\n                movePowerMod = chainMod(0x1800, movePowerMod);\n            }\n            break;\n        case \"Analytic\":\n            if (defender.movedFirst) {\n                movePowerMod = chainMod(0x14CD, movePowerMod);\n            }\n            break;\n        case \"Reckless\":\n            if (move.isRecklessBoosted()) {\n                movePowerMod = chainMod(0x1333, movePowerMod);\n            }\n            break;\n        case \"Iron Fist\":\n            if (move.isPunch()) {\n                movePowerMod = chainMod(0x1333, movePowerMod);\n            }\n            break;\n        case \"Toxic Boost\":\n            if ((attacker.isPoisoned() || attacker.isBadlyPoisoned())\n                && move.isPhysical()) {\n                movePowerMod = chainMod(0x1800, movePowerMod);\n            }\n            break;\n        case \"Rivalry\":\n            if (attacker.gender && defender.gender) {\n                const m = attacker.gender === defender.gender ? 0xC00 : 0x1400;\n                movePowerMod = chainMod(m, movePowerMod);\n            }\n            break;\n        case \"Sand Force\":\n            if (field.sand() && isSandForceType(moveType)) {\n                movePowerMod = chainMod(0x14CD, movePowerMod);\n            }\n            break;\n        case \"Normalize\":\n            moveType = Types.NORMAL;\n            break;\n        case \"Tough Claws\":\n            if (move.isContact()) {\n                movePowerMod = chainMod(0x1555, movePowerMod);\n            }\n            break;\n        case \"Strong Jaw\":\n            if (move.isBite()) {\n                movePowerMod = chainMod(0x1800, movePowerMod);\n            }\n            break;\n        case \"Mega Launcher\":\n            if (move.isPulse()) {\n                movePowerMod = chainMod(0x1800, movePowerMod);\n            }\n            break;\n        case \"Parental Bond\":\n            if (move.secondHit) {\n                movePowerMod = chainMod(0x400, movePowerMod);\n            }\n            break;\n        case \"Steelworker\":\n            if (moveType === Types.STEEL) {\n                movePowerMod = chainMod(0x1800, movePowerMod);\n            }\n            break;\n        case \"Water Bubble\":\n            if (moveType === Types.WATER) {\n                movePowerMod = chainMod(0x1800, movePowerMod);\n            }\n            break;\n        default:\n            if (attacker.ability.normalToType() > -1\n                && moveType === Types.NORMAL) {\n                // refrigerate, etc.\n                movePowerMod = chainMod(0x1333, movePowerMod);\n                moveType = attacker.ability.normalToType();\n            }\n    }\n\n    if (moveType === Types.FIRE) {\n        switch (defender.ability.name) {\n            case \"Heatproof\":\n            case \"Water Bubble\":\n                movePowerMod = chainMod(0x800, movePowerMod);\n                break;\n            case \"Dry Skin\":\n                movePowerMod = chainMod(0x1400, movePowerMod);\n                break;\n            /* no default */\n        }\n    }\n\n    if (attacker.ability.name === \"Sheer Force\"\n        && move.affectedBySheerForce()) {\n        movePowerMod = chainMod(0x14CD, movePowerMod);\n    }\n\n    switch (attacker.item.name) {\n        case \"Muscle Band\":\n            if (move.isPhysical()) {\n                movePowerMod = chainMod(0x1199, movePowerMod);\n            }\n            break;\n        case \"Wise Glasses\":\n            if (move.isSpecial()) {\n                movePowerMod = chainMod(0x1199, movePowerMod);\n            }\n            break;\n        case \"Adamant Orb\":\n            if (attacker.name === \"Dialga\" && isAdamantType(moveType)) {\n                movePowerMod = chainMod(0x1333, movePowerMod);\n            }\n            break;\n        case \"Lustrous Orb\":\n            if (attacker.name === \"Palkia\" && isLustrousType(moveType)) {\n                movePowerMod = chainMod(0x1333, movePowerMod);\n            }\n            break;\n        case \"Griseous Orb\":\n            if (attacker.name.startsWith(\"Giratina\")\n                && isGriseousType(moveType)) {\n                movePowerMod = chainMod(0x1333, movePowerMod);\n            }\n            break;\n        case \"Soul Dew\":\n            if ((attacker.name === \"Latias\" || attacker.name === \"Latios\")\n                && isSoulDewType(moveType)) {\n                movePowerMod = chainMod(0x1333, movePowerMod);\n            }\n            break;\n        default:\n            if (gemBoost) {\n                movePowerMod = chainMod(0x14CD, movePowerMod);\n            } else if (attacker.item.boostedType() === moveType) {\n                movePowerMod = chainMod(0x1333, movePowerMod);\n            }\n    }\n\n    switch (move.name) {\n        case \"Facade\":\n            if (attacker.status) {\n                movePowerMod = chainMod(0x2000, movePowerMod);\n            }\n            break;\n        case \"Brine\":\n            if (defender.currentHp * 2 <= defender.stat(Stats.HP)) {\n                movePowerMod = chainMod(0x2000, movePowerMod);\n            }\n            break;\n        case \"Venoshock\":\n            if (attacker.isPoisoned() || attacker.isBadlyPoisoned()) {\n                movePowerMod = chainMod(0x2000, movePowerMod);\n            }\n            break;\n        case \"Retaliate\":\n            if (move.previouslyFainted) {\n                movePowerMod = chainMod(0x2000, movePowerMod);\n            }\n            break;\n        case \"Fusion Bolt\":\n            if (move.fusionFlare) {\n                movePowerMod = chainMod(0x2000, movePowerMod);\n            }\n            break;\n        case \"Fusion Flare\":\n            if (move.fusionBolt) {\n                movePowerMod = chainMod(0x2000, movePowerMod);\n            }\n            break;\n        case \"Knock Off\":\n            if (defender.knockOffBoost()) {\n                movePowerMod = chainMod(0x1800, movePowerMod);\n            }\n            break;\n        case \"Earthquake\":\n        case \"Magnitude\":\n        case \"Bulldoze\":\n            if (field.grassyTerrain) {\n                movePowerMod = chainMod(0x800, movePowerMod);\n            }\n            break;\n        /* no default */\n    }\n\n    if (move.meFirst) {\n        movePowerMod = chainMod(0x1800, movePowerMod);\n    }\n\n    if (!field.sun() && !field.isClearWeather() && move.name === \"Solar Beam\") {\n        movePowerMod = chainMod(0x800, movePowerMod);\n    }\n\n    if (attacker.charge && moveType === Types.ELECTRIC) {\n        movePowerMod = chainMod(0x2000, movePowerMod);\n    }\n\n    if (attacker.helpingHand) {\n        movePowerMod = chainMod(0x1800, movePowerMod);\n    }\n\n    if (field.waterSport && moveType === Types.FIRE) {\n        movePowerMod = chainMod(0x548, movePowerMod);\n    }\n\n    if (field.mudSport && moveType === Types.ELECTRIC) {\n        movePowerMod = chainMod(0x548, movePowerMod);\n    }\n\n    if (field.grassyTerrain && attacker.grounded && moveType === Types.GRASS) {\n        movePowerMod = chainMod(0x1800, movePowerMod);\n    }\n\n    if (field.electricTerrain && attacker.grounded\n        && moveType === Types.ELECTRIC) {\n        movePowerMod = chainMod(0x1800, movePowerMod);\n    }\n\n    if (field.mistyTerrain && defender.grounded && moveType === Types.DRAGON) {\n        movePowerMod = chainMod(0x800, movePowerMod);\n    }\n\n    if (field.ionDeluge && moveType === Types.NORMAL) {\n        moveType = Types.ELECTRIC;\n    }\n\n    if (attacker.electrify) {\n        moveType = Types.ELECTRIC;\n    }\n\n    movePower = max(1, applyMod(movePowerMod, movePower));\n\n    const defStat = field.wonderRoom ? Stats.SDEF : Stats.DEF;\n    const sdefStat = field.wonderRoom ? Stats.DEF : Stats.SDEF;\n    const unawareA = attacker.ability.name === \"Unaware\";\n    const unawareD = defender.ability.name === \"Unaware\";\n    let atk, def, satk, sdef;\n    if (move.name === \"Foul Play\") {\n        if (unawareA) {\n            def = defender.stat(defStat);\n            sdef = defender.stat(sdefStat);\n            atk = defender.stat(Stats.ATK);\n        } else if (move.critical) {\n            def = min(defender.stat(defStat),\n                      defender.boostedStat(defStat));\n            sdef = min(defender.stat(sdefStat),\n                       defender.boostedStat(sdefStat));\n            atk = max(defender.stat(Stats.ATK),\n                      defender.boostedStat(Stats.ATK));\n        } else {\n            def = defender.boostedStat(defStat);\n            sdef = defender.boostedStat(sdefStat);\n            atk = defender.boostedStat(Stats.ATK);\n        }\n\n        if (unawareD) {\n            satk = attacker.stat(Stats.SATK);\n        } else if (move.critical) {\n            satk = max(attacker.stat(Stats.SATK),\n                       attacker.boostedStat(Stats.SATK));\n        } else {\n            satk = attacker.boostedStat(Stats.SATK);\n        }\n    } else if (move.ignoresDefenseBoosts()) {\n        def = defender.stat(defStat);\n        sdef = defender.stat(sdefStat);\n\n        if (unawareD) {\n            atk = attacker.stat(Stats.ATK);\n            satk = attacker.stat(Stats.SATK);\n        } else if (move.critical) {\n            atk = max(attacker.stat(Stats.ATK),\n                      attacker.boostedStat(Stats.ATK));\n            satk = max(attacker.stat(Stats.SATK),\n                       attacker.boostedStat(Stats.SATK));\n        } else {\n            atk = attacker.boostedStat(Stats.ATK);\n            satk = attacker.boostedStat(Stats.SATK);\n        }\n    } else {\n        if (unawareA) {\n            def = defender.stat(defStat);\n            sdef = defender.stat(sdefStat);\n        } else if (move.critical) {\n            def = min(defender.stat(defStat),\n                      defender.boostedStat(defStat));\n            sdef = min(defender.stat(sdefStat),\n                       defender.boostedStat(sdefStat));\n        } else {\n            def = defender.boostedStat(defStat);\n            sdef = defender.boostedStat(sdefStat);\n        }\n\n        if (unawareD) {\n            atk = attacker.stat(Stats.ATK);\n            satk = attacker.stat(Stats.SATK);\n        } else if (move.critical) {\n            atk = max(attacker.stat(Stats.ATK),\n                      attacker.boostedStat(Stats.ATK));\n            satk = max(attacker.stat(Stats.SATK),\n                       attacker.boostedStat(Stats.SATK));\n        } else {\n            atk = attacker.boostedStat(Stats.ATK);\n            satk = attacker.boostedStat(Stats.SATK);\n        }\n    }\n\n    let atkMod = 0x1000;\n    let satkMod = 0x1000;\n\n    if (defender.ability.name === \"Thick Fat\"\n        && (moveType === Types.FIRE || moveType === Types.ICE)) {\n        atkMod = chainMod(0x800, atkMod);\n        satkMod = chainMod(0x800, satkMod);\n    }\n\n    switch (attacker.ability.name) {\n        case \"Guts\":\n            if (defender.status) atkMod = chainMod(0x1800, atkMod);\n            break;\n        case \"Plus\":\n            if (attacker.minus) satkMod = chainMod(0x1800, satkMod);\n            break;\n        case \"Minus\":\n            if (attacker.plus) satkMod = chainMod(0x1800, satkMod);\n            break;\n        case \"Defeatist\":\n            if (attacker.currentHp * 2 <= attacker.stat(Stats.HP)) {\n                atkMod = chainMod(0x800, atkMod);\n                satkMod = chainMod(0x800, satkMod);\n            }\n            break;\n        case \"Huge Power\":\n        case \"Pure Power\":\n            atkMod = chainMod(0x2000, atkMod);\n            break;\n        case \"Solar Power\":\n            if (field.sun()) satkMod = chainMod(0x1800, satkMod);\n            break;\n        case \"Hustle\":\n            atk = applyMod(0x1800, atk);\n            break;\n        case \"Flash Fire\":\n            if (attacker.flashFire && moveType === Types.FIRE) {\n                atkMod = chainMod(0x1800, atkMod);\n                satkMod = chainMod(0x1800, satkMod);\n            }\n            break;\n        case \"Slow Start\":\n            if (attacker.slowStart) atkMod = chainMod(0x800, atkMod);\n            break;\n        default:\n            if (attacker.pinchAbilityActivated(moveType)) {\n                // blaze, torrent, overgrow, ...\n                atkMod = chainMod(0x1800, atkMod);\n                satkMod = chainMod(0x1800, satkMod);\n            }\n    }\n\n    if (attacker.flowerGift && field.sun()) {\n        atkMod = chainMod(0x1800, atkMod);\n    }\n\n    if (attacker.battery) {\n        satkMod = chainMod(0x14CD, satkMod);\n    }\n\n    switch (attacker.item.name) {\n        case \"Deep Sea Tooth\":\n            if (attacker.name === \"Clamperl\") {\n                satkMod = chainMod(0x2000, satkMod);\n            }\n            break;\n        case \"Choice Band\":\n            atkMod = chainMod(0x1800, atkMod);\n            break;\n        case \"Choice Specs\":\n            satkMod = chainMod(0x1800, satkMod);\n            break;\n        default:\n            if (attacker.thickClubBoosted()) {\n                atkMod = chainMod(0x2000, atkMod);\n            } else if (attacker.lightBallBoosted()) {\n                atkMod = chainMod(0x2000, atkMod);\n                satkMod = chainMod(0x2000, satkMod);\n            }\n    }\n\n    atk = applyMod(atkMod, atk);\n    satk = applyMod(satkMod, satk);\n\n    if (field.sand() && defender.stab(Types.ROCK)) {\n        sdef = applyMod(0x1800, sdef);\n    }\n\n    let defMod = 0x1000;\n    let sdefMod = 0x1000;\n\n    if (defender.ability.name === \"Marvel Scale\" && defender.status) {\n        defMod = chainMod(0x1800, defMod);\n    } else if (defender.ability.name === \"Grass Pelt\" && field.grassyTerrain) {\n        defMod = chainMod(0x1800, defMod);\n    }\n\n    if (defender.flowerGift && field.sun()) {\n        sdefMod = chainMod(0x1800, sdefMod);\n    }\n\n    switch (defender.item.name) {\n        case \"Deep Sea Scale\":\n            if (defender.name === \"Clamperl\") {\n                sdefMod = chainMod(0x1800, sdefMod);\n            }\n            break;\n        case \"Metal Powder\":\n            if (defender.name === \"Ditto\") {\n                defMod = chainMod(0x2000, defMod);\n            }\n            break;\n        case \"Eviolite\":\n            if (defender.hasEvolution()) {\n                defMod = chainMod(0x1800, defMod);\n                sdefMod = chainMod(0x1800, sdefMod);\n            }\n            break;\n        case \"Assault Vest\":\n            sdefMod = chainMod(0x1800, sdefMod);\n            break;\n        /* no default */\n    }\n\n    def = applyMod(defMod, def);\n    sdef = applyMod(sdefMod, sdef);\n\n    let a = 0, d = 0;\n    if (move.isPsyshockLike()) {\n        a = satk;\n        d = def;\n    } else if (move.isPhysical()) {\n        a = atk;\n        d = def;\n    } else if (move.isSpecial()) {\n        a = satk;\n        d = sdef;\n    } else {\n        return [0];\n    }\n\n    let baseDamage = trunc(trunc(trunc(2 * attacker.level / 5 + 2)\n                                 * movePower * a / d) / 50) + 2;\n\n    if (field.multiBattle && move.hasMultipleTargets()) {\n        baseDamage = applyMod(0xC00, baseDamage);\n    }\n\n    if (move.name !== \"Weather Ball\") {\n        if (field.harshSun() && moveType === Types.WATER) {\n            return [0];\n        } else if (field.heavyRain() && moveType === Types.FIRE) {\n            return [0];\n        } else if (field.sun()) {\n            if (moveType === Types.FIRE) {\n                baseDamage = applyMod(0x1800, baseDamage);\n            } else if (moveType === Types.WATER) {\n                baseDamage = applyMod(0x800, baseDamage);\n            }\n        } else if (field.rain()) {\n            if (moveType === Types.WATER) {\n                baseDamage = applyMod(0x1800, baseDamage);\n            } else if (moveType === Types.FIRE) {\n                baseDamage = applyMod(0x800, baseDamage);\n            }\n        } else if (field.strongWinds() && defender.stab(Types.FLYING)) {\n            const eff = effectiveness(moveType, Types.FLYING, {gen: Gens.SM});\n            if (eff.num > eff.den) {\n                baseDamage = applyMod(0x800, baseDamage);\n            }\n        }\n    }\n\n    if (move.critical) {\n        baseDamage = applyMod(0x1800, baseDamage);\n    }\n\n    let damages = damageVariation(baseDamage, 85, 100);\n\n    if (attacker.stab(moveType) || attacker.ability.name === \"Protean\") {\n        if (attacker.ability.name === \"Adaptability\") {\n            damages = applyMod(0x2000, damages);\n        } else {\n            damages = applyMod(0x1800, damages);\n        }\n    }\n\n    const moveTypes = [moveType];\n    if (move.name === \"Flying Press\") {\n        moveTypes.push(Types.FLYING);\n    }\n    let eff = effectiveness(moveTypes, defender.types(), {\n        gen: Gens.SM,\n        foresight: defender.foresight,\n        scrappy: attacker.ability.name === \"Scrappy\",\n        gravity: field.gravity,\n        freezeDry: move.name === \"Freeze-Dry\",\n        inverted: field.invertedBattle\n    });\n    if (moveTypes.includes(defender.ability.immunityType())) {\n        eff = {num: 0, den: 2};\n    }\n    if (eff.num === 0 && move.name === \"Thousand Arrows\") {\n        eff = {num: 2, den: 2};\n    }\n    if (eff.num === 0) return [0];\n\n    damages = damages.map(d => trunc(d * eff.num / eff.den));\n\n    if (attacker.isBurned() && move.isPhysical()\n        && attacker.ability.name !== \"Guts\"\n        && move.name !== \"Facade\") {\n        damages = damages.map(d => trunc(d / 2));\n    }\n\n    damages = damages.map(d => max(1, d));\n\n    let finalMod = 0x1000;\n\n    if (!move.critical && attacker.ability.name !== \"Infiltrator\") {\n        if (defender.reflect && (move.isPhysical() || move.isPsyshockLike())) {\n            finalMod = chainMod(field.multiBattle ? 0xA8F : 0x800, finalMod);\n        }\n        if (defender.lightScreen && move.isSpecial()\n            && !move.isPsyshockLike()) {\n            finalMod = chainMod(field.multiBattle ? 0xA8F : 0x800, finalMod);\n        }\n    }\n\n    if (defender.multiscaleIsActive()) {\n        finalMod = chainMod(0x800, finalMod);\n    }\n\n    if (defender.ability.name === \"Fur Coat\"\n        && (move.isPhysical() || move.isPsyshockLike())) {\n        finalMod = chainMod(0x800, finalMod);\n    }\n\n    if (attacker.ability.name === \"Tinted Lens\" && eff.num < eff.den) {\n        finalMod = chainMod(0x2000, finalMod);\n    }\n\n    if (defender.friendGuard) {\n        finalMod = chainMod(0xC00, finalMod);\n    }\n\n    if (attacker.ability.name === \"Sniper\" && move.critical) {\n        finalMod = chainMod(0x1800, finalMod);\n    }\n\n    if (eff.num > eff.den && defender.ability.reducesSuperEffective()) {\n        finalMod = chainMod(0xC00, finalMod);\n    }\n\n    if (field.fairyAura && moveType === Types.FAIRY\n        || field.darkAura && moveType === Types.DARK) {\n        finalMod = chainMod(field.auraBreak ? 0xAAA : 0x1555, finalMod);\n    }\n\n    switch (attacker.item.name) {\n        case \"Metronome\":\n            if (attacker.metronome <= 4) {\n                const mod = 0x1000 + attacker.metronome * 0x333;\n                finalMod = chainMod(mod, finalMod);\n            } else {\n                finalMod = chainMod(0x2000, finalMod);\n            }\n            break;\n        case \"Expert Belt\":\n            if (eff.num > eff.den) {\n                finalMod = chainMod(0x1333, finalMod);\n            }\n            break;\n        case \"Life Orb\":\n            finalMod = chainMod(0x14CC, finalMod);\n            break;\n        /* no default */\n    }\n\n    if (defender.item.berryTypeResist() === moveType\n        && (eff.num > eff.den || moveType === Types.NORMAL)) {\n        finalMod = chainMod(0x800, finalMod);\n        defender.item.used = true;\n    }\n\n    if (move.dig && move.boostedByDig()\n        || move.dive && move.boostedByDive()\n        || move.minimize && move.boostedByMinimize()) {\n        finalMod = chainMod(0x2000, finalMod);\n    }\n\n    damages = applyMod(finalMod, damages);\n\n    return damages;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/calculate/smCalculate.js","import {Stats} from \"../utilities\";\n\nconst {max, trunc} = Math;\n\nexport default function advEndOfTurn(attacker, defender, field) {\n    const values = [];\n    const messages = [];\n    const hp = defender.stat(Stats.HP);\n\n    if (field.sand() && defender.hurtBySandstorm()) {\n        values.push(-max(1, trunc(hp / 16)));\n        messages.push(\"Sandstorm\");\n    } else if (field.hail() && defender.hurtByHail()) {\n        values.push(-max(1, trunc(hp / 16)));\n        messages.push(\"Hail\");\n    }\n    // ingrain\n    // rain dish\n    if (defender.item.name === \"Leftovers\") {\n        values.push(max(1, trunc(hp / 16)));\n        messages.push(\"Leftovers\");\n    }\n    // leech seed\n    if (defender.isBurned()) {\n        values.push(-max(1, trunc(hp / 8)));\n        messages.push(\"Burn\");\n    } else if (defender.isPoisoned()) {\n        values.push(-max(1, trunc(hp / 8)));\n        messages.push(\"Poison\");\n    } else if (defender.isBadlyPoisoned()) {\n        values.push(\"toxic\");\n        messages.push(\"Toxic\");\n    }\n    // nightmare\n    // curse\n    // multi turns -- whirlpool, flame wheel, etc\n\n    return {\n        values,\n        messages\n    };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/endOfTurn/advEndOfTurn.js","import {Stats, Types} from \"../utilities\";\n\nconst {max, trunc} = Math;\n\nexport default function b2w2EndOfTurn(attacker, defender, field) {\n    const values = [];\n    const messages = [];\n    const hp = defender.stat(Stats.HP);\n\n    if (field.sand() && defender.hurtBySandstorm()) {\n        values.push(-max(1, trunc(hp / 16)));\n        messages.push(\"Sandstorm\");\n    } else if (field.hail() && defender.hurtByHail()) {\n        values.push(-max(1, trunc(hp / 16)));\n        messages.push(\"Hail\");\n    }\n\n    if (defender.ability.name === \"Dry Skin\") {\n        if (field.sun()) {\n            values.push(-max(1, trunc(hp / 8)));\n            messages.push(\"Dry Skin\");\n        } else if (field.rain()) {\n            values.push(max(1, trunc(hp / 8)));\n            messages.push(\"Dry Skin\");\n        }\n    } else if (field.rain() && defender.ability.name === \"Rain Dish\") {\n        values.push(max(1, trunc(hp / 16)));\n        messages.push(\"Rain Dish\");\n    } else if (field.hail() && defender.ability.name === \"Ice Body\") {\n        values.push(max(1, trunc(hp / 16)));\n        messages.push(\"Ice Body\");\n    }\n    // fire pledge + grass pledge damage\n    if (defender.item.name === \"Leftovers\") {\n        values.push(max(1, trunc(hp / 16)));\n        messages.push(\"Leftovers\");\n    } else if (defender.item.name === \"Black Sludge\") {\n        if (defender.stab(Types.POISON)) {\n            values.push(max(1, trunc(hp / 16)));\n        } else {\n            values.push(-max(1, trunc(hp / 16)));\n        }\n        messages.push(\"Black Sludge\");\n    }\n    // aqua ring\n    // ingrain\n    // leech seed\n    if (defender.ability.nonDisabledName() === \"Heatproof\"\n        && defender.isBurned()) {\n        values.push(-max(1, trunc(hp / 16)));\n        messages.push(\"Burn\");\n    } else if (defender.isBurned()) {\n        values.push(-max(1, trunc(hp / 8)));\n        messages.push(\"Burn\");\n    } else if (defender.isPoisoned()) {\n        values.push(-max(1, trunc(hp / 8)));\n        messages.push(\"Poison\");\n    } else if (defender.isBadlyPoisoned()) {\n        values.push(\"toxic\");\n        messages.push(\"Toxic\");\n    }\n    // nightmare\n    // curse\n    // multi turns -- whirlpool, flame wheel, etc\n    if (defender.isAsleep() && attacker.ability.name === \"Bad Dreams\") {\n        values.push(-max(1, trunc(hp / 8)));\n        messages.push(\"Bad Dreams\");\n    }\n    if (defender.item.name === \"Sticky Barb\") {\n        values.push(-max(1, trunc(hp / 8)));\n        messages.push(\"Sticky Barb\");\n    }\n\n    if (defender.ability.name === \"Magic Guard\") {\n        for (let i = 1; i < values.length; i++) {\n            if (values[i] < 0) {\n                values.splice(i, 1);\n                messages.splice(i, 1);\n            }\n        }\n    }\n\n    return {\n        values,\n        messages\n    };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/endOfTurn/b2w2EndOfTurn.js","import {Stats} from \"../utilities\";\n\nconst {max, trunc} = Math;\n\nexport default function gscEndOfTurn(attacker, defender, field) {\n    const values = [];\n    const messages = [];\n    const hp = defender.stat(Stats.HP);\n\n    if (defender.isBurned()) {\n        values.push(-max(1, trunc(hp / 8)));\n        messages.push(\"Burn\");\n    } else if (defender.isPoisoned()) {\n        values.push(-max(1, trunc(hp / 8)));\n        messages.push(\"Poison\");\n    } else if (defender.isBadlyPoisoned()) {\n        values.push(\"toxic\");\n        messages.push(\"Toxic\");\n    }\n    // leech seed\n    // nightmare\n    // curse\n    if (field.sand() && defender.hurtBySandstorm()) {\n        values.push(-max(1, trunc(hp / 8)));\n        messages.push(\"Sandstorm\");\n    }\n    if (defender.item.name === \"Leftovers\") {\n        values.push(max(1, trunc(hp / 16)));\n        messages.push(\"Leftovers\");\n    }\n\n    return {\n        values,\n        messages\n    };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/endOfTurn/gscEndOfTurn.js","import {Stats, Types} from \"../utilities\";\n\nconst {max, trunc} = Math;\n\nexport default function hgssEndOfTurn(attacker, defender, field) {\n    const values = [];\n    const messages = [];\n    const hp = defender.stat(Stats.HP);\n\n    if (field.sand() && defender.hurtBySandstorm()) {\n        values.push(-max(1, trunc(hp / 16)));\n        messages.push(\"Sandstorm\");\n    } else if (field.hail() && defender.hurtByHail()) {\n        values.push(-max(1, trunc(hp / 16)));\n        messages.push(\"Hail\");\n    }\n\n    if (defender.ability.name === \"Dry Skin\") {\n        if (field.sun()) {\n            values.push(-max(1, trunc(hp / 8)));\n            messages.push(\"Dry Skin\");\n        } else if (field.rain()) {\n            values.push(max(1, trunc(hp / 8)));\n            messages.push(\"Dry Skin\");\n        }\n    } else if (field.rain() && defender.ability.name === \"Rain Dish\") {\n        values.push(max(1, trunc(hp / 16)));\n        messages.push(\"Rain Dish\");\n    } else if (field.hail() && defender.ability.name === \"Ice Body\") {\n        values.push(max(1, trunc(hp / 16)));\n        messages.push(\"Ice Body\");\n    }\n    // ingrain\n    // aqua ring\n    if (defender.item.name === \"Leftovers\") {\n        values.push(max(1, trunc(hp / 16)));\n        messages.push(\"Leftovers\");\n    } else if (defender.item.name === \"Black Sludge\") {\n        if (defender.stab(Types.POISON)) {\n            values.push(max(1, trunc(hp / 16)));\n        } else {\n            values.push(-max(1, trunc(hp / 16)));\n        }\n        messages.push(\"Black Sludge\");\n    }\n    // leech seed\n    if (defender.isBurned()) {\n        values.push(-max(1, trunc(hp / 8)));\n        messages.push(\"Burn\");\n    } else if (defender.isPoisoned()) {\n        values.push(-max(1, trunc(hp / 8)));\n        messages.push(\"Poison\");\n    } else if (defender.isBadlyPoisoned()) {\n        values.push(\"toxic\");\n        messages.push(\"Toxic\");\n    }\n    // nightmare\n    // curse\n    // multi turns -- whirlpool, flame wheel, etc\n    if (defender.isAsleep() && attacker.ability.name === \"Bad Dreams\") {\n        values.push(-max(1, trunc(hp / 8)));\n        messages.push(\"Bad Dreams\");\n    }\n\n    if (defender.item.name === \"Sticky Barb\") {\n        values.push(-max(1, trunc(hp / 8)));\n        messages.push(\"Sticky Barb\");\n    }\n\n    if (defender.ability.name === \"Magic Guard\") {\n        for (let i = 1; i < values.length; i++) {\n            if (values[i] < 0) {\n                values.splice(i, 1);\n                messages.splice(i, 1);\n            }\n        }\n    }\n\n    return {\n        values,\n        messages\n    };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/endOfTurn/hgssEndOfTurn.js","import {Stats, Types} from \"../utilities\";\n\nconst {max, trunc} = Math;\n\nexport default function orasEndOfTurn(attacker, defender, field) {\n    const values = [];\n    const messages = [];\n    const hp = defender.stat(Stats.HP);\n\n    if (field.sand() && defender.hurtBySandstorm()) {\n        values.push(-max(1, trunc(hp / 16)));\n        messages.push(\"Sandstorm\");\n    } else if (field.hail() && defender.hurtByHail()) {\n        values.push(-max(1, trunc(hp / 16)));\n        messages.push(\"Hail\");\n    }\n\n    if (defender.ability.name === \"Dry Skin\") {\n        if (field.sun()) {\n            values.push(-max(1, trunc(hp / 8)));\n            messages.push(\"Dry Skin\");\n        } else if (field.rain()) {\n            values.push(max(1, trunc(hp / 8)));\n            messages.push(\"Dry Skin\");\n        }\n    } else if (field.rain() && defender.ability.name === \"Rain Dish\") {\n        values.push(max(1, trunc(hp / 16)));\n        messages.push(\"Rain Dish\");\n    } else if (field.hail() && defender.ability.name === \"Ice Body\") {\n        values.push(max(1, trunc(hp / 16)));\n        messages.push(\"Ice Body\");\n    }\n    // fire pledge + grass pledge damage\n    if (defender.item.name === \"Leftovers\") {\n        values.push(max(1, trunc(hp / 16)));\n        messages.push(\"Leftovers\");\n    } else if (defender.item.name === \"Black Sludge\") {\n        if (defender.stab(Types.POISON)) {\n            values.push(max(1, trunc(hp / 16)));\n        } else {\n            values.push(-max(1, trunc(hp / 16)));\n        }\n        messages.push(\"Black Sludge\");\n    }\n    // aqua ring\n    // ingrain\n    // leech seed\n    if (defender.ability.nonDisabledName() === \"Heatproof\"\n        && defender.isBurned()) {\n        values.push(-max(1, trunc(hp / 16)));\n        messages.push(\"Burn\");\n    } else if (defender.isBurned()) {\n        values.push(-max(1, trunc(hp / 8)));\n        messages.push(\"Burn\");\n    } else if (defender.isPoisoned()) {\n        values.push(-max(1, trunc(hp / 8)));\n        messages.push(\"Poison\");\n    } else if (defender.isBadlyPoisoned()) {\n        values.push(\"toxic\");\n        messages.push(\"Toxic\");\n    }\n    // nightmare\n    // curse\n    // multi turns -- whirlpool, flame wheel, etc\n    if (defender.isAsleep() && attacker.ability.name === \"Bad Dreams\") {\n        values.push(-max(1, trunc(hp / 8)));\n        messages.push(\"Bad Dreams\");\n    }\n    if (defender.item.name === \"Sticky Barb\") {\n        values.push(-max(1, trunc(hp / 8)));\n        messages.push(\"Sticky Barb\");\n    }\n\n    if (defender.ability.name === \"Magic Guard\") {\n        for (let i = 1; i < values.length; i++) {\n            if (values[i] < 0) {\n                values.splice(i, 1);\n                messages.splice(i, 1);\n            }\n        }\n    }\n\n    return {\n        values,\n        messages\n    };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/endOfTurn/orasEndOfTurn.js","import {Stats} from \"../utilities\";\n\nconst {max, trunc} = Math;\n\nexport default function rbyEndOfTurn(attacker, defender) {\n    const values = [];\n    const messages = [];\n    const hp = defender.stat(Stats.HP);\n    if (defender.isBurned()) {\n        values.push(-max(1, trunc(hp / 16)));\n        messages.push(\"Burn\");\n    } else if (defender.isPoisoned()) {\n        values.push(-max(1, trunc(hp / 16)));\n        messages.push(\"Poison\");\n    } else if (defender.isBadlyPoisoned()) {\n        values.push(\"toxic\");\n        messages.push(\"Toxic\");\n    }\n\n    return {\n        values,\n        messages\n    };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/endOfTurn/rbyEndOfTurn.js"],"sourceRoot":""}